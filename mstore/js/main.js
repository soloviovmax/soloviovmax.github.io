(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchLoginForms = function () {
   function SearchLoginForms() {
      _classCallCheck(this, SearchLoginForms);

      // DOM
      this.serchWrap = document.querySelector('.user-panel__item--search');
      this.searchBtn = this.serchWrap.querySelector('.user-panel__button--search');
      this.searchForm = this.serchWrap.querySelector('.user-panel__search-form');

      this.loginWrap = document.querySelector('.user-panel__item--login');
      this.loginBtn = this.loginWrap.querySelector('.user-panel__button--user');
      this.loginFormWrap = this.loginWrap.querySelector('.user-panel__login-form-wrap');

      this.serchFormActiveClass = 'user-panel__search-form--active';
      this.loginFormActiveClass = 'user-panel__login-form-wrap--active';

      this.switchesBrns = this.loginWrap.querySelectorAll('.user-panel__login-switches-btn');
      //  events
      this._toggleInput(this.searchBtn, this.searchForm, this.serchFormActiveClass, this.loginFormWrap, this.loginFormActiveClass);
      this._toggleInput(this.loginBtn, this.loginFormWrap, this.loginFormActiveClass, this.searchForm, this.serchFormActiveClass);

      this._scrollCloseInput();

      this._switchesBtnsEvents();
   }

   _createClass(SearchLoginForms, [{
      key: '_toggleInput',
      value: function _toggleInput(btn, form, activeClass, mustBeClose, mustBeCloseActiveClass) {
         btn.addEventListener('click', function (e) {
            if (e.target === e.currentTarget || e.target.parentElement === e.currentTarget) {
               form.classList.toggle(activeClass);

               if (mustBeClose.classList.contains(mustBeCloseActiveClass)) {
                  mustBeClose.classList.remove(mustBeCloseActiveClass);
               }
            }
         });
      }
   }, {
      key: '_scrollCloseInput',
      value: function _scrollCloseInput() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            if (_this.searchForm.classList.contains(_this.serchFormActiveClass)) {
               _this.searchForm.classList.remove(_this.serchFormActiveClass);
            };

            if (_this.loginFormWrap.classList.contains(_this.loginFormActiveClass)) {
               _this.loginFormWrap.classList.remove(_this.loginFormActiveClass);
            };
         });
      }
   }, {
      key: '_switchesBtnsEvents',
      value: function _switchesBtnsEvents() {
         var signInBtn = this.switchesBrns[0],
             registerBtn = this.switchesBrns[1],
             confirmPasswordInput = this.loginFormWrap.querySelector('.user-panel__login-input--confirm-password');

         registerBtn.addEventListener('click', function (e) {
            if (e.currentTarget.classList.contains('user-panel__login-switches-btn--nonactive')) {
               e.currentTarget.classList.remove('user-panel__login-switches-btn--nonactive');
               signInBtn.classList.add('user-panel__login-switches-btn--nonactive');

               confirmPasswordInput.setAttribute('required', '');
               confirmPasswordInput.style.display = 'block';
            }
         });

         signInBtn.addEventListener('click', function (e) {
            if (e.currentTarget.classList.contains('user-panel__login-switches-btn--nonactive')) {
               e.currentTarget.classList.remove('user-panel__login-switches-btn--nonactive');
               registerBtn.classList.add('user-panel__login-switches-btn--nonactive');

               confirmPasswordInput.removeAttribute('required');
               confirmPasswordInput.style.display = 'none';
               confirmPasswordInput.value = '';
            }
         });
      }
   }]);

   return SearchLoginForms;
}();

exports.default = SearchLoginForms;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AddProductItems = function () {
    function AddProductItems() {
        _classCallCheck(this, AddProductItems);

        // DOM
        this.mainItem = document.querySelector('.product__item-clone').children[0];
        this.parrent = document.querySelector('.feauture-product');
        this.btn = document.querySelector('.load-more-btn');

        // vars 
        this.firstLoadedItemsQty = 8;
        this.pressBtnLoadedItemsQty = 4;

        //  events
        this._firstLoadAddItems();
        this._pressBtnAddItems();
    }

    _createClass(AddProductItems, [{
        key: '_firstLoadAddItems',
        value: function _firstLoadAddItems() {
            var _this = this;

            var xhr = new XMLHttpRequest();

            xhr.open('GET', 'https://soloviovmax.github.io/mstore/db.json');

            xhr.responseType = "json";

            xhr.addEventListener('load', function () {
                var data = xhr.response;
                var totalQtyItems = data.length - 1;
                var qtyItems = _this.firstLoadedItemsQty;

                _this._addItems(totalQtyItems, qtyItems, data);
            });
            xhr.send();
        }
    }, {
        key: '_pressBtnAddItems',
        value: function _pressBtnAddItems() {
            var _this2 = this;

            this.nowAdded = this.firstLoadedItemsQty;

            this.btn.addEventListener('click', function () {
                var xhr = new XMLHttpRequest();

                xhr.open('GET', 'https://soloviovmax.github.io/mstore/db.json');

                xhr.responseType = "json";

                xhr.addEventListener('load', function () {
                    var data = xhr.response;
                    var totalQtyItems = data.length - 1 - _this2.nowAdded;
                    var qtyItems = _this2.pressBtnLoadedItemsQty;
                    _this2._addItems(totalQtyItems, qtyItems, data);

                    _this2.nowAdded += _this2.pressBtnLoadedItemsQty;
                });
                xhr.send();
            });
        }
    }, {
        key: '_addItems',
        value: function _addItems(totalQty, addQty, data) {

            for (var i = totalQty; i > totalQty - addQty; i--) {
                if (i === 0) {
                    this.btn.style.display = 'none';
                }
                var currentItem = this.mainItem.cloneNode(true);

                var img = currentItem.querySelector('.product__img'),
                    title = currentItem.querySelector('.product__title-link'),
                    price = currentItem.querySelector('.product__price'),
                    basketBtn = currentItem.querySelector('.product__details-button--basket'),
                    zoomBtn = currentItem.querySelector('.product__details-button--zoom');

                var dataItem = data[i];

                for (var key in dataItem) {
                    if (key === 'src') {
                        img.setAttribute('src', 'img/' + dataItem[key]);
                        zoomBtn.dataset.src = 'img/' + 'big-' + dataItem[key];
                    } else if (key === 'title') {
                        title.textContent = dataItem[key];
                        img.setAttribute('alt', dataItem[key]);
                    } else if (key === 'price') {
                        price.textContent = '$' + dataItem[key];
                        basketBtn.dataset.price = dataItem[key];
                    } else if (key === 'id') {
                        currentItem.dataset.id = dataItem[key];
                    } else if (key === 'oldPrice') {
                        var oldPriceSpan = document.createElement('span');
                        oldPriceSpan.textContent = '$' + dataItem[key];
                        oldPriceSpan.classList.add('product__old-price');
                        var descrWrap = currentItem.querySelector('.product-descr');
                        descrWrap.insertBefore(oldPriceSpan, descrWrap.children[2]);
                    } else if (key === 'label') {
                        currentItem.classList.add('product__item--label-' + dataItem[key]);
                    }
                }
                this.parrent.appendChild(currentItem);
            }
        }
    }]);

    return AddProductItems;
}();

exports.default = AddProductItems;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BurgerMenu = function () {
   function BurgerMenu() {
      _classCallCheck(this, BurgerMenu);

      // DOM
      this.btn = document.querySelector('.burger-btn');
      this.navList = document.querySelector('.fixed-nav .header-nav__list');
      this.navItem = document.querySelectorAll('.fixed-nav .header-nav__item');
      this.header = document.querySelector('.header');
      this.maincontent = document.querySelector('.maincontent');
      this.footer = document.querySelector('.footer');

      //  events
      this._events();
   }

   _createClass(BurgerMenu, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         this.btn.addEventListener('click', function () {
            _this.navList.classList.add('header-nav__list--burger-active');

            var timeout = 50;

            var _loop = function _loop(i) {

               setTimeout(function () {
                  _this.navItem[i].classList.add('header-nav__item--burger-active');
               }, timeout);

               timeout += 50;
            };

            for (var i = 0; i < _this.navItem.length; i++) {
               _loop(i);
            };

            document.body.classList.add('overflow-hidden');
            _this.header.classList.add('blur');
            _this.maincontent.classList.add('blur');
            _this.footer.classList.add('blur');
         });

         this.navList.addEventListener('click', function (e) {
            if (e.target === e.currentTarget) {
               _this.navList.classList.remove('header-nav__list--burger-active');

               for (var i = 0; i < _this.navItem.length; i++) {
                  _this.navItem[i].classList.remove('header-nav__item--burger-active');
               };

               document.body.classList.remove('overflow-hidden');
               _this.header.classList.remove('blur');
               _this.maincontent.classList.remove('blur');
               _this.footer.classList.remove('blur');
            }
         });
      }
   }]);

   return BurgerMenu;
}();

exports.default = BurgerMenu;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9idXJnZXItbWVudS5qcyJdLCJuYW1lcyI6WyJCdXJnZXJNZW51IiwiYnRuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmF2TGlzdCIsIm5hdkl0ZW0iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaGVhZGVyIiwibWFpbmNvbnRlbnQiLCJmb290ZXIiLCJfZXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsInRpbWVvdXQiLCJpIiwic2V0VGltZW91dCIsImxlbmd0aCIsImJvZHkiLCJlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsVTtBQUNsQix5QkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsR0FBTCxHQUFXQyxTQUFTQyxhQUFULENBQXVCLGFBQXZCLENBQVg7QUFDQSxXQUFLQyxPQUFMLEdBQWVGLFNBQVNDLGFBQVQsQ0FBdUIsOEJBQXZCLENBQWY7QUFDQSxXQUFLRSxPQUFMLEdBQWVILFNBQVNJLGdCQUFULENBQTBCLDhCQUExQixDQUFmO0FBQ0EsV0FBS0MsTUFBTCxHQUFjTCxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQWQ7QUFDQSxXQUFLSyxXQUFMLEdBQW1CTixTQUFTQyxhQUFULENBQXVCLGNBQXZCLENBQW5CO0FBQ0EsV0FBS00sTUFBTCxHQUFjUCxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQWQ7O0FBRUE7QUFDQSxXQUFLTyxPQUFMO0FBQ0Y7Ozs7Z0NBRVM7QUFBQTs7QUFDUCxjQUFLVCxHQUFMLENBQVNVLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DLFlBQU07QUFDdEMsa0JBQUtQLE9BQUwsQ0FBYVEsU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsaUNBQTNCOztBQUVBLGdCQUFJQyxVQUFVLEVBQWQ7O0FBSHNDLHVDQUk3QkMsQ0FKNkI7O0FBTW5DQywwQkFBVyxZQUFNO0FBQ2Qsd0JBQUtYLE9BQUwsQ0FBYVUsQ0FBYixFQUFnQkgsU0FBaEIsQ0FBMEJDLEdBQTFCLENBQThCLGlDQUE5QjtBQUNGLGdCQUZELEVBRUdDLE9BRkg7O0FBSUFBLDBCQUFXLEVBQVg7QUFWbUM7O0FBSXRDLGlCQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSSxNQUFLVixPQUFMLENBQWFZLE1BQWpDLEVBQXlDRixHQUF6QyxFQUE4QztBQUFBLHFCQUFyQ0EsQ0FBcUM7QUFPN0M7O0FBRURiLHFCQUFTZ0IsSUFBVCxDQUFjTixTQUFkLENBQXdCQyxHQUF4QixDQUE0QixpQkFBNUI7QUFDQSxrQkFBS04sTUFBTCxDQUFZSyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNBLGtCQUFLTCxXQUFMLENBQWlCSSxTQUFqQixDQUEyQkMsR0FBM0IsQ0FBK0IsTUFBL0I7QUFDQSxrQkFBS0osTUFBTCxDQUFZRyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNGLFVBakJEOztBQW1CQSxjQUFLVCxPQUFMLENBQWFPLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLGFBQUs7QUFDekMsZ0JBQUlRLEVBQUVDLE1BQUYsS0FBYUQsRUFBRUUsYUFBbkIsRUFBa0M7QUFDL0IscUJBQUtqQixPQUFMLENBQWFRLFNBQWIsQ0FBdUJVLE1BQXZCLENBQThCLGlDQUE5Qjs7QUFFQSxvQkFBSyxJQUFJUCxJQUFJLENBQWIsRUFBZ0JBLElBQUksTUFBS1YsT0FBTCxDQUFhWSxNQUFqQyxFQUF5Q0YsR0FBekMsRUFBOEM7QUFDM0Msd0JBQUtWLE9BQUwsQ0FBYVUsQ0FBYixFQUFnQkgsU0FBaEIsQ0FBMEJVLE1BQTFCLENBQWlDLGlDQUFqQztBQUNGOztBQUVEcEIsd0JBQVNnQixJQUFULENBQWNOLFNBQWQsQ0FBd0JVLE1BQXhCLENBQStCLGlCQUEvQjtBQUNBLHFCQUFLZixNQUFMLENBQVlLLFNBQVosQ0FBc0JVLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0EscUJBQUtkLFdBQUwsQ0FBaUJJLFNBQWpCLENBQTJCVSxNQUEzQixDQUFrQyxNQUFsQztBQUNBLHFCQUFLYixNQUFMLENBQVlHLFNBQVosQ0FBc0JVLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0Y7QUFDSCxVQWJEO0FBY0Y7Ozs7OztrQkFoRGlCdEIsVTtBQWlEcEIiLCJmaWxlIjoiX2J1cmdlci1tZW51LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVyZ2VyTWVudSB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5idG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnVyZ2VyLWJ0bicpO1xyXG4gICAgICB0aGlzLm5hdkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2IC5oZWFkZXItbmF2X19saXN0Jyk7XHJcbiAgICAgIHRoaXMubmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maXhlZC1uYXYgLmhlYWRlci1uYXZfX2l0ZW0nKTtcclxuICAgICAgdGhpcy5oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XHJcbiAgICAgIHRoaXMubWFpbmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbmNvbnRlbnQnKTtcclxuICAgICAgdGhpcy5mb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9vdGVyJyk7XHJcblxyXG4gICAgICAvLyAgZXZlbnRzXHJcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xyXG4gICB9XHJcblxyXG4gICBfZXZlbnRzKCkge1xyXG4gICAgICB0aGlzLmJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgdGhpcy5uYXZMaXN0LmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1uYXZfX2xpc3QtLWJ1cmdlci1hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgIGxldCB0aW1lb3V0ID0gNTA7XHJcbiAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uYXZJdGVtLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgdGhpcy5uYXZJdGVtW2ldLmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1uYXZfX2l0ZW0tLWJ1cmdlci1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfSwgdGltZW91dCk7XHJcblxyXG4gICAgICAgICAgICB0aW1lb3V0ICs9IDUwO1xyXG4gICAgICAgICB9O1xyXG5cclxuICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdvdmVyZmxvdy1oaWRkZW4nKTtcclxuICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnYmx1cicpO1xyXG4gICAgICAgICB0aGlzLm1haW5jb250ZW50LmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcclxuICAgICAgICAgdGhpcy5mb290ZXIuY2xhc3NMaXN0LmFkZCgnYmx1cicpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMubmF2TGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgICAgICB0aGlzLm5hdkxpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaGVhZGVyLW5hdl9fbGlzdC0tYnVyZ2VyLWFjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5hdkl0ZW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgdGhpcy5uYXZJdGVtW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1uYXZfX2l0ZW0tLWJ1cmdlci1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmZsb3ctaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdibHVyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgfVxyXG59OyJdfQ==
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FixedHeader = function () {
   function FixedHeader() {
      _classCallCheck(this, FixedHeader);

      // DOM
      this.header = document.querySelector('.bottom-header');

      // Additional Vars
      this.offset = 1000;

      //  events
      this._events();
   }

   _createClass(FixedHeader, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            if (window.pageYOffset > _this.offset) {
               _this.header.style.transform = 'translateY(0)';
               _this.header.classList.add('bottom-header--fixed');
            } else if (window.pageYOffset > _this.offset / 3 * 2) {
               _this.header.style.transform = 'translateY(-100%)';
            } else {
               _this.header.classList.remove('bottom-header--fixed');
               _this.header.style.transform = 'translateY(0)';
            }
         });
      }
   }]);

   return FixedHeader;
}();

exports.default = FixedHeader;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9maXhlZC1oZWFkZXIuanMiXSwibmFtZXMiOlsiRml4ZWRIZWFkZXIiLCJoZWFkZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJvZmZzZXQiLCJfZXZlbnRzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhZ2VZT2Zmc2V0Iiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFc7QUFDbEIsMEJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLE1BQUwsR0FBY0MsU0FBU0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBZDs7QUFFQTtBQUNBLFdBQUtDLE1BQUwsR0FBYyxJQUFkOztBQUVBO0FBQ0EsV0FBS0MsT0FBTDtBQUNGOzs7O2dDQUVTO0FBQUE7O0FBQ1BDLGdCQUFPQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxhQUFLO0FBQ3BDLGdCQUFJRCxPQUFPRSxXQUFQLEdBQXFCLE1BQUtKLE1BQTlCLEVBQXNDO0FBQ25DLHFCQUFLSCxNQUFMLENBQVlRLEtBQVosQ0FBa0JDLFNBQWxCLEdBQThCLGVBQTlCO0FBQ0EscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkMsR0FBdEIsQ0FBMEIsc0JBQTFCO0FBQ0YsYUFIRCxNQUdPLElBQUlOLE9BQU9FLFdBQVAsR0FBc0IsTUFBS0osTUFBTCxHQUFjLENBQWYsR0FBb0IsQ0FBN0MsRUFBZ0Q7QUFDcEQscUJBQUtILE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsbUJBQTlCO0FBQ0YsYUFGTSxNQUVBO0FBQ0oscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkUsTUFBdEIsQ0FBNkIsc0JBQTdCO0FBQ0EscUJBQUtaLE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsZUFBOUI7QUFDRjtBQUNILFVBVkQ7QUFXRjs7Ozs7O2tCQXhCaUJWLFc7QUF5QnBCIiwiZmlsZSI6Il9maXhlZC1oZWFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGaXhlZEhlYWRlciB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm90dG9tLWhlYWRlcicpO1xyXG5cclxuICAgICAgLy8gQWRkaXRpb25hbCBWYXJzXHJcbiAgICAgIHRoaXMub2Zmc2V0ID0gMTAwMDtcclxuXHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fZXZlbnRzKCk7XHJcbiAgIH1cclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHtcclxuICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiAodGhpcy5vZmZzZXQgLyAzKSAqIDIpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTEwMCUpJztcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcbn07Il19
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProductItemsEvents = function () {
    function ProductItemsEvents() {
        _classCallCheck(this, ProductItemsEvents);

        // DOM
        this.itemsWrap = document.querySelector('.feauture-product');
        this.basketTotalPrice = document.querySelector('.user-panel__button-total-price');
        this.basketQty = document.querySelector('.user-panel__button-qty--basket');
        this.heartsQty = document.querySelector('.user-panel__button-qty--heart');
        this.imageZoomBtn = document.querySelector('.product__details-button--zoom');
        this.imgZoomWindow = document.querySelector('.img-zoom-window__img');

        // Additional Vars
        this.totalPrice = 0;
        this.totalQty = 0;
        this.totalLikes = 0;

        //  events
        this._events();
        this._loadBasketFromLocalStorege();
    }

    _createClass(ProductItemsEvents, [{
        key: '_events',
        value: function _events() {
            var _this = this;

            this.itemsWrap.addEventListener('click', function (e) {
                _this._addToBasket(e);
                _this._like(e);
                _this._openImgZoomWindow(e);
                _this._stars(e);
            });

            this._closeImgZoomWindow();
        }
    }, {
        key: '_addToBasket',
        value: function _addToBasket(e) {
            if (e.target.parentElement.dataset.price || e.target.dataset.price) {

                var targetBasket = null;
                if (e.target.tagName === 'I') {
                    targetBasket = e.target.parentElement;
                } else {
                    targetBasket = e.target;
                }

                var putInBasketArrow = document.createElement('i');

                putInBasketArrow.classList.add('fa');
                putInBasketArrow.classList.add('fa-arrow-down');
                putInBasketArrow.setAttribute('aria-hidden', 'true');

                targetBasket.appendChild(putInBasketArrow);

                setTimeout(function () {
                    targetBasket.removeChild(targetBasket.children[1]);
                }, 200);

                var itemPrice = targetBasket.dataset.price;
                this.totalPrice += +itemPrice;
                this.totalQty++;

                this.basketTotalPrice.textContent = '$' + this.totalPrice;
                this.basketQty.textContent = this.totalQty;

                localStorage.setItem('basketTotalPrice', this.totalPrice);
                localStorage.setItem('basketQty', this.totalQty);
            };
        }
    }, {
        key: '_loadBasketFromLocalStorege',
        value: function _loadBasketFromLocalStorege() {
            if (localStorage.getItem('basketTotalPrice')) {
                this.totalPrice = +localStorage.getItem('basketTotalPrice');
                this.basketTotalPrice.textContent = '$' + this.totalPrice;
            }

            if (localStorage.getItem('basketQty')) {
                this.totalQty = +localStorage.getItem('basketQty');
                this.basketQty.textContent = this.totalQty;
            }
        }
    }, {
        key: '_like',
        value: function _like(e) {
            if (e.target.parentElement.classList.contains('product__details-button--heart') || e.target.classList.contains('product__details-button--heart')) {

                var targetHeart = null;
                if (e.target.tagName === 'I') {
                    targetHeart = e.target.parentElement;
                } else {
                    targetHeart = e.target;
                }

                if (targetHeart.classList.contains('product__details-button--heart-active')) {
                    targetHeart.classList.remove('product__details-button--heart-active');
                    this.totalLikes--;
                    this.heartsQty.textContent = this.totalLikes;
                } else {
                    targetHeart.classList.add('product__details-button--heart-active');
                    this.totalLikes++;
                    this.heartsQty.textContent = this.totalLikes;
                }
            };
        }
    }, {
        key: '_openImgZoomWindow',
        value: function _openImgZoomWindow(e) {
            if (e.target.parentElement.classList.contains('product__details-button--zoom') || e.target.classList.contains('product__details-button--zoom')) {

                var targetZoomBtn = null;
                if (e.target.tagName === 'I') {
                    targetZoomBtn = e.target.parentElement;
                } else {
                    targetZoomBtn = e.target;
                }

                var imgSrc = targetZoomBtn.dataset.src;

                this.imgZoomWindow.setAttribute('src', imgSrc);
                this.imgZoomWindow.parentElement.classList.add('img-zoom-window--active');
                document.body.classList.add('overflow-hidden');
            }
        }
    }, {
        key: '_closeImgZoomWindow',
        value: function _closeImgZoomWindow(e) {
            this.imgZoomWindow.parentElement.addEventListener('click', function (e) {
                if (e.target) {
                    e.currentTarget.classList.remove('img-zoom-window--active');
                    document.body.classList.remove('overflow-hidden');
                }
            });
        }
    }, {
        key: '_stars',
        value: function _stars(e) {
            if (e.target.parentElement.classList.contains('product__rating-button') || e.target.classList.contains('product__rating-button')) {

                var targetStar = null;
                if (e.target.tagName === 'I') {
                    targetStar = e.target.parentElement;
                } else {
                    targetStar = e.target;
                }

                targetStar.classList.add('product__rating-button--active');

                if (targetStar.previousElementSibling && targetStar.previousElementSibling.classList.contains('product__rating-button--active')) {
                    this._removeClassForPreviousStars(targetStar, 'product__rating-button--active');
                };

                this._addClassForNextStars(targetStar, 'product__rating-button--active');
            }
        }
    }, {
        key: '_addClassForNextStars',
        value: function _addClassForNextStars(elem, activeClass) {
            while (elem = elem.nextElementSibling) {
                elem.classList.add(activeClass);
            };
        }
    }, {
        key: '_removeClassForPreviousStars',
        value: function _removeClassForPreviousStars(elem, activeClass) {
            do {
                elem = elem.previousElementSibling;
                elem.classList.remove(activeClass);
            } while (elem.previousElementSibling && elem.previousElementSibling.classList.contains(activeClass));
        }
    }]);

    return ProductItemsEvents;
}();

exports.default = ProductItemsEvents;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Subscribe = function () {
    function Subscribe() {
        _classCallCheck(this, Subscribe);

        // DOM
        this.subscribeForm = document.querySelector('.subscribe__form');
        this.subscribeBtn = this.subscribeForm.querySelector('.subscribe__form-btn');

        //  Event
        this._subscribeFrormSubmit();
        this._btnTargetAnimation();
    }

    _createClass(Subscribe, [{
        key: '_subscribeFrormSubmit',
        value: function _subscribeFrormSubmit() {
            var _this = this;

            this.subscribeForm.addEventListener('submit', function (e) {
                e.preventDefault();

                var preloaderIcon = _this.subscribeForm.querySelector('.subscribe__form-btn--preloader'),
                    sentIcon = _this.subscribeForm.querySelector('.subscribe__form-btn--sent');

                preloaderIcon.style.display = 'flex';

                var formData = {
                    email: e.target.email.value
                };

                var options = {
                    method: 'POST',
                    body: JSON.stringify(formData)
                };

                fetch('https://maxs-4ebe4.firebaseio.com/clients.json', options).then(function (response) {
                    if (response.status === 200) {
                        preloaderIcon.style.display = 'none';
                        sentIcon.style.display = 'flex';

                        setTimeout(function () {
                            sentIcon.style.display = 'none';
                        }, 2000);

                        e.target.email.value = '';
                    }
                });
            });
        }
    }, {
        key: '_btnTargetAnimation',
        value: function _btnTargetAnimation() {
            var _this2 = this;

            this.subscribeBtn.addEventListener('click', function (e) {
                var posX = e.offsetX + 'px',
                    posY = e.offsetY + 'px';

                var targetAnimation = document.createElement('div');
                targetAnimation.classList.add('button-bubble__form-btn-terget-animation');
                targetAnimation.style.left = posX;
                targetAnimation.style.top = posY;
                _this2.subscribeBtn.appendChild(targetAnimation);

                setTimeout(function () {
                    var delEl = _this2.subscribeBtn.children[0];
                    _this2.subscribeBtn.removeChild(delEl);
                }, 400);
            });
        }
    }]);

    return Subscribe;
}();

exports.default = Subscribe;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdWJzY3JpYmUuanMiXSwibmFtZXMiOlsiU3Vic2NyaWJlIiwic3Vic2NyaWJlRm9ybSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN1YnNjcmliZUJ0biIsIl9zdWJzY3JpYmVGcm9ybVN1Ym1pdCIsIl9idG5UYXJnZXRBbmltYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwicHJlbG9hZGVySWNvbiIsInNlbnRJY29uIiwic3R5bGUiLCJkaXNwbGF5IiwiZm9ybURhdGEiLCJlbWFpbCIsInRhcmdldCIsInZhbHVlIiwib3B0aW9ucyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzZXRUaW1lb3V0IiwicG9zWCIsIm9mZnNldFgiLCJwb3NZIiwib2Zmc2V0WSIsInRhcmdldEFuaW1hdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJsZWZ0IiwidG9wIiwiYXBwZW5kQ2hpbGQiLCJkZWxFbCIsImNoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFM7QUFDakIseUJBQWM7QUFBQTs7QUFDVjtBQUNBLGFBQUtDLGFBQUwsR0FBcUJDLFNBQVNDLGFBQVQsQ0FBdUIsa0JBQXZCLENBQXJCO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQixLQUFLSCxhQUFMLENBQW1CRSxhQUFuQixDQUFpQyxzQkFBakMsQ0FBcEI7O0FBRUE7QUFDQSxhQUFLRSxxQkFBTDtBQUNBLGFBQUtDLG1CQUFMO0FBQ0g7Ozs7Z0RBRXVCO0FBQUE7O0FBQ3BCLGlCQUFLTCxhQUFMLENBQW1CTSxnQkFBbkIsQ0FBb0MsUUFBcEMsRUFBOEMsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2pEQSxrQkFBRUMsY0FBRjs7QUFFSixvQkFBSUMsZ0JBQWdCLE1BQUtULGFBQUwsQ0FBbUJFLGFBQW5CLENBQWlDLGlDQUFqQyxDQUFwQjtBQUFBLG9CQUNJUSxXQUFXLE1BQUtWLGFBQUwsQ0FBbUJFLGFBQW5CLENBQWlDLDRCQUFqQyxDQURmOztBQUdBTyw4QkFBY0UsS0FBZCxDQUFvQkMsT0FBcEIsR0FBOEIsTUFBOUI7O0FBRUEsb0JBQUlDLFdBQVc7QUFDWEMsMkJBQU9QLEVBQUVRLE1BQUYsQ0FBU0QsS0FBVCxDQUFlRTtBQURYLGlCQUFmOztBQUlBLG9CQUFJQyxVQUFVO0FBQ1ZDLDRCQUFRLE1BREU7QUFFVkMsMEJBQU1DLEtBQUtDLFNBQUwsQ0FBZVIsUUFBZjtBQUZJLGlCQUFkOztBQUtBUyxzQkFBTSxnREFBTixFQUF3REwsT0FBeEQsRUFDS00sSUFETCxDQUNVLFVBQVVDLFFBQVYsRUFBb0I7QUFDdEIsd0JBQUlBLFNBQVNDLE1BQVQsS0FBb0IsR0FBeEIsRUFBNkI7QUFDekJoQixzQ0FBY0UsS0FBZCxDQUFvQkMsT0FBcEIsR0FBOEIsTUFBOUI7QUFDQUYsaUNBQVNDLEtBQVQsQ0FBZUMsT0FBZixHQUF5QixNQUF6Qjs7QUFFQWMsbUNBQVcsWUFBTTtBQUNiaEIscUNBQVNDLEtBQVQsQ0FBZUMsT0FBZixHQUF5QixNQUF6QjtBQUNILHlCQUZELEVBRUcsSUFGSDs7QUFJQUwsMEJBQUVRLE1BQUYsQ0FBU0QsS0FBVCxDQUFlRSxLQUFmLEdBQXVCLEVBQXZCO0FBQ0g7QUFDSixpQkFaTDtBQWFDLGFBOUJEO0FBK0JIOzs7OENBRXFCO0FBQUE7O0FBQ2xCLGlCQUFLYixZQUFMLENBQWtCRyxnQkFBbEIsQ0FBbUMsT0FBbkMsRUFBNEMsYUFBSztBQUM3QyxvQkFBSXFCLE9BQU9wQixFQUFFcUIsT0FBRixHQUFZLElBQXZCO0FBQUEsb0JBQ0lDLE9BQU90QixFQUFFdUIsT0FBRixHQUFZLElBRHZCOztBQUdBLG9CQUFJQyxrQkFBa0I5QixTQUFTK0IsYUFBVCxDQUF1QixLQUF2QixDQUF0QjtBQUNBRCxnQ0FBZ0JFLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QiwwQ0FBOUI7QUFDQUgsZ0NBQWdCcEIsS0FBaEIsQ0FBc0J3QixJQUF0QixHQUE2QlIsSUFBN0I7QUFDQUksZ0NBQWdCcEIsS0FBaEIsQ0FBc0J5QixHQUF0QixHQUE0QlAsSUFBNUI7QUFDQSx1QkFBSzFCLFlBQUwsQ0FBa0JrQyxXQUFsQixDQUE4Qk4sZUFBOUI7O0FBRUFMLDJCQUFXLFlBQU07QUFDYix3QkFBSVksUUFBUSxPQUFLbkMsWUFBTCxDQUFrQm9DLFFBQWxCLENBQTJCLENBQTNCLENBQVo7QUFDQSwyQkFBS3BDLFlBQUwsQ0FBa0JxQyxXQUFsQixDQUE4QkYsS0FBOUI7QUFDSCxpQkFIRCxFQUdHLEdBSEg7QUFJSCxhQWREO0FBZUg7Ozs7OztrQkE3RGdCdkMsUztBQThEcEIiLCJmaWxlIjoiX3N1YnNjcmliZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1YnNjcmliZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBET01cclxuICAgICAgICB0aGlzLnN1YnNjcmliZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtJyk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4gPSB0aGlzLnN1YnNjcmliZUZvcm0ucXVlcnlTZWxlY3RvcignLnN1YnNjcmliZV9fZm9ybS1idG4nKTtcclxuXHJcbiAgICAgICAgLy8gIEV2ZW50XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlRnJvcm1TdWJtaXQoKTtcclxuICAgICAgICB0aGlzLl9idG5UYXJnZXRBbmltYXRpb24oKTtcclxuICAgIH07XHJcblxyXG4gICAgX3N1YnNjcmliZUZyb3JtU3VibWl0KCkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHByZWxvYWRlckljb24gPSB0aGlzLnN1YnNjcmliZUZvcm0ucXVlcnlTZWxlY3RvcignLnN1YnNjcmliZV9fZm9ybS1idG4tLXByZWxvYWRlcicpLFxyXG4gICAgICAgICAgICBzZW50SWNvbiA9IHRoaXMuc3Vic2NyaWJlRm9ybS5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtLWJ0bi0tc2VudCcpO1xyXG5cclxuICAgICAgICBwcmVsb2FkZXJJY29uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblxyXG4gICAgICAgIGxldCBmb3JtRGF0YSA9IHtcclxuICAgICAgICAgICAgZW1haWw6IGUudGFyZ2V0LmVtYWlsLnZhbHVlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZldGNoKCdodHRwczovL21heHMtNGViZTQuZmlyZWJhc2Vpby5jb20vY2xpZW50cy5qc29uJywgb3B0aW9ucylcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkZXJJY29uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuZW1haWwudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9idG5UYXJnZXRBbmltYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgbGV0IHBvc1ggPSBlLm9mZnNldFggKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgcG9zWSA9IGUub2Zmc2V0WSArICdweCc7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0QW5pbWF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5jbGFzc0xpc3QuYWRkKCdidXR0b24tYnViYmxlX19mb3JtLWJ0bi10ZXJnZXQtYW5pbWF0aW9uJyk7XHJcbiAgICAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5zdHlsZS5sZWZ0ID0gcG9zWDtcclxuICAgICAgICAgICAgdGFyZ2V0QW5pbWF0aW9uLnN0eWxlLnRvcCA9IHBvc1k7XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlQnRuLmFwcGVuZENoaWxkKHRhcmdldEFuaW1hdGlvbik7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBkZWxFbCA9IHRoaXMuc3Vic2NyaWJlQnRuLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4ucmVtb3ZlQ2hpbGQoZGVsRWwpO1xyXG4gICAgICAgICAgICB9LCA0MDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufTsiXX0=
},{}],7:[function(require,module,exports){
'use strict';

var _addProductItems = require('./_add-product-items');

var _addProductItems2 = _interopRequireDefault(_addProductItems);

var _burgerMenu = require('./_burger-menu');

var _burgerMenu2 = _interopRequireDefault(_burgerMenu);

var _fixedHeader = require('./_fixed-header');

var _fixedHeader2 = _interopRequireDefault(_fixedHeader);

var _SearchLoginForms = require('./_Search-login-forms');

var _SearchLoginForms2 = _interopRequireDefault(_SearchLoginForms);

var _productItemsEvents = require('./_product-items-events');

var _productItemsEvents2 = _interopRequireDefault(_productItemsEvents);

var _subscribe = require('./_subscribe');

var _subscribe2 = _interopRequireDefault(_subscribe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('DOMContentLoaded', init);

function init() {

    // Clone navigation
    function cloneNav() {
        var nav = document.querySelector('.header-nav__list').cloneNode(true);
        var cloneNavParrent = document.querySelector('.fixed-nav');

        cloneNavParrent.insertBefore(nav, cloneNavParrent[0]);
    };
    cloneNav();

    // Set margin top for top section
    function setMargin() {
        var header = document.querySelector('.header'),
            topSection = document.querySelector('.top-section');

        topSection.style.marginTop = header.offsetHeight + 'px';
    };
    setMargin();

    /* // Google Map
    function initMap() {
        let yuzhnyBriz = {lat: 46.96339, lng: 31.987823};
        let map = new google.maps.Map(document.getElementById('map'), {
          zoom: 17,
          center: yuzhnyBriz
        });
        let marker = new google.maps.Marker({
          position: yuzhnyBriz,
          map: map,
          title: 'Южный бриз'
        });
    }; */

    var addProductItems = new _addProductItems2.default();
    var burgerMenu = new _burgerMenu2.default();
    var fixedHeader = new _fixedHeader2.default();
    var searchLoginForms = new _SearchLoginForms2.default();
    var productItemsEvents = new _productItemsEvents2.default();
    var subscribe = new _subscribe2.default();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfYjE2ZmM5YmMuanMiXSwibmFtZXMiOlsid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXQiLCJjbG9uZU5hdiIsIm5hdiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lTm9kZSIsImNsb25lTmF2UGFycmVudCIsImluc2VydEJlZm9yZSIsInNldE1hcmdpbiIsImhlYWRlciIsInRvcFNlY3Rpb24iLCJzdHlsZSIsIm1hcmdpblRvcCIsIm9mZnNldEhlaWdodCIsImFkZFByb2R1Y3RJdGVtcyIsImJ1cmdlck1lbnUiLCJmaXhlZEhlYWRlciIsInNlYXJjaExvZ2luRm9ybXMiLCJwcm9kdWN0SXRlbXNFdmVudHMiLCJzdWJzY3JpYmUiXSwibWFwcGluZ3MiOiI7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFQQUEsT0FBT0MsZ0JBQVAsQ0FBd0Isa0JBQXhCLEVBQTRDQyxJQUE1Qzs7QUFTQSxTQUFTQSxJQUFULEdBQWdCOztBQUVaO0FBQ0EsYUFBU0MsUUFBVCxHQUFvQjtBQUNoQixZQUFJQyxNQUFNQyxTQUFTQyxhQUFULENBQXVCLG1CQUF2QixFQUE0Q0MsU0FBNUMsQ0FBc0QsSUFBdEQsQ0FBVjtBQUNBLFlBQUlDLGtCQUFrQkgsU0FBU0MsYUFBVCxDQUF1QixZQUF2QixDQUF0Qjs7QUFFQUUsd0JBQWdCQyxZQUFoQixDQUE2QkwsR0FBN0IsRUFBa0NJLGdCQUFnQixDQUFoQixDQUFsQztBQUNIO0FBQ0RMOztBQUVBO0FBQ0EsYUFBU08sU0FBVCxHQUFxQjtBQUNqQixZQUFJQyxTQUFTTixTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQWI7QUFBQSxZQUNJTSxhQUFhUCxTQUFTQyxhQUFULENBQXVCLGNBQXZCLENBRGpCOztBQUdBTSxtQkFBV0MsS0FBWCxDQUFpQkMsU0FBakIsR0FBNkJILE9BQU9JLFlBQVAsR0FBc0IsSUFBbkQ7QUFDSDtBQUNETDs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7QUFjQSxRQUFNTSxrQkFBa0IsK0JBQXhCO0FBQ0EsUUFBTUMsYUFBYSwwQkFBbkI7QUFDQSxRQUFNQyxjQUFjLDJCQUFwQjtBQUNBLFFBQU1DLG1CQUFtQixnQ0FBekI7QUFDQSxRQUFNQyxxQkFBcUIsa0NBQTNCO0FBQ0EsUUFBTUMsWUFBWSx5QkFBbEI7QUFDSCIsImZpbGUiOiJmYWtlX2IxNmZjOWJjLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0KTtcclxuXHJcbmltcG9ydCBBZGRQcm9kdWN0SXRlbXMgZnJvbSAnLi9fYWRkLXByb2R1Y3QtaXRlbXMnO1xyXG5pbXBvcnQgQnVyZ2VyTWVudSBmcm9tICcuL19idXJnZXItbWVudSc7XHJcbmltcG9ydCBGaXhlZEhlYWRlciBmcm9tICcuL19maXhlZC1oZWFkZXInO1xyXG5pbXBvcnQgU2VhcmNoTG9naW5Gb3JtcyBmcm9tICcuL19TZWFyY2gtbG9naW4tZm9ybXMnO1xyXG5pbXBvcnQgUHJvZHVjdEl0ZW1zRXZlbnRzIGZyb20gJy4vX3Byb2R1Y3QtaXRlbXMtZXZlbnRzJztcclxuaW1wb3J0IFN1YnNjcmliZSBmcm9tICcuL19zdWJzY3JpYmUnO1xyXG5cclxuZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgXHJcbiAgICAvLyBDbG9uZSBuYXZpZ2F0aW9uXHJcbiAgICBmdW5jdGlvbiBjbG9uZU5hdigpIHtcclxuICAgICAgICBsZXQgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlci1uYXZfX2xpc3QnKS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgbGV0IGNsb25lTmF2UGFycmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maXhlZC1uYXYnKTtcclxuXHJcbiAgICAgICAgY2xvbmVOYXZQYXJyZW50Lmluc2VydEJlZm9yZShuYXYsIGNsb25lTmF2UGFycmVudFswXSk7XHJcbiAgICB9O1xyXG4gICAgY2xvbmVOYXYoKTtcclxuXHJcbiAgICAvLyBTZXQgbWFyZ2luIHRvcCBmb3IgdG9wIHNlY3Rpb25cclxuICAgIGZ1bmN0aW9uIHNldE1hcmdpbigpIHtcclxuICAgICAgICBsZXQgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpLFxyXG4gICAgICAgICAgICB0b3BTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvcC1zZWN0aW9uJyk7XHJcblxyXG4gICAgICAgIHRvcFNlY3Rpb24uc3R5bGUubWFyZ2luVG9wID0gaGVhZGVyLm9mZnNldEhlaWdodCArICdweCc7XHJcbiAgICB9O1xyXG4gICAgc2V0TWFyZ2luKClcclxuXHJcbiAgICAvKiAvLyBHb29nbGUgTWFwXHJcbiAgICBmdW5jdGlvbiBpbml0TWFwKCkge1xyXG4gICAgICAgIGxldCB5dXpobnlCcml6ID0ge2xhdDogNDYuOTYzMzksIGxuZzogMzEuOTg3ODIzfTtcclxuICAgICAgICBsZXQgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuICAgICAgICAgIHpvb206IDE3LFxyXG4gICAgICAgICAgY2VudGVyOiB5dXpobnlCcml6XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4gICAgICAgICAgcG9zaXRpb246IHl1emhueUJyaXosXHJcbiAgICAgICAgICBtYXA6IG1hcCxcclxuICAgICAgICAgIHRpdGxlOiAn0K7QttC90YvQuSDQsdGA0LjQtydcclxuICAgICAgICB9KTtcclxuICAgIH07ICovXHJcblxyXG4gICAgY29uc3QgYWRkUHJvZHVjdEl0ZW1zID0gbmV3IEFkZFByb2R1Y3RJdGVtcztcclxuICAgIGNvbnN0IGJ1cmdlck1lbnUgPSBuZXcgQnVyZ2VyTWVudTtcclxuICAgIGNvbnN0IGZpeGVkSGVhZGVyID0gbmV3IEZpeGVkSGVhZGVyO1xyXG4gICAgY29uc3Qgc2VhcmNoTG9naW5Gb3JtcyA9IG5ldyBTZWFyY2hMb2dpbkZvcm1zO1xyXG4gICAgY29uc3QgcHJvZHVjdEl0ZW1zRXZlbnRzID0gbmV3IFByb2R1Y3RJdGVtc0V2ZW50cztcclxuICAgIGNvbnN0IHN1YnNjcmliZSA9IG5ldyBTdWJzY3JpYmU7XHJcbn07Il19
},{"./_Search-login-forms":1,"./_add-product-items":2,"./_burger-menu":3,"./_fixed-header":4,"./_product-items-events":5,"./_subscribe":6}]},{},[7])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6XFxfRnJvbnRFbmRcXF9tc3RvcmVcXG5vZGVfbW9kdWxlc1xcYnJvd3Nlci1wYWNrXFxfcHJlbHVkZS5qcyIsIkU6L19Gcm9udEVuZC9fbXN0b3JlL19zcmMvanMvX1NlYXJjaC1sb2dpbi1mb3Jtcy5qcyIsIkU6L19Gcm9udEVuZC9fbXN0b3JlL19zcmMvanMvX2FkZC1wcm9kdWN0LWl0ZW1zLmpzIiwiRTovX0Zyb250RW5kL19tc3RvcmUvX3NyYy9qcy9fYnVyZ2VyLW1lbnUuanMiLCJFOi9fRnJvbnRFbmQvX21zdG9yZS9fc3JjL2pzL19maXhlZC1oZWFkZXIuanMiLCJFOi9fRnJvbnRFbmQvX21zdG9yZS9fc3JjL2pzL19wcm9kdWN0LWl0ZW1zLWV2ZW50cy5qcyIsIkU6L19Gcm9udEVuZC9fbXN0b3JlL19zcmMvanMvX3N1YnNjcmliZS5qcyIsIkU6L19Gcm9udEVuZC9fbXN0b3JlL19zcmMvanMvZmFrZV9iMTZmYzliYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNlYXJjaExvZ2luRm9ybXMgPSBmdW5jdGlvbiAoKSB7XG4gICBmdW5jdGlvbiBTZWFyY2hMb2dpbkZvcm1zKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlYXJjaExvZ2luRm9ybXMpO1xuXG4gICAgICAvLyBET01cbiAgICAgIHRoaXMuc2VyY2hXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItcGFuZWxfX2l0ZW0tLXNlYXJjaCcpO1xuICAgICAgdGhpcy5zZWFyY2hCdG4gPSB0aGlzLnNlcmNoV3JhcC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fYnV0dG9uLS1zZWFyY2gnKTtcbiAgICAgIHRoaXMuc2VhcmNoRm9ybSA9IHRoaXMuc2VyY2hXcmFwLnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19zZWFyY2gtZm9ybScpO1xuXG4gICAgICB0aGlzLmxvZ2luV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19pdGVtLS1sb2dpbicpO1xuICAgICAgdGhpcy5sb2dpbkJ0biA9IHRoaXMubG9naW5XcmFwLnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19idXR0b24tLXVzZXInKTtcbiAgICAgIHRoaXMubG9naW5Gb3JtV3JhcCA9IHRoaXMubG9naW5XcmFwLnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19sb2dpbi1mb3JtLXdyYXAnKTtcblxuICAgICAgdGhpcy5zZXJjaEZvcm1BY3RpdmVDbGFzcyA9ICd1c2VyLXBhbmVsX19zZWFyY2gtZm9ybS0tYWN0aXZlJztcbiAgICAgIHRoaXMubG9naW5Gb3JtQWN0aXZlQ2xhc3MgPSAndXNlci1wYW5lbF9fbG9naW4tZm9ybS13cmFwLS1hY3RpdmUnO1xuXG4gICAgICB0aGlzLnN3aXRjaGVzQnJucyA9IHRoaXMubG9naW5XcmFwLnF1ZXJ5U2VsZWN0b3JBbGwoJy51c2VyLXBhbmVsX19sb2dpbi1zd2l0Y2hlcy1idG4nKTtcbiAgICAgIC8vICBldmVudHNcbiAgICAgIHRoaXMuX3RvZ2dsZUlucHV0KHRoaXMuc2VhcmNoQnRuLCB0aGlzLnNlYXJjaEZvcm0sIHRoaXMuc2VyY2hGb3JtQWN0aXZlQ2xhc3MsIHRoaXMubG9naW5Gb3JtV3JhcCwgdGhpcy5sb2dpbkZvcm1BY3RpdmVDbGFzcyk7XG4gICAgICB0aGlzLl90b2dnbGVJbnB1dCh0aGlzLmxvZ2luQnRuLCB0aGlzLmxvZ2luRm9ybVdyYXAsIHRoaXMubG9naW5Gb3JtQWN0aXZlQ2xhc3MsIHRoaXMuc2VhcmNoRm9ybSwgdGhpcy5zZXJjaEZvcm1BY3RpdmVDbGFzcyk7XG5cbiAgICAgIHRoaXMuX3Njcm9sbENsb3NlSW5wdXQoKTtcblxuICAgICAgdGhpcy5fc3dpdGNoZXNCdG5zRXZlbnRzKCk7XG4gICB9XG5cbiAgIF9jcmVhdGVDbGFzcyhTZWFyY2hMb2dpbkZvcm1zLCBbe1xuICAgICAga2V5OiAnX3RvZ2dsZUlucHV0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlSW5wdXQoYnRuLCBmb3JtLCBhY3RpdmVDbGFzcywgbXVzdEJlQ2xvc2UsIG11c3RCZUNsb3NlQWN0aXZlQ2xhc3MpIHtcbiAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldC5wYXJlbnRFbGVtZW50ID09PSBlLmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgICAgIGZvcm0uY2xhc3NMaXN0LnRvZ2dsZShhY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgICAgICAgIGlmIChtdXN0QmVDbG9zZS5jbGFzc0xpc3QuY29udGFpbnMobXVzdEJlQ2xvc2VBY3RpdmVDbGFzcykpIHtcbiAgICAgICAgICAgICAgICAgIG11c3RCZUNsb3NlLmNsYXNzTGlzdC5yZW1vdmUobXVzdEJlQ2xvc2VBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICB9KTtcbiAgICAgIH1cbiAgIH0sIHtcbiAgICAgIGtleTogJ19zY3JvbGxDbG9zZUlucHV0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2Nyb2xsQ2xvc2VJbnB1dCgpIHtcbiAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnNlYXJjaEZvcm0uY2xhc3NMaXN0LmNvbnRhaW5zKF90aGlzLnNlcmNoRm9ybUFjdGl2ZUNsYXNzKSkge1xuICAgICAgICAgICAgICAgX3RoaXMuc2VhcmNoRm9ybS5jbGFzc0xpc3QucmVtb3ZlKF90aGlzLnNlcmNoRm9ybUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChfdGhpcy5sb2dpbkZvcm1XcmFwLmNsYXNzTGlzdC5jb250YWlucyhfdGhpcy5sb2dpbkZvcm1BY3RpdmVDbGFzcykpIHtcbiAgICAgICAgICAgICAgIF90aGlzLmxvZ2luRm9ybVdyYXAuY2xhc3NMaXN0LnJlbW92ZShfdGhpcy5sb2dpbkZvcm1BY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgfSk7XG4gICAgICB9XG4gICB9LCB7XG4gICAgICBrZXk6ICdfc3dpdGNoZXNCdG5zRXZlbnRzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc3dpdGNoZXNCdG5zRXZlbnRzKCkge1xuICAgICAgICAgdmFyIHNpZ25JbkJ0biA9IHRoaXMuc3dpdGNoZXNCcm5zWzBdLFxuICAgICAgICAgICAgIHJlZ2lzdGVyQnRuID0gdGhpcy5zd2l0Y2hlc0JybnNbMV0sXG4gICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkSW5wdXQgPSB0aGlzLmxvZ2luRm9ybVdyYXAucXVlcnlTZWxlY3RvcignLnVzZXItcGFuZWxfX2xvZ2luLWlucHV0LS1jb25maXJtLXBhc3N3b3JkJyk7XG5cbiAgICAgICAgIHJlZ2lzdGVyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd1c2VyLXBhbmVsX19sb2dpbi1zd2l0Y2hlcy1idG4tLW5vbmFjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgndXNlci1wYW5lbF9fbG9naW4tc3dpdGNoZXMtYnRuLS1ub25hY3RpdmUnKTtcbiAgICAgICAgICAgICAgIHNpZ25JbkJ0bi5jbGFzc0xpc3QuYWRkKCd1c2VyLXBhbmVsX19sb2dpbi1zd2l0Y2hlcy1idG4tLW5vbmFjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICBjb25maXJtUGFzc3dvcmRJbnB1dC5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJywgJycpO1xuICAgICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkSW5wdXQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9KTtcblxuICAgICAgICAgc2lnbkluQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd1c2VyLXBhbmVsX19sb2dpbi1zd2l0Y2hlcy1idG4tLW5vbmFjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgndXNlci1wYW5lbF9fbG9naW4tc3dpdGNoZXMtYnRuLS1ub25hY3RpdmUnKTtcbiAgICAgICAgICAgICAgIHJlZ2lzdGVyQnRuLmNsYXNzTGlzdC5hZGQoJ3VzZXItcGFuZWxfX2xvZ2luLXN3aXRjaGVzLWJ0bi0tbm9uYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICAgIGNvbmZpcm1QYXNzd29yZElucHV0LnJlbW92ZUF0dHJpYnV0ZSgncmVxdWlyZWQnKTtcbiAgICAgICAgICAgICAgIGNvbmZpcm1QYXNzd29yZElucHV0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICBjb25maXJtUGFzc3dvcmRJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfSk7XG4gICAgICB9XG4gICB9XSk7XG5cbiAgIHJldHVybiBTZWFyY2hMb2dpbkZvcm1zO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTZWFyY2hMb2dpbkZvcm1zO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5VFpXRnlZMmd0Ykc5bmFXNHRabTl5YlhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpVTJWaGNtTm9URzluYVc1R2IzSnRjeUlzSW5ObGNtTm9WM0poY0NJc0ltUnZZM1Z0Wlc1MElpd2ljWFZsY25sVFpXeGxZM1J2Y2lJc0luTmxZWEpqYUVKMGJpSXNJbk5sWVhKamFFWnZjbTBpTENKc2IyZHBibGR5WVhBaUxDSnNiMmRwYmtKMGJpSXNJbXh2WjJsdVJtOXliVmR5WVhBaUxDSnpaWEpqYUVadmNtMUJZM1JwZG1WRGJHRnpjeUlzSW14dloybHVSbTl5YlVGamRHbDJaVU5zWVhOeklpd2ljM2RwZEdOb1pYTkNjbTV6SWl3aWNYVmxjbmxUWld4bFkzUnZja0ZzYkNJc0lsOTBiMmRuYkdWSmJuQjFkQ0lzSWw5elkzSnZiR3hEYkc5elpVbHVjSFYwSWl3aVgzTjNhWFJqYUdWelFuUnVjMFYyWlc1MGN5SXNJbUowYmlJc0ltWnZjbTBpTENKaFkzUnBkbVZEYkdGemN5SXNJbTExYzNSQ1pVTnNiM05sSWl3aWJYVnpkRUpsUTJ4dmMyVkJZM1JwZG1WRGJHRnpjeUlzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKbElpd2lkR0Z5WjJWMElpd2lZM1Z5Y21WdWRGUmhjbWRsZENJc0luQmhjbVZ1ZEVWc1pXMWxiblFpTENKamJHRnpjMHhwYzNRaUxDSjBiMmRuYkdVaUxDSmpiMjUwWVdsdWN5SXNJbkpsYlc5MlpTSXNJbmRwYm1SdmR5SXNJbk5wWjI1SmJrSjBiaUlzSW5KbFoybHpkR1Z5UW5SdUlpd2lZMjl1Wm1seWJWQmhjM04zYjNKa1NXNXdkWFFpTENKaFpHUWlMQ0p6WlhSQmRIUnlhV0oxZEdVaUxDSnpkSGxzWlNJc0ltUnBjM0JzWVhraUxDSnlaVzF2ZG1WQmRIUnlhV0oxZEdVaUxDSjJZV3gxWlNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenRKUVVGeFFrRXNaMEk3UVVGRGJFSXNLMEpCUVdNN1FVRkJRVHM3UVVGRFdEdEJRVU5CTEZkQlFVdERMRk5CUVV3c1IwRkJhVUpETEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzTWtKQlFYWkNMRU5CUVdwQ08wRkJRMEVzVjBGQlMwTXNVMEZCVEN4SFFVRnBRaXhMUVVGTFNDeFRRVUZNTEVOQlFXVkZMR0ZCUVdZc1EwRkJOa0lzTmtKQlFUZENMRU5CUVdwQ08wRkJRMEVzVjBGQlMwVXNWVUZCVEN4SFFVRnJRaXhMUVVGTFNpeFRRVUZNTEVOQlFXVkZMR0ZCUVdZc1EwRkJOa0lzTUVKQlFUZENMRU5CUVd4Q096dEJRVVZCTEZkQlFVdEhMRk5CUVV3c1IwRkJhVUpLTEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzTUVKQlFYWkNMRU5CUVdwQ08wRkJRMEVzVjBGQlMwa3NVVUZCVEN4SFFVRm5RaXhMUVVGTFJDeFRRVUZNTEVOQlFXVklMR0ZCUVdZc1EwRkJOa0lzTWtKQlFUZENMRU5CUVdoQ08wRkJRMEVzVjBGQlMwc3NZVUZCVEN4SFFVRnhRaXhMUVVGTFJpeFRRVUZNTEVOQlFXVklMR0ZCUVdZc1EwRkJOa0lzT0VKQlFUZENMRU5CUVhKQ096dEJRVVZCTEZkQlFVdE5MRzlDUVVGTUxFZEJRVFJDTEdsRFFVRTFRanRCUVVOQkxGZEJRVXRETEc5Q1FVRk1MRWRCUVRSQ0xIRkRRVUUxUWpzN1FVRkZRU3hYUVVGTFF5eFpRVUZNTEVkQlFXOUNMRXRCUVV0TUxGTkJRVXdzUTBGQlpVMHNaMEpCUVdZc1EwRkJaME1zYVVOQlFXaERMRU5CUVhCQ08wRkJRMEU3UVVGRFFTeFhRVUZMUXl4WlFVRk1MRU5CUVd0Q0xFdEJRVXRVTEZOQlFYWkNMRVZCUVd0RExFdEJRVXRETEZWQlFYWkRMRVZCUVcxRUxFdEJRVXRKTEc5Q1FVRjRSQ3hGUVVFNFJTeExRVUZMUkN4aFFVRnVSaXhGUVVGclJ5eExRVUZMUlN4dlFrRkJka2M3UVVGRFFTeFhRVUZMUnl4WlFVRk1MRU5CUVd0Q0xFdEJRVXRPTEZGQlFYWkNMRVZCUVdsRExFdEJRVXRETEdGQlFYUkRMRVZCUVhGRUxFdEJRVXRGTEc5Q1FVRXhSQ3hGUVVGblJpeExRVUZMVEN4VlFVRnlSaXhGUVVGcFJ5eExRVUZMU1N4dlFrRkJkRWM3TzBGQlJVRXNWMEZCUzBzc2FVSkJRVXc3TzBGQlJVRXNWMEZCUzBNc2JVSkJRVXc3UVVGRFJqczdPenR0UTBGRldVTXNSeXhGUVVGTFF5eEpMRVZCUVUxRExGY3NSVUZCWVVNc1Z5eEZRVUZoUXl4elFpeEZRVUYzUWp0QlFVTjJSVW9zWVVGQlNVc3NaMEpCUVVvc1EwRkJjVUlzVDBGQmNrSXNSVUZCT0VJc1lVRkJTenRCUVVOb1F5eG5Ra0ZCU1VNc1JVRkJSVU1zVFVGQlJpeExRVUZoUkN4RlFVRkZSU3hoUVVGbUxFbEJRV2REUml4RlFVRkZReXhOUVVGR0xFTkJRVk5GTEdGQlFWUXNTMEZCTWtKSUxFVkJRVVZGTEdGQlFXcEZMRVZCUVdkR08wRkJRemRGVUN4dlFrRkJTMU1zVTBGQlRDeERRVUZsUXl4TlFVRm1MRU5CUVhOQ1ZDeFhRVUYwUWpzN1FVRkZRU3h0UWtGQlNVTXNXVUZCV1U4c1UwRkJXaXhEUVVGelFrVXNVVUZCZEVJc1EwRkJLMEpTTEhOQ1FVRXZRaXhEUVVGS0xFVkJRVFJFTzBGQlEzcEVSQ3c0UWtGQldVOHNVMEZCV2l4RFFVRnpRa2NzVFVGQmRFSXNRMEZCTmtKVUxITkNRVUUzUWp0QlFVTkdPMEZCUTBnN1FVRkRTQ3hWUVZKRU8wRkJVMFk3T3pzd1EwRkZiVUk3UVVGQlFUczdRVUZEYWtKVkxHZENRVUZQVkN4blFrRkJVQ3hEUVVGM1FpeFJRVUY0UWl4RlFVRnJReXhoUVVGTE8wRkJRM0JETEdkQ1FVRkpMRTFCUVV0b1FpeFZRVUZNTEVOQlFXZENjVUlzVTBGQmFFSXNRMEZCTUVKRkxGRkJRVEZDTEVOQlFXMURMRTFCUVV0dVFpeHZRa0ZCZUVNc1EwRkJTaXhGUVVGdFJUdEJRVU5vUlN4eFFrRkJTMG9zVlVGQlRDeERRVUZuUW5GQ0xGTkJRV2hDTEVOQlFUQkNSeXhOUVVFeFFpeERRVUZwUXl4TlFVRkxjRUlzYjBKQlFYUkRPMEZCUTBZN08wRkJSVVFzWjBKQlFVa3NUVUZCUzBRc1lVRkJUQ3hEUVVGdFFtdENMRk5CUVc1Q0xFTkJRVFpDUlN4UlFVRTNRaXhEUVVGelF5eE5RVUZMYkVJc2IwSkJRVE5ETEVOQlFVb3NSVUZCYzBVN1FVRkRia1VzY1VKQlFVdEdMR0ZCUVV3c1EwRkJiVUpyUWl4VFFVRnVRaXhEUVVFMlFrY3NUVUZCTjBJc1EwRkJiME1zVFVGQlMyNUNMRzlDUVVGNlF6dEJRVU5HTzBGQlEwZ3NWVUZTUkR0QlFWTkdPenM3TkVOQlJYRkNPMEZCUTI1Q0xHRkJRVWx4UWl4WlFVRlpMRXRCUVV0d1FpeFpRVUZNTEVOQlFXdENMRU5CUVd4Q0xFTkJRV2hDTzBGQlFVRXNZVUZEU1hGQ0xHTkJRV01zUzBGQlMzSkNMRmxCUVV3c1EwRkJhMElzUTBGQmJFSXNRMEZFYkVJN1FVRkJRU3hoUVVWSmMwSXNkVUpCUVhWQ0xFdEJRVXQ2UWl4aFFVRk1MRU5CUVcxQ1RDeGhRVUZ1UWl4RFFVRnBReXcwUTBGQmFrTXNRMEZHTTBJN08wRkJTVUUyUWl4eFFrRkJXVmdzWjBKQlFWb3NRMEZCTmtJc1QwRkJOMElzUlVGQmMwTXNZVUZCU3p0QlFVTjRReXhuUWtGQlNVTXNSVUZCUlVVc1lVRkJSaXhEUVVGblFrVXNVMEZCYUVJc1EwRkJNRUpGTEZGQlFURkNMRU5CUVcxRExESkRRVUZ1UXl4RFFVRktMRVZCUVhGR08wRkJRMnhHVGl4cFFrRkJSVVVzWVVGQlJpeERRVUZuUWtVc1UwRkJhRUlzUTBGQk1FSkhMRTFCUVRGQ0xFTkJRV2xETERKRFFVRnFRenRCUVVOQlJTeDVRa0ZCVlV3c1UwRkJWaXhEUVVGdlFsRXNSMEZCY0VJc1EwRkJkMElzTWtOQlFYaENPenRCUVVWQlJDeHZRMEZCY1VKRkxGbEJRWEpDTEVOQlFXdERMRlZCUVd4RExFVkJRVGhETEVWQlFUbERPMEZCUTBGR0xHOURRVUZ4UWtjc1MwRkJja0lzUTBGQk1rSkRMRTlCUVROQ0xFZEJRWEZETEU5QlFYSkRPMEZCUTBZN1FVRkRTQ3hWUVZKRU96dEJRVlZCVGl4dFFrRkJWVllzWjBKQlFWWXNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNZVUZCU3p0QlFVTjBReXhuUWtGQlNVTXNSVUZCUlVVc1lVRkJSaXhEUVVGblFrVXNVMEZCYUVJc1EwRkJNRUpGTEZGQlFURkNMRU5CUVcxRExESkRRVUZ1UXl4RFFVRktMRVZCUVhGR08wRkJRMnhHVGl4cFFrRkJSVVVzWVVGQlJpeERRVUZuUWtVc1UwRkJhRUlzUTBGQk1FSkhMRTFCUVRGQ0xFTkJRV2xETERKRFFVRnFRenRCUVVOQlJ5d3lRa0ZCV1U0c1UwRkJXaXhEUVVGelFsRXNSMEZCZEVJc1EwRkJNRUlzTWtOQlFURkNPenRCUVVWQlJDeHZRMEZCY1VKTExHVkJRWEpDTEVOQlFYRkRMRlZCUVhKRE8wRkJRMEZNTEc5RFFVRnhRa2NzUzBGQmNrSXNRMEZCTWtKRExFOUJRVE5DTEVkQlFYRkRMRTFCUVhKRE8wRkJRMEZLTEc5RFFVRnhRazBzUzBGQmNrSXNSMEZCTmtJc1JVRkJOMEk3UVVGRFJqdEJRVU5JTEZWQlZFUTdRVUZWUmpzN096czdPMnRDUVhwRmFVSjJReXhuUWp0QlFUQkZjRUlpTENKbWFXeGxJam9pWDFObFlYSmphQzFzYjJkcGJpMW1iM0p0Y3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZObFlYSmphRXh2WjJsdVJtOXliWE1nZTF4eVhHNGdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNjbHh1SUNBZ0lDQWdMeThnUkU5TlhISmNiaUFnSUNBZ0lIUm9hWE11YzJWeVkyaFhjbUZ3SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG5WelpYSXRjR0Z1Wld4ZlgybDBaVzB0TFhObFlYSmphQ2NwTzF4eVhHNGdJQ0FnSUNCMGFHbHpMbk5sWVhKamFFSjBiaUE5SUhSb2FYTXVjMlZ5WTJoWGNtRndMbkYxWlhKNVUyVnNaV04wYjNJb0p5NTFjMlZ5TFhCaGJtVnNYMTlpZFhSMGIyNHRMWE5sWVhKamFDY3BPMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTmxZWEpqYUVadmNtMGdQU0IwYUdsekxuTmxjbU5vVjNKaGNDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWRYTmxjaTF3WVc1bGJGOWZjMlZoY21Ob0xXWnZjbTBuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJSFJvYVhNdWJHOW5hVzVYY21Gd0lEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuVnpaWEl0Y0dGdVpXeGZYMmwwWlcwdExXeHZaMmx1SnlrN1hISmNiaUFnSUNBZ0lIUm9hWE11Ykc5bmFXNUNkRzRnUFNCMGFHbHpMbXh2WjJsdVYzSmhjQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VkWE5sY2kxd1lXNWxiRjlmWW5WMGRHOXVMUzExYzJWeUp5azdYSEpjYmlBZ0lDQWdJSFJvYVhNdWJHOW5hVzVHYjNKdFYzSmhjQ0E5SUhSb2FYTXViRzluYVc1WGNtRndMbkYxWlhKNVUyVnNaV04wYjNJb0p5NTFjMlZ5TFhCaGJtVnNYMTlzYjJkcGJpMW1iM0p0TFhkeVlYQW5LVHRjY2x4dVhISmNiaUFnSUNBZ0lIUm9hWE11YzJWeVkyaEdiM0p0UVdOMGFYWmxRMnhoYzNNZ1BTQW5kWE5sY2kxd1lXNWxiRjlmYzJWaGNtTm9MV1p2Y20wdExXRmpkR2wyWlNjN1hISmNiaUFnSUNBZ0lIUm9hWE11Ykc5bmFXNUdiM0p0UVdOMGFYWmxRMnhoYzNNZ1BTQW5kWE5sY2kxd1lXNWxiRjlmYkc5bmFXNHRabTl5YlMxM2NtRndMUzFoWTNScGRtVW5PMXh5WEc1Y2NseHVJQ0FnSUNBZ2RHaHBjeTV6ZDJsMFkyaGxjMEp5Ym5NZ1BTQjBhR2x6TG14dloybHVWM0poY0M1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdWRYTmxjaTF3WVc1bGJGOWZiRzluYVc0dGMzZHBkR05vWlhNdFluUnVKeWs3WEhKY2JpQWdJQ0FnSUM4dklDQmxkbVZ1ZEhOY2NseHVJQ0FnSUNBZ2RHaHBjeTVmZEc5bloyeGxTVzV3ZFhRb2RHaHBjeTV6WldGeVkyaENkRzRzSUhSb2FYTXVjMlZoY21Ob1JtOXliU3dnZEdocGN5NXpaWEpqYUVadmNtMUJZM1JwZG1WRGJHRnpjeXdnZEdocGN5NXNiMmRwYmtadmNtMVhjbUZ3TENCMGFHbHpMbXh2WjJsdVJtOXliVUZqZEdsMlpVTnNZWE56S1R0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmZEc5bloyeGxTVzV3ZFhRb2RHaHBjeTVzYjJkcGJrSjBiaXdnZEdocGN5NXNiMmRwYmtadmNtMVhjbUZ3TENCMGFHbHpMbXh2WjJsdVJtOXliVUZqZEdsMlpVTnNZWE56TENCMGFHbHpMbk5sWVhKamFFWnZjbTBzSUhSb2FYTXVjMlZ5WTJoR2IzSnRRV04wYVhabFEyeGhjM01wTzF4eVhHNWNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmMyTnliMnhzUTJ4dmMyVkpibkIxZENncE8xeHlYRzVjY2x4dUlDQWdJQ0FnZEdocGN5NWZjM2RwZEdOb1pYTkNkRzV6UlhabGJuUnpLQ2s3WEhKY2JpQWdJSDA3WEhKY2JseHlYRzRnSUNCZmRHOW5aMnhsU1c1d2RYUW9ZblJ1TENCbWIzSnRMQ0JoWTNScGRtVkRiR0Z6Y3l3Z2JYVnpkRUpsUTJ4dmMyVXNJRzExYzNSQ1pVTnNiM05sUVdOMGFYWmxRMnhoYzNNcElIdGNjbHh1SUNBZ0lDQWdZblJ1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnWlNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUdsbUlDaGxMblJoY21kbGRDQTlQVDBnWlM1amRYSnlaVzUwVkdGeVoyVjBJSHg4SUdVdWRHRnlaMlYwTG5CaGNtVnVkRVZzWlcxbGJuUWdQVDA5SUdVdVkzVnljbVZ1ZEZSaGNtZGxkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNKdExtTnNZWE56VEdsemRDNTBiMmRuYkdVb1lXTjBhWFpsUTJ4aGMzTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMTFjM1JDWlVOc2IzTmxMbU5zWVhOelRHbHpkQzVqYjI1MFlXbHVjeWh0ZFhOMFFtVkRiRzl6WlVGamRHbDJaVU5zWVhOektTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0ZFhOMFFtVkRiRzl6WlM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0cxMWMzUkNaVU5zYjNObFFXTjBhWFpsUTJ4aGMzTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lIMDdYSEpjYmx4eVhHNGdJQ0JmYzJOeWIyeHNRMnh2YzJWSmJuQjFkQ2dwSUh0Y2NseHVJQ0FnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNOamNtOXNiQ2NzSUdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1elpXRnlZMmhHYjNKdExtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5aDBhR2x6TG5ObGNtTm9SbTl5YlVGamRHbDJaVU5zWVhOektTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObFlYSmphRVp2Y20wdVkyeGhjM05NYVhOMExuSmxiVzkyWlNoMGFHbHpMbk5sY21Ob1JtOXliVUZqZEdsMlpVTnNZWE56S1R0Y2NseHVJQ0FnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbXh2WjJsdVJtOXliVmR5WVhBdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektIUm9hWE11Ykc5bmFXNUdiM0p0UVdOMGFYWmxRMnhoYzNNcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ykc5bmFXNUdiM0p0VjNKaGNDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtIUm9hWE11Ykc5bmFXNUdiM0p0UVdOMGFYWmxRMnhoYzNNcE8xeHlYRzRnSUNBZ0lDQWdJQ0I5T3lCY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lIMDdYSEpjYmx4eVhHNGdJQ0JmYzNkcGRHTm9aWE5DZEc1elJYWmxiblJ6S0NrZ2UxeHlYRzRnSUNBZ0lDQnNaWFFnYzJsbmJrbHVRblJ1SUQwZ2RHaHBjeTV6ZDJsMFkyaGxjMEp5Ym5OYk1GMHNYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpXZHBjM1JsY2tKMGJpQTlJSFJvYVhNdWMzZHBkR05vWlhOQ2NtNXpXekZkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1Wm1seWJWQmhjM04zYjNKa1NXNXdkWFFnUFNCMGFHbHpMbXh2WjJsdVJtOXliVmR5WVhBdWNYVmxjbmxUWld4bFkzUnZjaWduTG5WelpYSXRjR0Z1Wld4ZlgyeHZaMmx1TFdsdWNIVjBMUzFqYjI1bWFYSnRMWEJoYzNOM2IzSmtKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQnlaV2RwYzNSbGNrSjBiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0JwWmlBb1pTNWpkWEp5Wlc1MFZHRnlaMlYwTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnbmRYTmxjaTF3WVc1bGJGOWZiRzluYVc0dGMzZHBkR05vWlhNdFluUnVMUzF1YjI1aFkzUnBkbVVuS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbExtTjFjbkpsYm5SVVlYSm5aWFF1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duZFhObGNpMXdZVzVsYkY5ZmJHOW5hVzR0YzNkcGRHTm9aWE10WW5SdUxTMXViMjVoWTNScGRtVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMmxuYmtsdVFuUnVMbU5zWVhOelRHbHpkQzVoWkdRb0ozVnpaWEl0Y0dGdVpXeGZYMnh2WjJsdUxYTjNhWFJqYUdWekxXSjBiaTB0Ym05dVlXTjBhWFpsSnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjVtYVhKdFVHRnpjM2R2Y21SSmJuQjFkQzV6WlhSQmRIUnlhV0oxZEdVb0ozSmxjWFZwY21Wa0p5d2dKeWNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFYSnRVR0Z6YzNkdmNtUkpibkIxZEM1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjJKc2IyTnJKenRjY2x4dUlDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lITnBaMjVKYmtKMGJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHVWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQnBaaUFvWlM1amRYSnlaVzUwVkdGeVoyVjBMbU5zWVhOelRHbHpkQzVqYjI1MFlXbHVjeWduZFhObGNpMXdZVzVsYkY5ZmJHOW5hVzR0YzNkcGRHTm9aWE10WW5SdUxTMXViMjVoWTNScGRtVW5LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsTG1OMWNuSmxiblJVWVhKblpYUXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25kWE5sY2kxd1lXNWxiRjlmYkc5bmFXNHRjM2RwZEdOb1pYTXRZblJ1TFMxdWIyNWhZM1JwZG1VbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVm5hWE4wWlhKQ2RHNHVZMnhoYzNOTWFYTjBMbUZrWkNnbmRYTmxjaTF3WVc1bGJGOWZiRzluYVc0dGMzZHBkR05vWlhNdFluUnVMUzF1YjI1aFkzUnBkbVVuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwY20xUVlYTnpkMjl5WkVsdWNIVjBMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25jbVZ4ZFdseVpXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1seWJWQmhjM04zYjNKa1NXNXdkWFF1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJQ2R1YjI1bEp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWx5YlZCaGMzTjNiM0prU1c1d2RYUXVkbUZzZFdVZ1BTQW5KenRjY2x4dUlDQWdJQ0FnSUNBZ2ZTQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lIMDdYSEpjYm4wN0lsMTkiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEFkZFByb2R1Y3RJdGVtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBZGRQcm9kdWN0SXRlbXMoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBZGRQcm9kdWN0SXRlbXMpO1xuXG4gICAgICAgIC8vIERPTVxuICAgICAgICB0aGlzLm1haW5JdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2R1Y3RfX2l0ZW0tY2xvbmUnKS5jaGlsZHJlblswXTtcbiAgICAgICAgdGhpcy5wYXJyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlYXV0dXJlLXByb2R1Y3QnKTtcbiAgICAgICAgdGhpcy5idG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZC1tb3JlLWJ0bicpO1xuXG4gICAgICAgIC8vIHZhcnMgXG4gICAgICAgIHRoaXMuZmlyc3RMb2FkZWRJdGVtc1F0eSA9IDg7XG4gICAgICAgIHRoaXMucHJlc3NCdG5Mb2FkZWRJdGVtc1F0eSA9IDQ7XG5cbiAgICAgICAgLy8gIGV2ZW50c1xuICAgICAgICB0aGlzLl9maXJzdExvYWRBZGRJdGVtcygpO1xuICAgICAgICB0aGlzLl9wcmVzc0J0bkFkZEl0ZW1zKCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEFkZFByb2R1Y3RJdGVtcywgW3tcbiAgICAgICAga2V5OiAnX2ZpcnN0TG9hZEFkZEl0ZW1zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9maXJzdExvYWRBZGRJdGVtcygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsICdodHRwczovL3NvbG92aW92bWF4LmdpdGh1Yi5pby9tc3RvcmUvZGIuanNvbicpO1xuXG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJqc29uXCI7XG5cbiAgICAgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0geGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbFF0eUl0ZW1zID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIHZhciBxdHlJdGVtcyA9IF90aGlzLmZpcnN0TG9hZGVkSXRlbXNRdHk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5fYWRkSXRlbXModG90YWxRdHlJdGVtcywgcXR5SXRlbXMsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfcHJlc3NCdG5BZGRJdGVtcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJlc3NCdG5BZGRJdGVtcygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLm5vd0FkZGVkID0gdGhpcy5maXJzdExvYWRlZEl0ZW1zUXR5O1xuXG4gICAgICAgICAgICB0aGlzLmJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgICAgICB4aHIub3BlbignR0VUJywgJ2h0dHBzOi8vc29sb3Zpb3ZtYXguZ2l0aHViLmlvL21zdG9yZS9kYi5qc29uJyk7XG5cbiAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJqc29uXCI7XG5cbiAgICAgICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB4aHIucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbFF0eUl0ZW1zID0gZGF0YS5sZW5ndGggLSAxIC0gX3RoaXMyLm5vd0FkZGVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcXR5SXRlbXMgPSBfdGhpczIucHJlc3NCdG5Mb2FkZWRJdGVtc1F0eTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLl9hZGRJdGVtcyh0b3RhbFF0eUl0ZW1zLCBxdHlJdGVtcywgZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLm5vd0FkZGVkICs9IF90aGlzMi5wcmVzc0J0bkxvYWRlZEl0ZW1zUXR5O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2FkZEl0ZW1zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRJdGVtcyh0b3RhbFF0eSwgYWRkUXR5LCBkYXRhKSB7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0b3RhbFF0eTsgaSA+IHRvdGFsUXR5IC0gYWRkUXR5OyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEl0ZW0gPSB0aGlzLm1haW5JdGVtLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgICAgIHZhciBpbWcgPSBjdXJyZW50SXRlbS5xdWVyeVNlbGVjdG9yKCcucHJvZHVjdF9faW1nJyksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlID0gY3VycmVudEl0ZW0ucXVlcnlTZWxlY3RvcignLnByb2R1Y3RfX3RpdGxlLWxpbmsnKSxcbiAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSBjdXJyZW50SXRlbS5xdWVyeVNlbGVjdG9yKCcucHJvZHVjdF9fcHJpY2UnKSxcbiAgICAgICAgICAgICAgICAgICAgYmFza2V0QnRuID0gY3VycmVudEl0ZW0ucXVlcnlTZWxlY3RvcignLnByb2R1Y3RfX2RldGFpbHMtYnV0dG9uLS1iYXNrZXQnKSxcbiAgICAgICAgICAgICAgICAgICAgem9vbUJ0biA9IGN1cnJlbnRJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0X19kZXRhaWxzLWJ1dHRvbi0tem9vbScpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFJdGVtID0gZGF0YVtpXTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnc3JjJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgJ2ltZy8nICsgZGF0YUl0ZW1ba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB6b29tQnRuLmRhdGFzZXQuc3JjID0gJ2ltZy8nICsgJ2JpZy0nICsgZGF0YUl0ZW1ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICd0aXRsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gZGF0YUl0ZW1ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ2FsdCcsIGRhdGFJdGVtW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3ByaWNlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UudGV4dENvbnRlbnQgPSAnJCcgKyBkYXRhSXRlbVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFza2V0QnRuLmRhdGFzZXQucHJpY2UgPSBkYXRhSXRlbVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEl0ZW0uZGF0YXNldC5pZCA9IGRhdGFJdGVtW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnb2xkUHJpY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkUHJpY2VTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkUHJpY2VTcGFuLnRleHRDb250ZW50ID0gJyQnICsgZGF0YUl0ZW1ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFByaWNlU3Bhbi5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0X19vbGQtcHJpY2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcldyYXAgPSBjdXJyZW50SXRlbS5xdWVyeVNlbGVjdG9yKCcucHJvZHVjdC1kZXNjcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JXcmFwLmluc2VydEJlZm9yZShvbGRQcmljZVNwYW4sIGRlc2NyV3JhcC5jaGlsZHJlblsyXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnbGFiZWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0X19pdGVtLS1sYWJlbC0nICsgZGF0YUl0ZW1ba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJyZW50LmFwcGVuZENoaWxkKGN1cnJlbnRJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBZGRQcm9kdWN0SXRlbXM7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEFkZFByb2R1Y3RJdGVtcztcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhaR1F0Y0hKdlpIVmpkQzFwZEdWdGN5NXFjeUpkTENKdVlXMWxjeUk2V3lKQlpHUlFjbTlrZFdOMFNYUmxiWE1pTENKdFlXbHVTWFJsYlNJc0ltUnZZM1Z0Wlc1MElpd2ljWFZsY25sVFpXeGxZM1J2Y2lJc0ltTm9hV3hrY21WdUlpd2ljR0Z5Y21WdWRDSXNJbUowYmlJc0ltWnBjbk4wVEc5aFpHVmtTWFJsYlhOUmRIa2lMQ0p3Y21WemMwSjBia3h2WVdSbFpFbDBaVzF6VVhSNUlpd2lYMlpwY25OMFRHOWhaRUZrWkVsMFpXMXpJaXdpWDNCeVpYTnpRblJ1UVdSa1NYUmxiWE1pTENKNGFISWlMQ0pZVFV4SWRIUndVbVZ4ZFdWemRDSXNJbTl3Wlc0aUxDSnlaWE53YjI1elpWUjVjR1VpTENKaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SWl3aVpHRjBZU0lzSW5KbGMzQnZibk5sSWl3aWRHOTBZV3hSZEhsSmRHVnRjeUlzSW14bGJtZDBhQ0lzSW5GMGVVbDBaVzF6SWl3aVgyRmtaRWwwWlcxeklpd2ljMlZ1WkNJc0ltNXZkMEZrWkdWa0lpd2lkRzkwWVd4UmRIa2lMQ0poWkdSUmRIa2lMQ0pwSWl3aWMzUjViR1VpTENKa2FYTndiR0Y1SWl3aVkzVnljbVZ1ZEVsMFpXMGlMQ0pqYkc5dVpVNXZaR1VpTENKcGJXY2lMQ0owYVhSc1pTSXNJbkJ5YVdObElpd2lZbUZ6YTJWMFFuUnVJaXdpZW05dmJVSjBiaUlzSW1SaGRHRkpkR1Z0SWl3aWEyVjVJaXdpYzJWMFFYUjBjbWxpZFhSbElpd2laR0YwWVhObGRDSXNJbk55WXlJc0luUmxlSFJEYjI1MFpXNTBJaXdpYVdRaUxDSnZiR1JRY21salpWTndZVzRpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWTJ4aGMzTk1hWE4wSWl3aVlXUmtJaXdpWkdWelkzSlhjbUZ3SWl3aWFXNXpaWEowUW1WbWIzSmxJaXdpWVhCd1pXNWtRMmhwYkdRaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3U1VGQmNVSkJMR1U3UVVGRGFrSXNLMEpCUVdNN1FVRkJRVHM3UVVGRFZqdEJRVU5CTEdGQlFVdERMRkZCUVV3c1IwRkJaMEpETEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzYzBKQlFYWkNMRVZCUVN0RFF5eFJRVUV2UXl4RFFVRjNSQ3hEUVVGNFJDeERRVUZvUWp0QlFVTkJMR0ZCUVV0RExFOUJRVXdzUjBGQlpVZ3NVMEZCVTBNc1lVRkJWQ3hEUVVGMVFpeHRRa0ZCZGtJc1EwRkJaanRCUVVOQkxHRkJRVXRITEVkQlFVd3NSMEZCVjBvc1UwRkJVME1zWVVGQlZDeERRVUYxUWl4blFrRkJka0lzUTBGQldEczdRVUZGUVR0QlFVTkJMR0ZCUVV0SkxHMUNRVUZNTEVkQlFUSkNMRU5CUVROQ08wRkJRMEVzWVVGQlMwTXNjMEpCUVV3c1IwRkJPRUlzUTBGQk9VSTdPMEZCUjBFN1FVRkRRU3hoUVVGTFF5eHJRa0ZCVER0QlFVTkJMR0ZCUVV0RExHbENRVUZNTzBGQlEwZzdPenM3TmtOQlJXOUNPMEZCUVVFN08wRkJRMnBDTEdkQ1FVRkpReXhOUVVGTkxFbEJRVWxETEdOQlFVb3NSVUZCVmpzN1FVRkZRVVFzWjBKQlFVbEZMRWxCUVVvc1EwRkJVeXhMUVVGVUxFVkJRV2RDTERoRFFVRm9RanM3UVVGRlFVWXNaMEpCUVVsSExGbEJRVW9zUjBGQmJVSXNUVUZCYmtJN08wRkJSVUZJTEdkQ1FVRkpTU3huUWtGQlNpeERRVUZ4UWl4TlFVRnlRaXhGUVVFMlFpeFpRVUZOTzBGQlF5OUNMRzlDUVVGSlF5eFBRVUZQVEN4SlFVRkpUU3hSUVVGbU8wRkJRMEVzYjBKQlFVbERMR2RDUVVGcFFrWXNTMEZCUzBjc1RVRkJUQ3hIUVVGakxFTkJRVzVETzBGQlEwRXNiMEpCUVVsRExGZEJRVmNzVFVGQlMySXNiVUpCUVhCQ096dEJRVVZLTEhOQ1FVRkxZeXhUUVVGTUxFTkJRV1ZJTEdGQlFXWXNSVUZCT0VKRkxGRkJRVGxDTEVWQlFYZERTaXhKUVVGNFF6dEJRVVZETEdGQlVFUTdRVUZSUVV3c1owSkJRVWxYTEVsQlFVbzdRVUZGU0RzN096UkRRVVZ0UWp0QlFVRkJPenRCUVVOb1FpeHBRa0ZCUzBNc1VVRkJUQ3hIUVVGblFpeExRVUZMYUVJc2JVSkJRWEpDT3p0QlFVVkJMR2xDUVVGTFJDeEhRVUZNTEVOQlFWTlRMR2RDUVVGVUxFTkJRVEJDTEU5QlFURkNMRVZCUVcxRExGbEJRVTA3UVVGRGNrTXNiMEpCUVVsS0xFMUJRVTBzU1VGQlNVTXNZMEZCU2l4RlFVRldPenRCUVVWQlJDeHZRa0ZCU1VVc1NVRkJTaXhEUVVGVExFdEJRVlFzUlVGQlowSXNPRU5CUVdoQ096dEJRVVZCUml4dlFrRkJTVWNzV1VGQlNpeEhRVUZ0UWl4TlFVRnVRanM3UVVGRlFVZ3NiMEpCUVVsSkxHZENRVUZLTEVOQlFYRkNMRTFCUVhKQ0xFVkJRVFpDTEZsQlFVMDdRVUZETDBJc2QwSkJRVWxETEU5QlFVOU1MRWxCUVVsTkxGRkJRV1k3UVVGRFFTeDNRa0ZCU1VNc1owSkJRV2xDUml4TFFVRkxSeXhOUVVGTUxFZEJRV01zUTBGQlpDeEhRVUZyUWl4UFFVRkxTU3hSUVVFMVF6dEJRVU5CTEhkQ1FVRkpTQ3hYUVVGWExFOUJRVXRhTEhOQ1FVRndRanRCUVVOS0xESkNRVUZMWVN4VFFVRk1MRU5CUVdWSUxHRkJRV1lzUlVGQk9FSkZMRkZCUVRsQ0xFVkJRWGREU2l4SlFVRjRRenM3UVVGRlFTd3lRa0ZCUzA4c1VVRkJUQ3hKUVVGcFFpeFBRVUZMWml4elFrRkJkRUk3UVVGRFF5eHBRa0ZRUkR0QlFWRkJSeXh2UWtGQlNWY3NTVUZCU2p0QlFVVklMR0ZCYWtKRU8wRkJhMEpJT3pzN2EwTkJSVk5GTEZFc1JVRkJWVU1zVFN4RlFVRlJWQ3hKTEVWQlFVMDdPMEZCUlRsQ0xHbENRVUZMTEVsQlFVbFZMRWxCUVVsR0xGRkJRV0lzUlVGQmRVSkZMRWxCUVV0R0xGZEJRVmRETEUxQlFYWkRMRVZCUVdkRVF5eEhRVUZvUkN4RlFVRnhSRHRCUVVOcVJDeHZRa0ZCU1VFc1RVRkJUU3hEUVVGV0xFVkJRV0U3UVVGRFZDeDVRa0ZCUzNCQ0xFZEJRVXdzUTBGQlUzRkNMRXRCUVZRc1EwRkJaVU1zVDBGQlppeEhRVUY1UWl4TlFVRjZRanRCUVVOSU8wRkJRMFFzYjBKQlFVbERMR05CUVdNc1MwRkJTelZDTEZGQlFVd3NRMEZCWXpaQ0xGTkJRV1FzUTBGQmQwSXNTVUZCZUVJc1EwRkJiRUk3TzBGQlJVRXNiMEpCUVVsRExFMUJRVTFHTEZsQlFWa3hRaXhoUVVGYUxFTkJRVEJDTEdWQlFURkNMRU5CUVZZN1FVRkJRU3h2UWtGRFNUWkNMRkZCUVZGSUxGbEJRVmt4UWl4aFFVRmFMRU5CUVRCQ0xITkNRVUV4UWl4RFFVUmFPMEZCUVVFc2IwSkJSVWs0UWl4UlFVRlJTaXhaUVVGWk1VSXNZVUZCV2l4RFFVRXdRaXhwUWtGQk1VSXNRMEZHV2p0QlFVRkJMRzlDUVVkSkswSXNXVUZCV1V3c1dVRkJXVEZDTEdGQlFWb3NRMEZCTUVJc2EwTkJRVEZDTEVOQlNHaENPMEZCUVVFc2IwSkJTVWxuUXl4VlFVRlZUaXhaUVVGWk1VSXNZVUZCV2l4RFFVRXdRaXhuUTBGQk1VSXNRMEZLWkRzN1FVRk5RU3h2UWtGQlNXbERMRmRCUVZkd1FpeExRVUZMVlN4RFFVRk1MRU5CUVdZN08wRkJSVUVzY1VKQlFVc3NTVUZCU1Zjc1IwRkJWQ3hKUVVGblFrUXNVVUZCYUVJc1JVRkJNRUk3UVVGRGRFSXNkMEpCUVVsRExGRkJRVkVzUzBGQldpeEZRVUZ0UWp0QlFVTm1UaXcwUWtGQlNVOHNXVUZCU2l4RFFVRnBRaXhMUVVGcVFpeEZRVUY1UWl4VFFVRlRSaXhUUVVGVFF5eEhRVUZVTEVOQlFXeERPMEZCUTBGR0xHZERRVUZSU1N4UFFVRlNMRU5CUVdkQ1F5eEhRVUZvUWl4SFFVRjFRaXhUUVVGVExFMUJRVlFzUjBGQmEwSktMRk5CUVZORExFZEJRVlFzUTBGQmVrTTdRVUZEU0N4eFFrRklSQ3hOUVVkUExFbEJRVWxCTEZGQlFWRXNUMEZCV2l4RlFVRnhRanRCUVVONFFrd3NPRUpCUVUxVExGZEJRVTRzUjBGQmIwSk1MRk5CUVZORExFZEJRVlFzUTBGQmNFSTdRVUZEUVU0c05FSkJRVWxQTEZsQlFVb3NRMEZCYVVJc1MwRkJha0lzUlVGQmQwSkdMRk5CUVZORExFZEJRVlFzUTBGQmVFSTdRVUZEU0N4eFFrRklUU3hOUVVkQkxFbEJRVWxCTEZGQlFWRXNUMEZCV2l4RlFVRnhRanRCUVVONFFrb3NPRUpCUVUxUkxGZEJRVTRzUjBGQmIwSXNUVUZCVFV3c1UwRkJVME1zUjBGQlZDeERRVUV4UWp0QlFVTkJTQ3hyUTBGQlZVc3NUMEZCVml4RFFVRnJRazRzUzBGQmJFSXNSMEZCTUVKSExGTkJRVk5ETEVkQlFWUXNRMEZCTVVJN1FVRkRTQ3h4UWtGSVRTeE5RVWRCTEVsQlFVbEJMRkZCUVZFc1NVRkJXaXhGUVVGclFqdEJRVU55UWxJc2IwTkJRVmxWTEU5QlFWb3NRMEZCYjBKSExFVkJRWEJDTEVkQlFYbENUaXhUUVVGVFF5eEhRVUZVTEVOQlFYcENPMEZCUTBnc2NVSkJSazBzVFVGRlFTeEpRVUZKUVN4UlFVRlJMRlZCUVZvc1JVRkJkMEk3UVVGRE0wSXNORUpCUVVsTkxHVkJRV1Y2UXl4VFFVRlRNRU1zWVVGQlZDeERRVUYxUWl4TlFVRjJRaXhEUVVGdVFqdEJRVU5CUkN4eFEwRkJZVVlzVjBGQllpeEhRVUV5UWl4TlFVRk5UQ3hUUVVGVFF5eEhRVUZVTEVOQlFXcERPMEZCUTBGTkxIRkRRVUZoUlN4VFFVRmlMRU5CUVhWQ1F5eEhRVUYyUWl4RFFVRXlRaXh2UWtGQk0wSTdRVUZEUVN3MFFrRkJTVU1zV1VGQldXeENMRmxCUVZreFFpeGhRVUZhTEVOQlFUQkNMR2RDUVVFeFFpeERRVUZvUWp0QlFVTkJORU1zYTBOQlFWVkRMRmxCUVZZc1EwRkJkVUpNTEZsQlFYWkNMRVZCUVhGRFNTeFZRVUZWTTBNc1VVRkJWaXhEUVVGdFFpeERRVUZ1UWl4RFFVRnlRenRCUVVOSUxIRkNRVTVOTEUxQlRVRXNTVUZCU1dsRExGRkJRVkVzVDBGQldpeEZRVUZ4UWp0QlFVTjRRbElzYjBOQlFWbG5RaXhUUVVGYUxFTkJRWE5DUXl4SFFVRjBRaXhEUVVFd1Fpd3dRa0ZCTUVKV0xGTkJRVk5ETEVkQlFWUXNRMEZCY0VRN1FVRkRTRHRCUVVWS08wRkJRMFFzY1VKQlFVdG9ReXhQUVVGTUxFTkJRV0UwUXl4WFFVRmlMRU5CUVhsQ2NFSXNWMEZCZWtJN1FVRkRTRHRCUVVOS096czdPenM3YTBKQmNFZG5RamRDTEdVN1FVRnhSM0JDSWl3aVptbHNaU0k2SWw5aFpHUXRjSEp2WkhWamRDMXBkR1Z0Y3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUVGa1pGQnliMlIxWTNSSmRHVnRjeUI3WEhKY2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCRVQwMWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtMWhhVzVKZEdWdElEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuQnliMlIxWTNSZlgybDBaVzB0WTJ4dmJtVW5LUzVqYUdsc1pISmxibHN3WFR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGNuSmxiblFnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1Wm1WaGRYUjFjbVV0Y0hKdlpIVmpkQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WW5SdUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxteHZZV1F0Ylc5eVpTMWlkRzRuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2RtRnljeUJjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVpwY25OMFRHOWhaR1ZrU1hSbGJYTlJkSGtnUFNBNE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISmxjM05DZEc1TWIyRmtaV1JKZEdWdGMxRjBlU0E5SURRN1hISmNibHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUFnWlhabGJuUnpYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZabWx5YzNSTWIyRmtRV1JrU1hSbGJYTW9LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3Y21WemMwSjBia0ZrWkVsMFpXMXpLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1gyWnBjbk4wVEc5aFpFRmtaRWwwWlcxektDa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQjRhSElnUFNCdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2VHaHlMbTl3Wlc0b0owZEZWQ2NzSUNkb2RIUndjem92TDNOdmJHOTJhVzkyYldGNExtZHBkR2gxWWk1cGJ5OXRjM1J2Y21VdlpHSXVhbk52YmljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCNGFISXVjbVZ6Y0c5dWMyVlVlWEJsSUQwZ1hDSnFjMjl1WENJN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhob2NpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHNiMkZrSnl3Z0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZU0E5SUhob2NpNXlaWE53YjI1elpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFJ2ZEdGc1VYUjVTWFJsYlhNZ1BTQW9aR0YwWVM1c1pXNW5kR2dnTFNBeEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEYwZVVsMFpXMXpJRDBnZEdocGN5NW1hWEp6ZEV4dllXUmxaRWwwWlcxelVYUjVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUkpkR1Z0Y3loMGIzUmhiRkYwZVVsMFpXMXpMQ0J4ZEhsSmRHVnRjeXdnWkdGMFlTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIaG9jaTV6Wlc1a0tDazdYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lGOXdjbVZ6YzBKMGJrRmtaRWwwWlcxektDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibTkzUVdSa1pXUWdQU0IwYUdsekxtWnBjbk4wVEc5aFpHVmtTWFJsYlhOUmRIazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WW5SdUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VHaHlJRDBnYm1WM0lGaE5URWgwZEhCU1pYRjFaWE4wS0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjRhSEl1YjNCbGJpZ25SMFZVSnl3Z0oyaDBkSEJ6T2k4dmMyOXNiM1pwYjNadFlYZ3VaMmwwYUhWaUxtbHZMMjF6ZEc5eVpTOWtZaTVxYzI5dUp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I0YUhJdWNtVnpjRzl1YzJWVWVYQmxJRDBnWENKcWMyOXVYQ0k3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCNGFISXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25iRzloWkNjc0lDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaElEMGdlR2h5TG5KbGMzQnZibk5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFJ2ZEdGc1VYUjVTWFJsYlhNZ1BTQW9aR0YwWVM1c1pXNW5kR2dnTFNBeElDMGdkR2hwY3k1dWIzZEJaR1JsWkNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY1hSNVNYUmxiWE1nUFNCMGFHbHpMbkJ5WlhOelFuUnVURzloWkdWa1NYUmxiWE5SZEhrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkVsMFpXMXpLSFJ2ZEdGc1VYUjVTWFJsYlhNc0lIRjBlVWwwWlcxekxDQmtZWFJoS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJtOTNRV1JrWldRZ0t6MGdkR2hwY3k1d2NtVnpjMEowYmt4dllXUmxaRWwwWlcxelVYUjVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdlR2h5TG5ObGJtUW9LVHRjY2x4dUlDQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ1gyRmtaRWwwWlcxektIUnZkR0ZzVVhSNUxDQmhaR1JSZEhrc0lHUmhkR0VwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlIUnZkR0ZzVVhSNU95QnBJRDRnS0hSdmRHRnNVWFI1SUMwZ1lXUmtVWFI1S1RzZ2FTMHRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElEMDlQU0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1KMGJpNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ0oyNXZibVVuTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCamRYSnlaVzUwU1hSbGJTQTlJSFJvYVhNdWJXRnBia2wwWlcwdVkyeHZibVZPYjJSbEtIUnlkV1VwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2x0WnlBOUlHTjFjbkpsYm5SSmRHVnRMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXdjbTlrZFdOMFgxOXBiV2NuS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBkR3hsSUQwZ1kzVnljbVZ1ZEVsMFpXMHVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuQnliMlIxWTNSZlgzUnBkR3hsTFd4cGJtc25LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWFXTmxJRDBnWTNWeWNtVnVkRWwwWlcwdWNYVmxjbmxUWld4bFkzUnZjaWduTG5CeWIyUjFZM1JmWDNCeWFXTmxKeWtzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTnJaWFJDZEc0Z1BTQmpkWEp5Wlc1MFNYUmxiUzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VjSEp2WkhWamRGOWZaR1YwWVdsc2N5MWlkWFIwYjI0dExXSmhjMnRsZENjcExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlbTl2YlVKMGJpQTlJR04xY25KbGJuUkpkR1Z0TG5GMVpYSjVVMlZzWldOMGIzSW9KeTV3Y205a2RXTjBYMTlrWlhSaGFXeHpMV0oxZEhSdmJpMHRlbTl2YlNjcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdSaGRHRkpkR1Z0SUQwZ1pHRjBZVnRwWFR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHdGxlU0JwYmlCa1lYUmhTWFJsYlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0bGVTQTlQVDBnSjNOeVl5Y3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiV2N1YzJWMFFYUjBjbWxpZFhSbEtDZHpjbU1uTENBb0oybHRaeThuSUNzZ1pHRjBZVWwwWlcxYmEyVjVYU2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHB2YjIxQ2RHNHVaR0YwWVhObGRDNXpjbU1nUFNBb0oybHRaeThuSUNzZ0oySnBaeTBuSUNzZ1pHRjBZVWwwWlcxYmEyVjVYU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHdGxlU0E5UFQwZ0ozUnBkR3hsSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhScGRHeGxMblJsZUhSRGIyNTBaVzUwSUQwZ1pHRjBZVWwwWlcxYmEyVjVYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiV2N1YzJWMFFYUjBjbWxpZFhSbEtDZGhiSFFuTENCa1lYUmhTWFJsYlZ0clpYbGRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2EyVjVJRDA5UFNBbmNISnBZMlVuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKcFkyVXVkR1Y0ZEVOdmJuUmxiblFnUFNBbkpDY2dLeUJrWVhSaFNYUmxiVnRyWlhsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaGMydGxkRUowYmk1a1lYUmhjMlYwTG5CeWFXTmxJRDBnWkdGMFlVbDBaVzFiYTJWNVhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYTJWNUlEMDlQU0FuYVdRbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEVsMFpXMHVaR0YwWVhObGRDNXBaQ0E5SUdSaGRHRkpkR1Z0VzJ0bGVWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0d0bGVTQTlQVDBnSjI5c1pGQnlhV05sSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZiR1JRY21salpWTndZVzRnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2R6Y0dGdUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyeGtVSEpwWTJWVGNHRnVMblJsZUhSRGIyNTBaVzUwSUQwZ0p5UW5JQ3NnWkdGMFlVbDBaVzFiYTJWNVhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJHUlFjbWxqWlZOd1lXNHVZMnhoYzNOTWFYTjBMbUZrWkNnbmNISnZaSFZqZEY5ZmIyeGtMWEJ5YVdObEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JsYzJOeVYzSmhjQ0E5SUdOMWNuSmxiblJKZEdWdExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1d2NtOWtkV04wTFdSbGMyTnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z6WTNKWGNtRndMbWx1YzJWeWRFSmxabTl5WlNodmJHUlFjbWxqWlZOd1lXNHNJR1JsYzJOeVYzSmhjQzVqYUdsc1pISmxibHN5WFNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR3RsZVNBOVBUMGdKMnhoWW1Wc0p5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SSmRHVnRMbU5zWVhOelRHbHpkQzVoWkdRb0ozQnliMlIxWTNSZlgybDBaVzB0TFd4aFltVnNMU2NnS3lCa1lYUmhTWFJsYlZ0clpYbGRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0Z5Y21WdWRDNWhjSEJsYm1SRGFHbHNaQ2hqZFhKeVpXNTBTWFJsYlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dWZUc2lYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1cmdlck1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICBmdW5jdGlvbiBCdXJnZXJNZW51KCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1cmdlck1lbnUpO1xuXG4gICAgICAvLyBET01cbiAgICAgIHRoaXMuYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1cmdlci1idG4nKTtcbiAgICAgIHRoaXMubmF2TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maXhlZC1uYXYgLmhlYWRlci1uYXZfX2xpc3QnKTtcbiAgICAgIHRoaXMubmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maXhlZC1uYXYgLmhlYWRlci1uYXZfX2l0ZW0nKTtcbiAgICAgIHRoaXMuaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xuICAgICAgdGhpcy5tYWluY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluY29udGVudCcpO1xuICAgICAgdGhpcy5mb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9vdGVyJyk7XG5cbiAgICAgIC8vICBldmVudHNcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgfVxuXG4gICBfY3JlYXRlQ2xhc3MoQnVyZ2VyTWVudSwgW3tcbiAgICAgIGtleTogJ19ldmVudHMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICB0aGlzLmJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLm5hdkxpc3QuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLW5hdl9fbGlzdC0tYnVyZ2VyLWFjdGl2ZScpO1xuXG4gICAgICAgICAgICB2YXIgdGltZW91dCA9IDUwO1xuXG4gICAgICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG5cbiAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMubmF2SXRlbVtpXS5jbGFzc0xpc3QuYWRkKCdoZWFkZXItbmF2X19pdGVtLS1idXJnZXItYWN0aXZlJyk7XG4gICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcblxuICAgICAgICAgICAgICAgdGltZW91dCArPSA1MDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXMubmF2SXRlbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgX2xvb3AoaSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ292ZXJmbG93LWhpZGRlbicpO1xuICAgICAgICAgICAgX3RoaXMuaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcbiAgICAgICAgICAgIF90aGlzLm1haW5jb250ZW50LmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcbiAgICAgICAgICAgIF90aGlzLmZvb3Rlci5jbGFzc0xpc3QuYWRkKCdibHVyJyk7XG4gICAgICAgICB9KTtcblxuICAgICAgICAgdGhpcy5uYXZMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICAgICBfdGhpcy5uYXZMaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1uYXZfX2xpc3QtLWJ1cmdlci1hY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5uYXZJdGVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy5uYXZJdGVtW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1uYXZfX2l0ZW0tLWJ1cmdlci1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmZsb3ctaGlkZGVuJyk7XG4gICAgICAgICAgICAgICBfdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYmx1cicpO1xuICAgICAgICAgICAgICAgX3RoaXMubWFpbmNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnYmx1cicpO1xuICAgICAgICAgICAgICAgX3RoaXMuZm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH0pO1xuICAgICAgfVxuICAgfV0pO1xuXG4gICByZXR1cm4gQnVyZ2VyTWVudTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQnVyZ2VyTWVudTtcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWlkWEpuWlhJdGJXVnVkUzVxY3lKZExDSnVZVzFsY3lJNld5SkNkWEpuWlhKTlpXNTFJaXdpWW5SdUlpd2laRzlqZFcxbGJuUWlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eUlpd2libUYyVEdsemRDSXNJbTVoZGtsMFpXMGlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNJaXdpYUdWaFpHVnlJaXdpYldGcGJtTnZiblJsYm5RaUxDSm1iMjkwWlhJaUxDSmZaWFpsYm5Seklpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbU5zWVhOelRHbHpkQ0lzSW1Ga1pDSXNJblJwYldWdmRYUWlMQ0pwSWl3aWMyVjBWR2x0Wlc5MWRDSXNJbXhsYm1kMGFDSXNJbUp2WkhraUxDSmxJaXdpZEdGeVoyVjBJaXdpWTNWeWNtVnVkRlJoY21kbGRDSXNJbkpsYlc5MlpTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3p0SlFVRnhRa0VzVlR0QlFVTnNRaXg1UWtGQll6dEJRVUZCT3p0QlFVTllPMEZCUTBFc1YwRkJTME1zUjBGQlRDeEhRVUZYUXl4VFFVRlRReXhoUVVGVUxFTkJRWFZDTEdGQlFYWkNMRU5CUVZnN1FVRkRRU3hYUVVGTFF5eFBRVUZNTEVkQlFXVkdMRk5CUVZORExHRkJRVlFzUTBGQmRVSXNPRUpCUVhaQ0xFTkJRV1k3UVVGRFFTeFhRVUZMUlN4UFFVRk1MRWRCUVdWSUxGTkJRVk5KTEdkQ1FVRlVMRU5CUVRCQ0xEaENRVUV4UWl4RFFVRm1PMEZCUTBFc1YwRkJTME1zVFVGQlRDeEhRVUZqVEN4VFFVRlRReXhoUVVGVUxFTkJRWFZDTEZOQlFYWkNMRU5CUVdRN1FVRkRRU3hYUVVGTFN5eFhRVUZNTEVkQlFXMUNUaXhUUVVGVFF5eGhRVUZVTEVOQlFYVkNMR05CUVhaQ0xFTkJRVzVDTzBGQlEwRXNWMEZCUzAwc1RVRkJUQ3hIUVVGalVDeFRRVUZUUXl4aFFVRlVMRU5CUVhWQ0xGTkJRWFpDTEVOQlFXUTdPMEZCUlVFN1FVRkRRU3hYUVVGTFR5eFBRVUZNTzBGQlEwWTdPenM3WjBOQlJWTTdRVUZCUVRzN1FVRkRVQ3hqUVVGTFZDeEhRVUZNTEVOQlFWTlZMR2RDUVVGVUxFTkJRVEJDTEU5QlFURkNMRVZCUVcxRExGbEJRVTA3UVVGRGRFTXNhMEpCUVV0UUxFOUJRVXdzUTBGQllWRXNVMEZCWWl4RFFVRjFRa01zUjBGQmRrSXNRMEZCTWtJc2FVTkJRVE5DT3p0QlFVVkJMR2RDUVVGSlF5eFZRVUZWTEVWQlFXUTdPMEZCU0hORExIVkRRVWszUWtNc1EwRktOa0k3TzBGQlRXNURReXd3UWtGQlZ5eFpRVUZOTzBGQlEyUXNkMEpCUVV0WUxFOUJRVXdzUTBGQllWVXNRMEZCWWl4RlFVRm5Ra2dzVTBGQmFFSXNRMEZCTUVKRExFZEJRVEZDTEVOQlFUaENMR2xEUVVFNVFqdEJRVU5HTEdkQ1FVWkVMRVZCUlVkRExFOUJSa2c3TzBGQlNVRkJMREJDUVVGWExFVkJRVmc3UVVGV2JVTTdPMEZCU1hSRExHbENRVUZMTEVsQlFVbERMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1N4TlFVRkxWaXhQUVVGTUxFTkJRV0ZaTEUxQlFXcERMRVZCUVhsRFJpeEhRVUY2UXl4RlFVRTRRenRCUVVGQkxIRkNRVUZ5UTBFc1EwRkJjVU03UVVGUE4wTTdPMEZCUlVSaUxIRkNRVUZUWjBJc1NVRkJWQ3hEUVVGalRpeFRRVUZrTEVOQlFYZENReXhIUVVGNFFpeERRVUUwUWl4cFFrRkJOVUk3UVVGRFFTeHJRa0ZCUzA0c1RVRkJUQ3hEUVVGWlN5eFRRVUZhTEVOQlFYTkNReXhIUVVGMFFpeERRVUV3UWl4TlFVRXhRanRCUVVOQkxHdENRVUZMVEN4WFFVRk1MRU5CUVdsQ1NTeFRRVUZxUWl4RFFVRXlRa01zUjBGQk0wSXNRMEZCSzBJc1RVRkJMMEk3UVVGRFFTeHJRa0ZCUzBvc1RVRkJUQ3hEUVVGWlJ5eFRRVUZhTEVOQlFYTkNReXhIUVVGMFFpeERRVUV3UWl4TlFVRXhRanRCUVVOR0xGVkJha0pFT3p0QlFXMUNRU3hqUVVGTFZDeFBRVUZNTEVOQlFXRlBMR2RDUVVGaUxFTkJRVGhDTEU5QlFUbENMRVZCUVhWRExHRkJRVXM3UVVGRGVrTXNaMEpCUVVsUkxFVkJRVVZETEUxQlFVWXNTMEZCWVVRc1JVRkJSVVVzWVVGQmJrSXNSVUZCYTBNN1FVRkRMMElzY1VKQlFVdHFRaXhQUVVGTUxFTkJRV0ZSTEZOQlFXSXNRMEZCZFVKVkxFMUJRWFpDTEVOQlFUaENMR2xEUVVFNVFqczdRVUZGUVN4dlFrRkJTeXhKUVVGSlVDeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWtzVFVGQlMxWXNUMEZCVEN4RFFVRmhXU3hOUVVGcVF5eEZRVUY1UTBZc1IwRkJla01zUlVGQk9FTTdRVUZETTBNc2QwSkJRVXRXTEU5QlFVd3NRMEZCWVZVc1EwRkJZaXhGUVVGblFrZ3NVMEZCYUVJc1EwRkJNRUpWTEUxQlFURkNMRU5CUVdsRExHbERRVUZxUXp0QlFVTkdPenRCUVVWRWNFSXNkMEpCUVZOblFpeEpRVUZVTEVOQlFXTk9MRk5CUVdRc1EwRkJkMEpWTEUxQlFYaENMRU5CUVN0Q0xHbENRVUV2UWp0QlFVTkJMSEZDUVVGTFppeE5RVUZNTEVOQlFWbExMRk5CUVZvc1EwRkJjMEpWTEUxQlFYUkNMRU5CUVRaQ0xFMUJRVGRDTzBGQlEwRXNjVUpCUVV0a0xGZEJRVXdzUTBGQmFVSkpMRk5CUVdwQ0xFTkJRVEpDVlN4TlFVRXpRaXhEUVVGclF5eE5RVUZzUXp0QlFVTkJMSEZDUVVGTFlpeE5RVUZNTEVOQlFWbEhMRk5CUVZvc1EwRkJjMEpWTEUxQlFYUkNMRU5CUVRaQ0xFMUJRVGRDTzBGQlEwWTdRVUZEU0N4VlFXSkVPMEZCWTBZN096czdPenRyUWtGb1JHbENkRUlzVlR0QlFXbEVjRUlpTENKbWFXeGxJam9pWDJKMWNtZGxjaTF0Wlc1MUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1FuVnlaMlZ5VFdWdWRTQjdYSEpjYmlBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4eVhHNGdJQ0FnSUNBdkx5QkVUMDFjY2x4dUlDQWdJQ0FnZEdocGN5NWlkRzRnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1WW5WeVoyVnlMV0owYmljcE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG01aGRreHBjM1FnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1Wm1sNFpXUXRibUYySUM1b1pXRmtaWEl0Ym1GMlgxOXNhWE4wSnlrN1hISmNiaUFnSUNBZ0lIUm9hWE11Ym1GMlNYUmxiU0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk1bWFYaGxaQzF1WVhZZ0xtaGxZV1JsY2kxdVlYWmZYMmwwWlcwbktUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1b1pXRmtaWElnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YUdWaFpHVnlKeWs3WEhKY2JpQWdJQ0FnSUhSb2FYTXViV0ZwYm1OdmJuUmxiblFnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YldGcGJtTnZiblJsYm5RbktUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1bWIyOTBaWElnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1Wm05dmRHVnlKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQXZMeUFnWlhabGJuUnpYSEpjYmlBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwY3lncE8xeHlYRzRnSUNCOVhISmNibHh5WEc0Z0lDQmZaWFpsYm5SektDa2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxtSjBiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnZEdocGN5NXVZWFpNYVhOMExtTnNZWE56VEdsemRDNWhaR1FvSjJobFlXUmxjaTF1WVhaZlgyeHBjM1F0TFdKMWNtZGxjaTFoWTNScGRtVW5LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJR3hsZENCMGFXMWxiM1YwSUQwZ05UQTdYSEpjYmlBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTV1WVhaSmRHVnRMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dVlYWkpkR1Z0VzJsZExtTnNZWE56VEdsemRDNWhaR1FvSjJobFlXUmxjaTF1WVhaZlgybDBaVzB0TFdKMWNtZGxjaTFoWTNScGRtVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnZEdsdFpXOTFkQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFXMWxiM1YwSUNzOUlEVXdPMXh5WEc0Z0lDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzVqYkdGemMweHBjM1F1WVdSa0tDZHZkbVZ5Wm14dmR5MW9hV1JrWlc0bktUdGNjbHh1SUNBZ0lDQWdJQ0FnZEdocGN5NW9aV0ZrWlhJdVkyeGhjM05NYVhOMExtRmtaQ2duWW14MWNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNCMGFHbHpMbTFoYVc1amIyNTBaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMkpzZFhJbktUdGNjbHh1SUNBZ0lDQWdJQ0FnZEdocGN5NW1iMjkwWlhJdVkyeGhjM05NYVhOMExtRmtaQ2duWW14MWNpY3BPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJSFJvYVhNdWJtRjJUR2x6ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNCcFppQW9aUzUwWVhKblpYUWdQVDA5SUdVdVkzVnljbVZ1ZEZSaGNtZGxkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNWhka3hwYzNRdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnbmFHVmhaR1Z5TFc1aGRsOWZiR2x6ZEMwdFluVnlaMlZ5TFdGamRHbDJaU2NwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG01aGRrbDBaVzB1YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dVlYWkpkR1Z0VzJsZExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyaGxZV1JsY2kxdVlYWmZYMmwwWlcwdExXSjFjbWRsY2kxaFkzUnBkbVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duYjNabGNtWnNiM2N0YUdsa1pHVnVKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHVmhaR1Z5TG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJKc2RYSW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dFlXbHVZMjl1ZEdWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZGliSFZ5SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabTl2ZEdWeUxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oySnNkWEluS1R0Y2NseHVJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnZlZ4eVhHNTlPeUpkZlE9PSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBGaXhlZEhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgIGZ1bmN0aW9uIEZpeGVkSGVhZGVyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpeGVkSGVhZGVyKTtcblxuICAgICAgLy8gRE9NXG4gICAgICB0aGlzLmhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib3R0b20taGVhZGVyJyk7XG5cbiAgICAgIC8vIEFkZGl0aW9uYWwgVmFyc1xuICAgICAgdGhpcy5vZmZzZXQgPSAxMDAwO1xuXG4gICAgICAvLyAgZXZlbnRzXG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgIH1cblxuICAgX2NyZWF0ZUNsYXNzKEZpeGVkSGVhZGVyLCBbe1xuICAgICAga2V5OiAnX2V2ZW50cycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IF90aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgICAgX3RoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcbiAgICAgICAgICAgICAgIF90aGlzLmhlYWRlci5jbGFzc0xpc3QuYWRkKCdib3R0b20taGVhZGVyLS1maXhlZCcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiBfdGhpcy5vZmZzZXQgLyAzICogMikge1xuICAgICAgICAgICAgICAgX3RoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKC0xMDAlKSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgX3RoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JvdHRvbS1oZWFkZXItLWZpeGVkJyk7XG4gICAgICAgICAgICAgICBfdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfSk7XG4gICAgICB9XG4gICB9XSk7XG5cbiAgIHJldHVybiBGaXhlZEhlYWRlcjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRml4ZWRIZWFkZXI7XG47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDltYVhobFpDMW9aV0ZrWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpUm1sNFpXUklaV0ZrWlhJaUxDSm9aV0ZrWlhJaUxDSmtiMk4xYldWdWRDSXNJbkYxWlhKNVUyVnNaV04wYjNJaUxDSnZabVp6WlhRaUxDSmZaWFpsYm5Seklpd2lkMmx1Wkc5M0lpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbkJoWjJWWlQyWm1jMlYwSWl3aWMzUjViR1VpTENKMGNtRnVjMlp2Y20waUxDSmpiR0Z6YzB4cGMzUWlMQ0poWkdRaUxDSnlaVzF2ZG1VaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3U1VGQmNVSkJMRmM3UVVGRGJFSXNNRUpCUVdNN1FVRkJRVHM3UVVGRFdEdEJRVU5CTEZkQlFVdERMRTFCUVV3c1IwRkJZME1zVTBGQlUwTXNZVUZCVkN4RFFVRjFRaXhuUWtGQmRrSXNRMEZCWkRzN1FVRkZRVHRCUVVOQkxGZEJRVXRETEUxQlFVd3NSMEZCWXl4SlFVRmtPenRCUVVWQk8wRkJRMEVzVjBGQlMwTXNUMEZCVER0QlFVTkdPenM3TzJkRFFVVlRPMEZCUVVFN08wRkJRMUJETEdkQ1FVRlBReXhuUWtGQlVDeERRVUYzUWl4UlFVRjRRaXhGUVVGclF5eGhRVUZMTzBGQlEzQkRMR2RDUVVGSlJDeFBRVUZQUlN4WFFVRlFMRWRCUVhGQ0xFMUJRVXRLTEUxQlFUbENMRVZCUVhORE8wRkJRMjVETEhGQ1FVRkxTQ3hOUVVGTUxFTkJRVmxSTEV0QlFWb3NRMEZCYTBKRExGTkJRV3hDTEVkQlFUaENMR1ZCUVRsQ08wRkJRMEVzY1VKQlFVdFVMRTFCUVV3c1EwRkJXVlVzVTBGQldpeERRVUZ6UWtNc1IwRkJkRUlzUTBGQk1FSXNjMEpCUVRGQ08wRkJRMFlzWVVGSVJDeE5RVWRQTEVsQlFVbE9MRTlCUVU5RkxGZEJRVkFzUjBGQmMwSXNUVUZCUzBvc1RVRkJUQ3hIUVVGakxFTkJRV1lzUjBGQmIwSXNRMEZCTjBNc1JVRkJaMFE3UVVGRGNFUXNjVUpCUVV0SUxFMUJRVXdzUTBGQldWRXNTMEZCV2l4RFFVRnJRa01zVTBGQmJFSXNSMEZCT0VJc2JVSkJRVGxDTzBGQlEwWXNZVUZHVFN4TlFVVkJPMEZCUTBvc2NVSkJRVXRVTEUxQlFVd3NRMEZCV1ZVc1UwRkJXaXhEUVVGelFrVXNUVUZCZEVJc1EwRkJOa0lzYzBKQlFUZENPMEZCUTBFc2NVSkJRVXRhTEUxQlFVd3NRMEZCV1ZFc1MwRkJXaXhEUVVGclFrTXNVMEZCYkVJc1IwRkJPRUlzWlVGQk9VSTdRVUZEUmp0QlFVTklMRlZCVmtRN1FVRlhSanM3T3pzN08ydENRWGhDYVVKV0xGYzdRVUY1UW5CQ0lpd2labWxzWlNJNklsOW1hWGhsWkMxb1pXRmtaWEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJHYVhobFpFaGxZV1JsY2lCN1hISmNiaUFnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh5WEc0Z0lDQWdJQ0F2THlCRVQwMWNjbHh1SUNBZ0lDQWdkR2hwY3k1b1pXRmtaWElnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1WW05MGRHOXRMV2hsWVdSbGNpY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdRV1JrYVhScGIyNWhiQ0JXWVhKelhISmNiaUFnSUNBZ0lIUm9hWE11YjJabWMyVjBJRDBnTVRBd01EdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dklDQmxkbVZ1ZEhOY2NseHVJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUnpLQ2s3WEhKY2JpQWdJSDFjY2x4dVhISmNiaUFnSUY5bGRtVnVkSE1vS1NCN1hISmNiaUFnSUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkelkzSnZiR3duTENCbElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ2FXWWdLSGRwYm1SdmR5NXdZV2RsV1U5bVpuTmxkQ0ErSUhSb2FYTXViMlptYzJWMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdWaFpHVnlMbk4wZVd4bExuUnlZVzV6Wm05eWJTQTlJQ2QwY21GdWMyeGhkR1ZaS0RBcEp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWldGa1pYSXVZMnhoYzNOTWFYTjBMbUZrWkNnblltOTBkRzl0TFdobFlXUmxjaTB0Wm1sNFpXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDNhVzVrYjNjdWNHRm5aVmxQWm1aelpYUWdQaUFvZEdocGN5NXZabVp6WlhRZ0x5QXpLU0FxSURJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWldGa1pYSXVjM1I1YkdVdWRISmhibk5tYjNKdElEMGdKM1J5WVc1emJHRjBaVmtvTFRFd01DVXBKenRjY2x4dUlDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9aV0ZrWlhJdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnblltOTBkRzl0TFdobFlXUmxjaTB0Wm1sNFpXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b1pXRmtaWEl1YzNSNWJHVXVkSEpoYm5ObWIzSnRJRDBnSjNSeVlXNXpiR0YwWlZrb01Da25PMXh5WEc0Z0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMHBPMXh5WEc0Z0lDQjlYSEpjYm4wN0lsMTkiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFByb2R1Y3RJdGVtc0V2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcm9kdWN0SXRlbXNFdmVudHMoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9kdWN0SXRlbXNFdmVudHMpO1xuXG4gICAgICAgIC8vIERPTVxuICAgICAgICB0aGlzLml0ZW1zV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWF1dHVyZS1wcm9kdWN0Jyk7XG4gICAgICAgIHRoaXMuYmFza2V0VG90YWxQcmljZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19idXR0b24tdG90YWwtcHJpY2UnKTtcbiAgICAgICAgdGhpcy5iYXNrZXRRdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fYnV0dG9uLXF0eS0tYmFza2V0Jyk7XG4gICAgICAgIHRoaXMuaGVhcnRzUXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItcGFuZWxfX2J1dHRvbi1xdHktLWhlYXJ0Jyk7XG4gICAgICAgIHRoaXMuaW1hZ2Vab29tQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2R1Y3RfX2RldGFpbHMtYnV0dG9uLS16b29tJyk7XG4gICAgICAgIHRoaXMuaW1nWm9vbVdpbmRvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbWctem9vbS13aW5kb3dfX2ltZycpO1xuXG4gICAgICAgIC8vIEFkZGl0aW9uYWwgVmFyc1xuICAgICAgICB0aGlzLnRvdGFsUHJpY2UgPSAwO1xuICAgICAgICB0aGlzLnRvdGFsUXR5ID0gMDtcbiAgICAgICAgdGhpcy50b3RhbExpa2VzID0gMDtcblxuICAgICAgICAvLyAgZXZlbnRzXG4gICAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgICB0aGlzLl9sb2FkQmFza2V0RnJvbUxvY2FsU3RvcmVnZSgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhQcm9kdWN0SXRlbXNFdmVudHMsIFt7XG4gICAgICAgIGtleTogJ19ldmVudHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuaXRlbXNXcmFwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYWRkVG9CYXNrZXQoZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2xpa2UoZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX29wZW5JbWdab29tV2luZG93KGUpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9zdGFycyhlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9jbG9zZUltZ1pvb21XaW5kb3coKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2FkZFRvQmFza2V0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRUb0Jhc2tldChlKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0LnByaWNlIHx8IGUudGFyZ2V0LmRhdGFzZXQucHJpY2UpIHtcblxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRCYXNrZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnSScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QmFza2V0ID0gZS50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRCYXNrZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHV0SW5CYXNrZXRBcnJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcblxuICAgICAgICAgICAgICAgIHB1dEluQmFza2V0QXJyb3cuY2xhc3NMaXN0LmFkZCgnZmEnKTtcbiAgICAgICAgICAgICAgICBwdXRJbkJhc2tldEFycm93LmNsYXNzTGlzdC5hZGQoJ2ZhLWFycm93LWRvd24nKTtcbiAgICAgICAgICAgICAgICBwdXRJbkJhc2tldEFycm93LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgICAgICAgICAgdGFyZ2V0QmFza2V0LmFwcGVuZENoaWxkKHB1dEluQmFza2V0QXJyb3cpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEJhc2tldC5yZW1vdmVDaGlsZCh0YXJnZXRCYXNrZXQuY2hpbGRyZW5bMV0pO1xuICAgICAgICAgICAgICAgIH0sIDIwMCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbVByaWNlID0gdGFyZ2V0QmFza2V0LmRhdGFzZXQucHJpY2U7XG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbFByaWNlICs9ICtpdGVtUHJpY2U7XG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbFF0eSsrO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNrZXRUb3RhbFByaWNlLnRleHRDb250ZW50ID0gJyQnICsgdGhpcy50b3RhbFByaWNlO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFza2V0UXR5LnRleHRDb250ZW50ID0gdGhpcy50b3RhbFF0eTtcblxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdiYXNrZXRUb3RhbFByaWNlJywgdGhpcy50b3RhbFByaWNlKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYmFza2V0UXR5JywgdGhpcy50b3RhbFF0eSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfbG9hZEJhc2tldEZyb21Mb2NhbFN0b3JlZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2xvYWRCYXNrZXRGcm9tTG9jYWxTdG9yZWdlKCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdiYXNrZXRUb3RhbFByaWNlJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsUHJpY2UgPSArbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jhc2tldFRvdGFsUHJpY2UnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2tldFRvdGFsUHJpY2UudGV4dENvbnRlbnQgPSAnJCcgKyB0aGlzLnRvdGFsUHJpY2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYmFza2V0UXR5JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsUXR5ID0gK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCdiYXNrZXRRdHknKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2tldFF0eS50ZXh0Q29udGVudCA9IHRoaXMudG90YWxRdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19saWtlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9saWtlKGUpIHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygncHJvZHVjdF9fZGV0YWlscy1idXR0b24tLWhlYXJ0JykgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwcm9kdWN0X19kZXRhaWxzLWJ1dHRvbi0taGVhcnQnKSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEhlYXJ0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQudGFnTmFtZSA9PT0gJ0knKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEhlYXJ0ID0gZS50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRIZWFydCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRIZWFydC5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2R1Y3RfX2RldGFpbHMtYnV0dG9uLS1oZWFydC1hY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRIZWFydC5jbGFzc0xpc3QucmVtb3ZlKCdwcm9kdWN0X19kZXRhaWxzLWJ1dHRvbi0taGVhcnQtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG90YWxMaWtlcy0tO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYXJ0c1F0eS50ZXh0Q29udGVudCA9IHRoaXMudG90YWxMaWtlcztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRIZWFydC5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0X19kZXRhaWxzLWJ1dHRvbi0taGVhcnQtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG90YWxMaWtlcysrO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYXJ0c1F0eS50ZXh0Q29udGVudCA9IHRoaXMudG90YWxMaWtlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfb3BlbkltZ1pvb21XaW5kb3cnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29wZW5JbWdab29tV2luZG93KGUpIHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygncHJvZHVjdF9fZGV0YWlscy1idXR0b24tLXpvb20nKSB8fCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2R1Y3RfX2RldGFpbHMtYnV0dG9uLS16b29tJykpIHtcblxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRab29tQnRuID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQudGFnTmFtZSA9PT0gJ0knKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFpvb21CdG4gPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFpvb21CdG4gPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaW1nU3JjID0gdGFyZ2V0Wm9vbUJ0bi5kYXRhc2V0LnNyYztcblxuICAgICAgICAgICAgICAgIHRoaXMuaW1nWm9vbVdpbmRvdy5zZXRBdHRyaWJ1dGUoJ3NyYycsIGltZ1NyYyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbWdab29tV2luZG93LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaW1nLXpvb20td2luZG93LS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ292ZXJmbG93LWhpZGRlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY2xvc2VJbWdab29tV2luZG93JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jbG9zZUltZ1pvb21XaW5kb3coZSkge1xuICAgICAgICAgICAgdGhpcy5pbWdab29tV2luZG93LnBhcmVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnaW1nLXpvb20td2luZG93LS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdvdmVyZmxvdy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3N0YXJzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zdGFycyhlKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2R1Y3RfX3JhdGluZy1idXR0b24nKSB8fCBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2R1Y3RfX3JhdGluZy1idXR0b24nKSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldFN0YXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnSScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U3RhciA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U3RhciA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldFN0YXIuY2xhc3NMaXN0LmFkZCgncHJvZHVjdF9fcmF0aW5nLWJ1dHRvbi0tYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U3Rhci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmIHRhcmdldFN0YXIucHJldmlvdXNFbGVtZW50U2libGluZy5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2R1Y3RfX3JhdGluZy1idXR0b24tLWFjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUNsYXNzRm9yUHJldmlvdXNTdGFycyh0YXJnZXRTdGFyLCAncHJvZHVjdF9fcmF0aW5nLWJ1dHRvbi0tYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzRm9yTmV4dFN0YXJzKHRhcmdldFN0YXIsICdwcm9kdWN0X19yYXRpbmctYnV0dG9uLS1hY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2FkZENsYXNzRm9yTmV4dFN0YXJzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRDbGFzc0Zvck5leHRTdGFycyhlbGVtLCBhY3RpdmVDbGFzcykge1xuICAgICAgICAgICAgd2hpbGUgKGVsZW0gPSBlbGVtLm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChhY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfcmVtb3ZlQ2xhc3NGb3JQcmV2aW91c1N0YXJzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmVDbGFzc0ZvclByZXZpb3VzU3RhcnMoZWxlbSwgYWN0aXZlQ2xhc3MpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShhY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICB9IHdoaWxlIChlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucyhhY3RpdmVDbGFzcykpO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFByb2R1Y3RJdGVtc0V2ZW50cztcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUHJvZHVjdEl0ZW1zRXZlbnRzO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5d2NtOWtkV04wTFdsMFpXMXpMV1YyWlc1MGN5NXFjeUpkTENKdVlXMWxjeUk2V3lKUWNtOWtkV04wU1hSbGJYTkZkbVZ1ZEhNaUxDSnBkR1Z0YzFkeVlYQWlMQ0prYjJOMWJXVnVkQ0lzSW5GMVpYSjVVMlZzWldOMGIzSWlMQ0ppWVhOclpYUlViM1JoYkZCeWFXTmxJaXdpWW1GemEyVjBVWFI1SWl3aWFHVmhjblJ6VVhSNUlpd2lhVzFoWjJWYWIyOXRRblJ1SWl3aWFXMW5XbTl2YlZkcGJtUnZkeUlzSW5SdmRHRnNVSEpwWTJVaUxDSjBiM1JoYkZGMGVTSXNJblJ2ZEdGc1RHbHJaWE1pTENKZlpYWmxiblJ6SWl3aVgyeHZZV1JDWVhOclpYUkdjbTl0VEc5allXeFRkRzl5WldkbElpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbVVpTENKZllXUmtWRzlDWVhOclpYUWlMQ0pmYkdsclpTSXNJbDl2Y0dWdVNXMW5XbTl2YlZkcGJtUnZkeUlzSWw5emRHRnljeUlzSWw5amJHOXpaVWx0WjFwdmIyMVhhVzVrYjNjaUxDSjBZWEpuWlhRaUxDSndZWEpsYm5SRmJHVnRaVzUwSWl3aVpHRjBZWE5sZENJc0luQnlhV05sSWl3aWRHRnlaMlYwUW1GemEyVjBJaXdpZEdGblRtRnRaU0lzSW5CMWRFbHVRbUZ6YTJWMFFYSnliM2NpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWTJ4aGMzTk1hWE4wSWl3aVlXUmtJaXdpYzJWMFFYUjBjbWxpZFhSbElpd2lZWEJ3Wlc1a1EyaHBiR1FpTENKelpYUlVhVzFsYjNWMElpd2ljbVZ0YjNabFEyaHBiR1FpTENKamFHbHNaSEpsYmlJc0ltbDBaVzFRY21salpTSXNJblJsZUhSRGIyNTBaVzUwSWl3aWJHOWpZV3hUZEc5eVlXZGxJaXdpYzJWMFNYUmxiU0lzSW1kbGRFbDBaVzBpTENKamIyNTBZV2x1Y3lJc0luUmhjbWRsZEVobFlYSjBJaXdpY21WdGIzWmxJaXdpZEdGeVoyVjBXbTl2YlVKMGJpSXNJbWx0WjFOeVl5SXNJbk55WXlJc0ltSnZaSGtpTENKamRYSnlaVzUwVkdGeVoyVjBJaXdpZEdGeVoyVjBVM1JoY2lJc0luQnlaWFpwYjNWelJXeGxiV1Z1ZEZOcFlteHBibWNpTENKZmNtVnRiM1psUTJ4aGMzTkdiM0pRY21WMmFXOTFjMU4wWVhKeklpd2lYMkZrWkVOc1lYTnpSbTl5VG1WNGRGTjBZWEp6SWl3aVpXeGxiU0lzSW1GamRHbDJaVU5zWVhOeklpd2libVY0ZEVWc1pXMWxiblJUYVdKc2FXNW5JbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN08wbEJRWEZDUVN4clFqdEJRVU5xUWl4clEwRkJZenRCUVVGQk96dEJRVVZXTzBGQlEwRXNZVUZCUzBNc1UwRkJUQ3hIUVVGcFFrTXNVMEZCVTBNc1lVRkJWQ3hEUVVGMVFpeHRRa0ZCZGtJc1EwRkJha0k3UVVGRFFTeGhRVUZMUXl4blFrRkJUQ3hIUVVGM1FrWXNVMEZCVTBNc1lVRkJWQ3hEUVVGMVFpeHBRMEZCZGtJc1EwRkJlRUk3UVVGRFFTeGhRVUZMUlN4VFFVRk1MRWRCUVdsQ1NDeFRRVUZUUXl4aFFVRlVMRU5CUVhWQ0xHbERRVUYyUWl4RFFVRnFRanRCUVVOQkxHRkJRVXRITEZOQlFVd3NSMEZCYVVKS0xGTkJRVk5ETEdGQlFWUXNRMEZCZFVJc1owTkJRWFpDTEVOQlFXcENPMEZCUTBFc1lVRkJTMGtzV1VGQlRDeEhRVUZ2UWt3c1UwRkJVME1zWVVGQlZDeERRVUYxUWl4blEwRkJka0lzUTBGQmNFSTdRVUZEUVN4aFFVRkxTeXhoUVVGTUxFZEJRWEZDVGl4VFFVRlRReXhoUVVGVUxFTkJRWFZDTEhWQ1FVRjJRaXhEUVVGeVFqczdRVUZGUVR0QlFVTkJMR0ZCUVV0TkxGVkJRVXdzUjBGQmEwSXNRMEZCYkVJN1FVRkRRU3hoUVVGTFF5eFJRVUZNTEVkQlFXZENMRU5CUVdoQ08wRkJRMEVzWVVGQlMwTXNWVUZCVEN4SFFVRnJRaXhEUVVGc1FqczdRVUZGUVR0QlFVTkJMR0ZCUVV0RExFOUJRVXc3UVVGRFFTeGhRVUZMUXl3eVFrRkJURHRCUVVOSU96czdPMnREUVVWVE8wRkJRVUU3TzBGQlEwNHNhVUpCUVV0YUxGTkJRVXdzUTBGQlpXRXNaMEpCUVdZc1EwRkJaME1zVDBGQmFFTXNSVUZCZVVNc1ZVRkJRME1zUTBGQlJDeEZRVUZQTzBGQlF6VkRMSE5DUVVGTFF5eFpRVUZNTEVOQlFXdENSQ3hEUVVGc1FqdEJRVU5CTEhOQ1FVRk5SU3hMUVVGT0xFTkJRVmxHTEVOQlFWbzdRVUZEUVN4elFrRkJTMGNzYTBKQlFVd3NRMEZCZDBKSUxFTkJRWGhDTzBGQlEwRXNjMEpCUVV0SkxFMUJRVXdzUTBGQldVb3NRMEZCV2p0QlFVTklMR0ZCVEVRN08wRkJUMEVzYVVKQlFVdExMRzFDUVVGTU8wRkJRMGc3T3p0eFEwRkZXVXdzUXl4RlFVRkhPMEZCUTFvc1owSkJRVWxCTEVWQlFVVk5MRTFCUVVZc1EwRkJVME1zWVVGQlZDeERRVUYxUWtNc1QwRkJka0lzUTBGQkswSkRMRXRCUVM5Q0xFbEJRWGREVkN4RlFVRkZUU3hOUVVGR0xFTkJRVk5GTEU5QlFWUXNRMEZCYVVKRExFdEJRVGRFTEVWQlFXOUZPenRCUVVWb1JTeHZRa0ZCU1VNc1pVRkJaU3hKUVVGdVFqdEJRVU5CTEc5Q1FVRkpWaXhGUVVGRlRTeE5RVUZHTEVOQlFWTkxMRTlCUVZRc1MwRkJjVUlzUjBGQmVrSXNSVUZCT0VJN1FVRkRNVUpFTEcxRFFVRmxWaXhGUVVGRlRTeE5RVUZHTEVOQlFWTkRMR0ZCUVhoQ08wRkJRMGdzYVVKQlJrUXNUVUZGVHp0QlFVTklSeXh0UTBGQlpWWXNSVUZCUlUwc1RVRkJha0k3UVVGRFNEczdRVUZGUkN4dlFrRkJTVTBzYlVKQlFXMUNla0lzVTBGQlV6QkNMR0ZCUVZRc1EwRkJkVUlzUjBGQmRrSXNRMEZCZGtJN08wRkJSVUZFTEdsRFFVRnBRa1VzVTBGQmFrSXNRMEZCTWtKRExFZEJRVE5DTEVOQlFTdENMRWxCUVM5Q08wRkJRMEZJTEdsRFFVRnBRa1VzVTBGQmFrSXNRMEZCTWtKRExFZEJRVE5DTEVOQlFTdENMR1ZCUVM5Q08wRkJRMEZJTEdsRFFVRnBRa2tzV1VGQmFrSXNRMEZCT0VJc1lVRkJPVUlzUlVGQk5rTXNUVUZCTjBNN08wRkJSVUZPTERaQ1FVRmhUeXhYUVVGaUxFTkJRWGxDVEN4blFrRkJla0k3TzBGQlJVRk5MREpDUVVGWExGbEJRVTA3UVVGRFlsSXNhVU5CUVdGVExGZEJRV0lzUTBGQmVVSlVMR0ZCUVdGVkxGRkJRV0lzUTBGQmMwSXNRMEZCZEVJc1EwRkJla0k3UVVGRFNDeHBRa0ZHUkN4RlFVVkhMRWRCUmtnN08wRkJTVUVzYjBKQlFVbERMRmxCUVZsWUxHRkJRV0ZHTEU5QlFXSXNRMEZCY1VKRExFdEJRWEpETzBGQlEwRXNjVUpCUVV0bUxGVkJRVXdzU1VGQmJVSXNRMEZCUXpKQ0xGTkJRWEJDTzBGQlEwRXNjVUpCUVVzeFFpeFJRVUZNT3p0QlFVVkJMSEZDUVVGTFRpeG5Ra0ZCVEN4RFFVRnpRbWxETEZkQlFYUkNMRWRCUVc5RExFMUJRVTBzUzBGQlN6VkNMRlZCUVM5RE8wRkJRMEVzY1VKQlFVdEtMRk5CUVV3c1EwRkJaV2RETEZkQlFXWXNSMEZCTmtJc1MwRkJTek5DTEZGQlFXeERPenRCUVVWQk5FSXNOa0pCUVdGRExFOUJRV0lzUTBGQmNVSXNhMEpCUVhKQ0xFVkJRWGxETEV0QlFVczVRaXhWUVVFNVF6dEJRVU5CTmtJc05rSkJRV0ZETEU5QlFXSXNRMEZCY1VJc1YwRkJja0lzUlVGQmEwTXNTMEZCU3pkQ0xGRkJRWFpETzBGQlEwZzdRVUZEU2pzN08zTkVRVVUyUWp0QlFVTXhRaXhuUWtGQlNUUkNMR0ZCUVdGRkxFOUJRV0lzUTBGQmNVSXNhMEpCUVhKQ0xFTkJRVW9zUlVGQk9FTTdRVUZETVVNc2NVSkJRVXN2UWl4VlFVRk1MRWRCUVd0Q0xFTkJRVU0yUWl4aFFVRmhSU3hQUVVGaUxFTkJRWEZDTEd0Q1FVRnlRaXhEUVVGdVFqdEJRVU5CTEhGQ1FVRkxjRU1zWjBKQlFVd3NRMEZCYzBKcFF5eFhRVUYwUWl4SFFVRnZReXhOUVVGTkxFdEJRVXMxUWl4VlFVRXZRenRCUVVOSU96dEJRVVZFTEdkQ1FVRkpOa0lzWVVGQllVVXNUMEZCWWl4RFFVRnhRaXhYUVVGeVFpeERRVUZLTEVWQlFYVkRPMEZCUTI1RExIRkNRVUZMT1VJc1VVRkJUQ3hIUVVGblFpeERRVUZETkVJc1lVRkJZVVVzVDBGQllpeERRVUZ4UWl4WFFVRnlRaXhEUVVGcVFqdEJRVU5CTEhGQ1FVRkxia01zVTBGQlRDeERRVUZsWjBNc1YwRkJaaXhIUVVFMlFpeExRVUZMTTBJc1VVRkJiRU03UVVGRFNEdEJRVU5LT3pzN09FSkJSVXRMTEVNc1JVRkJSenRCUVVOTUxHZENRVUZKUVN4RlFVRkZUU3hOUVVGR0xFTkJRVk5ETEdGQlFWUXNRMEZCZFVKUExGTkJRWFpDTEVOQlFXbERXU3hSUVVGcVF5eERRVUV3UXl4blEwRkJNVU1zUzBGQkswVXhRaXhGUVVGRlRTeE5RVUZHTEVOQlFWTlJMRk5CUVZRc1EwRkJiVUpaTEZGQlFXNUNMRU5CUVRSQ0xHZERRVUUxUWl4RFFVRnVSaXhGUVVGclNqczdRVUZGT1Vrc2IwSkJRVWxETEdOQlFXTXNTVUZCYkVJN1FVRkRRU3h2UWtGQlNUTkNMRVZCUVVWTkxFMUJRVVlzUTBGQlUwc3NUMEZCVkN4TFFVRnhRaXhIUVVGNlFpeEZRVUU0UWp0QlFVTXhRbWRDTEd0RFFVRmpNMElzUlVGQlJVMHNUVUZCUml4RFFVRlRReXhoUVVGMlFqdEJRVU5JTEdsQ1FVWkVMRTFCUlU4N1FVRkRTRzlDTEd0RFFVRmpNMElzUlVGQlJVMHNUVUZCYUVJN1FVRkRTRHM3UVVGRlJDeHZRa0ZCU1hGQ0xGbEJRVmxpTEZOQlFWb3NRMEZCYzBKWkxGRkJRWFJDTEVOQlFTdENMSFZEUVVFdlFpeERRVUZLTEVWQlFUWkZPMEZCUTNwRlF5eG5RMEZCV1dJc1UwRkJXaXhEUVVGelFtTXNUVUZCZEVJc1EwRkJOa0lzZFVOQlFUZENPMEZCUTBFc2VVSkJRVXRvUXl4VlFVRk1PMEZCUTBFc2VVSkJRVXRNTEZOQlFVd3NRMEZCWlN0Q0xGZEJRV1lzUjBGQk5rSXNTMEZCU3pGQ0xGVkJRV3hETzBGQlEwZ3NhVUpCU2tRc1RVRkpUenRCUVVOSUswSXNaME5CUVZsaUxGTkJRVm9zUTBGQmMwSkRMRWRCUVhSQ0xFTkJRVEJDTEhWRFFVRXhRanRCUVVOQkxIbENRVUZMYmtJc1ZVRkJURHRCUVVOQkxIbENRVUZMVEN4VFFVRk1MRU5CUVdVclFpeFhRVUZtTEVkQlFUWkNMRXRCUVVzeFFpeFZRVUZzUXp0QlFVTklPMEZCUTBvN1FVRkRTanM3T3pKRFFVVnJRa2tzUXl4RlFVRkhPMEZCUTJ4Q0xHZENRVUZKUVN4RlFVRkZUU3hOUVVGR0xFTkJRVk5ETEdGQlFWUXNRMEZCZFVKUExGTkJRWFpDTEVOQlFXbERXU3hSUVVGcVF5eERRVUV3UXl3clFrRkJNVU1zUzBGQk9FVXhRaXhGUVVGRlRTeE5RVUZHTEVOQlFWTlJMRk5CUVZRc1EwRkJiVUpaTEZGQlFXNUNMRU5CUVRSQ0xDdENRVUUxUWl4RFFVRnNSaXhGUVVGblNqczdRVUZGTlVrc2IwSkJRVWxITEdkQ1FVRm5RaXhKUVVGd1FqdEJRVU5CTEc5Q1FVRkpOMElzUlVGQlJVMHNUVUZCUml4RFFVRlRTeXhQUVVGVUxFdEJRWEZDTEVkQlFYcENMRVZCUVRoQ08wRkJRekZDYTBJc2IwTkJRV2RDTjBJc1JVRkJSVTBzVFVGQlJpeERRVUZUUXl4aFFVRjZRanRCUVVOSUxHbENRVVpFTEUxQlJVODdRVUZEU0hOQ0xHOURRVUZuUWpkQ0xFVkJRVVZOTEUxQlFXeENPMEZCUTBnN08wRkJSVVFzYjBKQlFVbDNRaXhUUVVGVFJDeGpRVUZqY2tJc1QwRkJaQ3hEUVVGelFuVkNMRWRCUVc1RE96dEJRVVZCTEhGQ1FVRkxkRU1zWVVGQlRDeERRVUZ0UW5WQ0xGbEJRVzVDTEVOQlFXZERMRXRCUVdoRExFVkJRWFZEWXl4TlFVRjJRenRCUVVOQkxIRkNRVUZMY2tNc1lVRkJUQ3hEUVVGdFFtTXNZVUZCYmtJc1EwRkJhVU5QTEZOQlFXcERMRU5CUVRKRFF5eEhRVUV6UXl4RFFVRXJReXg1UWtGQkwwTTdRVUZEUVRWQ0xIbENRVUZUTmtNc1NVRkJWQ3hEUVVGamJFSXNVMEZCWkN4RFFVRjNRa01zUjBGQmVFSXNRMEZCTkVJc2FVSkJRVFZDTzBGQlEwZzdRVUZEU2pzN096UkRRVVZ0UW1Zc1F5eEZRVUZITzBGQlEyNUNMR2xDUVVGTFVDeGhRVUZNTEVOQlFXMUNZeXhoUVVGdVFpeERRVUZwUTFJc1owSkJRV3BETEVOQlFXdEVMRTlCUVd4RUxFVkJRVEpFTEdGQlFVczdRVUZETlVRc2IwSkJRVWxETEVWQlFVVk5MRTFCUVU0c1JVRkJZenRCUVVOV1RpeHpRa0ZCUldsRExHRkJRVVlzUTBGQlowSnVRaXhUUVVGb1FpeERRVUV3UW1Nc1RVRkJNVUlzUTBGQmFVTXNlVUpCUVdwRE8wRkJRMEY2UXl3MlFrRkJVelpETEVsQlFWUXNRMEZCWTJ4Q0xGTkJRV1FzUTBGQmQwSmpMRTFCUVhoQ0xFTkJRU3RDTEdsQ1FVRXZRanRCUVVOSU8wRkJRMG9zWVVGTVJEdEJRVTFJT3pzN0swSkJSVTAxUWl4RExFVkJRVWM3UVVGRFRpeG5Ra0ZCU1VFc1JVRkJSVTBzVFVGQlJpeERRVUZUUXl4aFFVRlVMRU5CUVhWQ1R5eFRRVUYyUWl4RFFVRnBRMWtzVVVGQmFrTXNRMEZCTUVNc2QwSkJRVEZETEV0QlFYVkZNVUlzUlVGQlJVMHNUVUZCUml4RFFVRlRVU3hUUVVGVUxFTkJRVzFDV1N4UlFVRnVRaXhEUVVFMFFpeDNRa0ZCTlVJc1EwRkJNMFVzUlVGQmEwazdPMEZCUlRsSUxHOUNRVUZKVVN4aFFVRmhMRWxCUVdwQ08wRkJRMEVzYjBKQlFVbHNReXhGUVVGRlRTeE5RVUZHTEVOQlFWTkxMRTlCUVZRc1MwRkJjVUlzUjBGQmVrSXNSVUZCT0VJN1FVRkRNVUoxUWl4cFEwRkJZV3hETEVWQlFVVk5MRTFCUVVZc1EwRkJVME1zWVVGQmRFSTdRVUZEU0N4cFFrRkdSQ3hOUVVWUE8wRkJRMGd5UWl4cFEwRkJZV3hETEVWQlFVVk5MRTFCUVdZN1FVRkRTRHM3UVVGRlJEUkNMREpDUVVGWGNFSXNVMEZCV0N4RFFVRnhRa01zUjBGQmNrSXNRMEZCZVVJc1owTkJRWHBDT3p0QlFVVkJMRzlDUVVGSmJVSXNWMEZCVjBNc2MwSkJRVmdzU1VGQmNVTkVMRmRCUVZkRExITkNRVUZZTEVOQlFXdERja0lzVTBGQmJFTXNRMEZCTkVOWkxGRkJRVFZETEVOQlFYRkVMR2REUVVGeVJDeERRVUY2UXl4RlFVRm5TVHRCUVVNMVNDeDVRa0ZCUzFVc05FSkJRVXdzUTBGQmEwTkdMRlZCUVd4RExFVkJRVGhETEdkRFFVRTVRenRCUVVOSU96dEJRVVZFTEhGQ1FVRkxSeXh4UWtGQlRDeERRVUV5UWtnc1ZVRkJNMElzUlVGQmRVTXNaME5CUVhaRE8wRkJRMGc3UVVGRFNqczdPemhEUVVWeFFra3NTU3hGUVVGTlF5eFhMRVZCUVdFN1FVRkRja01zYlVKQlFVOUVMRTlCUVU5QkxFdEJRVXRGTEd0Q1FVRnVRaXhGUVVGMVF6dEJRVU51UTBZc2NVSkJRVXQ0UWl4VFFVRk1MRU5CUVdWRExFZEJRV1lzUTBGQmJVSjNRaXhYUVVGdVFqdEJRVU5JTzBGQlEwbzdPenR4UkVGRk5FSkVMRWtzUlVGQlRVTXNWeXhGUVVGaE8wRkJRelZETEdWQlFVYzdRVUZCUlVRc2RVSkJRVTlCTEV0QlFVdElMSE5DUVVGYU8wRkJRMFJITEhGQ1FVRkxlRUlzVTBGQlRDeERRVUZsWXl4TlFVRm1MRU5CUVhOQ1Z5eFhRVUYwUWp0QlFVTkRMR0ZCUmt3c1VVRkZZVVFzUzBGQlMwZ3NjMEpCUVV3c1NVRkJLMEpITEV0QlFVdElMSE5DUVVGTUxFTkJRVFJDY2tJc1UwRkJOVUlzUTBGQmMwTlpMRkZCUVhSRExFTkJRU3REWVN4WFFVRXZReXhEUVVZMVF6dEJRVWRJT3pzN096czdhMEpCTjBwblFuUkVMR3RDTzBGQk9FcHdRaUlzSW1acGJHVWlPaUpmY0hKdlpIVmpkQzFwZEdWdGN5MWxkbVZ1ZEhNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCUWNtOWtkV04wU1hSbGJYTkZkbVZ1ZEhNZ2UxeHlYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVSUFRWeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWFYUmxiWE5YY21Gd0lEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxtWmxZWFYwZFhKbExYQnliMlIxWTNRbktUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtSmhjMnRsZEZSdmRHRnNVSEpwWTJVZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWRYTmxjaTF3WVc1bGJGOWZZblYwZEc5dUxYUnZkR0ZzTFhCeWFXTmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVpWVhOclpYUlJkSGtnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1ZFhObGNpMXdZVzVsYkY5ZlluVjBkRzl1TFhGMGVTMHRZbUZ6YTJWMEp5azdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NW9aV0Z5ZEhOUmRIa2dQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VkWE5sY2kxd1lXNWxiRjlmWW5WMGRHOXVMWEYwZVMwdGFHVmhjblFuS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdFlXZGxXbTl2YlVKMGJpQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXdjbTlrZFdOMFgxOWtaWFJoYVd4ekxXSjFkSFJ2YmkwdGVtOXZiU2NwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YVcxbldtOXZiVmRwYm1SdmR5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXBiV2N0ZW05dmJTMTNhVzVrYjNkZlgybHRaeWNwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCQlpHUnBkR2x2Ym1Gc0lGWmhjbk5jY2x4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2ZEdGc1VISnBZMlVnUFNBd08xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOTBZV3hSZEhrZ1BTQXdPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzkwWVd4TWFXdGxjeUE5SURBN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklDQmxkbVZ1ZEhOY2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGRtVnVkSE1vS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyRmtRbUZ6YTJWMFJuSnZiVXh2WTJGc1UzUnZjbVZuWlNncE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJRjlsZG1WdWRITW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwZEdWdGMxZHlZWEF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0FvWlNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUlViMEpoYzJ0bGRDaGxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k0Z1gyeHBhMlVvWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjl3Wlc1SmJXZGFiMjl0VjJsdVpHOTNLR1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5Y3lobEtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2YzJWSmJXZGFiMjl0VjJsdVpHOTNLQ2s3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lGOWhaR1JVYjBKaGMydGxkQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dVdWRHRnlaMlYwTG5CaGNtVnVkRVZzWlcxbGJuUXVaR0YwWVhObGRDNXdjbWxqWlNCOGZDQmxMblJoY21kbGRDNWtZWFJoYzJWMExuQnlhV05sS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEdGeVoyVjBRbUZ6YTJWMElEMGdiblZzYkR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVXVkR0Z5WjJWMExuUmhaMDVoYldVZ1BUMDlJQ2RKSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFFtRnphMlYwSUQwZ1pTNTBZWEpuWlhRdWNHRnlaVzUwUld4bGJXVnVkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRFSmhjMnRsZENBOUlHVXVkR0Z5WjJWME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0hWMFNXNUNZWE5yWlhSQmNuSnZkeUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMmtuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQjFkRWx1UW1GemEyVjBRWEp5YjNjdVkyeGhjM05NYVhOMExtRmtaQ2duWm1FbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NIVjBTVzVDWVhOclpYUkJjbkp2ZHk1amJHRnpjMHhwYzNRdVlXUmtLQ2RtWVMxaGNuSnZkeTFrYjNkdUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQjFkRWx1UW1GemEyVjBRWEp5YjNjdWMyVjBRWFIwY21saWRYUmxLQ2RoY21saExXaHBaR1JsYmljc0lDZDBjblZsSnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhSQ1lYTnJaWFF1WVhCd1pXNWtRMmhwYkdRb2NIVjBTVzVDWVhOclpYUkJjbkp2ZHlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRFSmhjMnRsZEM1eVpXMXZkbVZEYUdsc1pDaDBZWEpuWlhSQ1lYTnJaWFF1WTJocGJHUnlaVzViTVYwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQXlNREFwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2wwWlcxUWNtbGpaU0E5SUhSaGNtZGxkRUpoYzJ0bGRDNWtZWFJoYzJWMExuQnlhV05sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnZkR0ZzVUhKcFkyVWdLejBnSzJsMFpXMVFjbWxqWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiM1JoYkZGMGVTc3JPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWlZWE5yWlhSVWIzUmhiRkJ5YVdObExuUmxlSFJEYjI1MFpXNTBJRDBnSnlRbklDc2dkR2hwY3k1MGIzUmhiRkJ5YVdObE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUpoYzJ0bGRGRjBlUzUwWlhoMFEyOXVkR1Z1ZENBOUlIUm9hWE11ZEc5MFlXeFJkSGs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc2IyTmhiRk4wYjNKaFoyVXVjMlYwU1hSbGJTZ25ZbUZ6YTJWMFZHOTBZV3hRY21salpTY3NJSFJvYVhNdWRHOTBZV3hRY21salpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMkZzVTNSdmNtRm5aUzV6WlhSSmRHVnRLQ2RpWVhOclpYUlJkSGtuTENCMGFHbHpMblJ2ZEdGc1VYUjVLVnh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJRjlzYjJGa1FtRnphMlYwUm5KdmJVeHZZMkZzVTNSdmNtVm5aU2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYkc5allXeFRkRzl5WVdkbExtZGxkRWwwWlcwb0oySmhjMnRsZEZSdmRHRnNVSEpwWTJVbktTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdmRHRnNVSEpwWTJVZ1BTQXJiRzlqWVd4VGRHOXlZV2RsTG1kbGRFbDBaVzBvSjJKaGMydGxkRlJ2ZEdGc1VISnBZMlVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWlZWE5yWlhSVWIzUmhiRkJ5YVdObExuUmxlSFJEYjI1MFpXNTBJRDBnSnlRbklDc2dkR2hwY3k1MGIzUmhiRkJ5YVdObE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0d4dlkyRnNVM1J2Y21GblpTNW5aWFJKZEdWdEtDZGlZWE5yWlhSUmRIa25LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnZkR0ZzVVhSNUlEMGdLMnh2WTJGc1UzUnZjbUZuWlM1blpYUkpkR1Z0S0NkaVlYTnJaWFJSZEhrbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpWVhOclpYUlJkSGt1ZEdWNGRFTnZiblJsYm5RZ1BTQjBhR2x6TG5SdmRHRnNVWFI1TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnWDJ4cGEyVW9aU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsTG5SaGNtZGxkQzV3WVhKbGJuUkZiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5Z25jSEp2WkhWamRGOWZaR1YwWVdsc2N5MWlkWFIwYjI0dExXaGxZWEowSnlrZ2ZId2daUzUwWVhKblpYUXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLQ2R3Y205a2RXTjBYMTlrWlhSaGFXeHpMV0oxZEhSdmJpMHRhR1ZoY25RbktTa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUmhjbWRsZEVobFlYSjBJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1V1ZEdGeVoyVjBMblJoWjA1aGJXVWdQVDA5SUNkSkp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBTR1ZoY25RZ1BTQmxMblJoY21kbGRDNXdZWEpsYm5SRmJHVnRaVzUwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBTR1ZoY25RZ1BTQmxMblJoY21kbGREdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSaGNtZGxkRWhsWVhKMExtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5Z25jSEp2WkhWamRGOWZaR1YwWVdsc2N5MWlkWFIwYjI0dExXaGxZWEowTFdGamRHbDJaU2NwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhSSVpXRnlkQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2R3Y205a2RXTjBYMTlrWlhSaGFXeHpMV0oxZEhSdmJpMHRhR1ZoY25RdFlXTjBhWFpsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdmRHRnNUR2xyWlhNdExUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHVmhjblJ6VVhSNUxuUmxlSFJEYjI1MFpXNTBJRDBnZEdocGN5NTBiM1JoYkV4cGEyVnpPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFNHVmhjblF1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25jSEp2WkhWamRGOWZaR1YwWVdsc2N5MWlkWFIwYjI0dExXaGxZWEowTFdGamRHbDJaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYjNSaGJFeHBhMlZ6S3lzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1obFlYSjBjMUYwZVM1MFpYaDBRMjl1ZEdWdWRDQTlJSFJvYVhNdWRHOTBZV3hNYVd0bGN6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lGOXZjR1Z1U1cxbldtOXZiVmRwYm1SdmR5aGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1V1ZEdGeVoyVjBMbkJoY21WdWRFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektDZHdjbTlrZFdOMFgxOWtaWFJoYVd4ekxXSjFkSFJ2YmkwdGVtOXZiU2NwSUh4OElHVXVkR0Z5WjJWMExtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5Z25jSEp2WkhWamRGOWZaR1YwWVdsc2N5MWlkWFIwYjI0dExYcHZiMjBuS1NrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSaGNtZGxkRnB2YjIxQ2RHNGdQU0J1ZFd4c08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzUwWVhKblpYUXVkR0ZuVG1GdFpTQTlQVDBnSjBrbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUmFiMjl0UW5SdUlEMGdaUzUwWVhKblpYUXVjR0Z5Wlc1MFJXeGxiV1Z1ZER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRnB2YjIxQ2RHNGdQU0JsTG5SaGNtZGxkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbHRaMU55WXlBOUlIUmhjbWRsZEZwdmIyMUNkRzR1WkdGMFlYTmxkQzV6Y21NN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdFoxcHZiMjFYYVc1a2IzY3VjMlYwUVhSMGNtbGlkWFJsS0NkemNtTW5MQ0JwYldkVGNtTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdFoxcHZiMjFYYVc1a2IzY3VjR0Z5Wlc1MFJXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLQ2RwYldjdGVtOXZiUzEzYVc1a2IzY3RMV0ZqZEdsMlpTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWliMlI1TG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMjkyWlhKbWJHOTNMV2hwWkdSbGJpY3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdYMk5zYjNObFNXMW5XbTl2YlZkcGJtUnZkeWhsS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1cGJXZGFiMjl0VjJsdVpHOTNMbkJoY21WdWRFVnNaVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCbElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dVdWRHRnlaMlYwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbU4xY25KbGJuUlVZWEpuWlhRdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnbmFXMW5MWHB2YjIwdGQybHVaRzkzTFMxaFkzUnBkbVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duYjNabGNtWnNiM2N0YUdsa1pHVnVKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnWDNOMFlYSnpLR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWlM1MFlYSm5aWFF1Y0dGeVpXNTBSV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9KM0J5YjJSMVkzUmZYM0poZEdsdVp5MWlkWFIwYjI0bktTQjhmQ0JsTG5SaGNtZGxkQzVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vSjNCeWIyUjFZM1JmWDNKaGRHbHVaeTFpZFhSMGIyNG5LU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFJoY21kbGRGTjBZWElnUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlM1MFlYSm5aWFF1ZEdGblRtRnRaU0E5UFQwZ0owa25LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJUZEdGeUlEMGdaUzUwWVhKblpYUXVjR0Z5Wlc1MFJXeGxiV1Z1ZER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRk4wWVhJZ1BTQmxMblJoY21kbGREdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFUzUmhjaTVqYkdGemMweHBjM1F1WVdSa0tDZHdjbTlrZFdOMFgxOXlZWFJwYm1jdFluVjBkRzl1TFMxaFkzUnBkbVVuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwWVhKblpYUlRkR0Z5TG5CeVpYWnBiM1Z6Uld4bGJXVnVkRk5wWW14cGJtY2dKaVlnZEdGeVoyVjBVM1JoY2k1d2NtVjJhVzkxYzBWc1pXMWxiblJUYVdKc2FXNW5MbU5zWVhOelRHbHpkQzVqYjI1MFlXbHVjeWduY0hKdlpIVmpkRjlmY21GMGFXNW5MV0oxZEhSdmJpMHRZV04wYVhabEp5a3BlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ0YjNabFEyeGhjM05HYjNKUWNtVjJhVzkxYzFOMFlYSnpLSFJoY21kbGRGTjBZWElzSUNkd2NtOWtkV04wWDE5eVlYUnBibWN0WW5WMGRHOXVMUzFoWTNScGRtVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZrWkVOc1lYTnpSbTl5VG1WNGRGTjBZWEp6S0hSaGNtZGxkRk4wWVhJc0lDZHdjbTlrZFdOMFgxOXlZWFJwYm1jdFluVjBkRzl1TFMxaFkzUnBkbVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUY5aFpHUkRiR0Z6YzBadmNrNWxlSFJUZEdGeWN5aGxiR1Z0TENCaFkzUnBkbVZEYkdGemN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hsYkdWdElEMGdaV3hsYlM1dVpYaDBSV3hsYldWdWRGTnBZbXhwYm1jcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiUzVqYkdGemMweHBjM1F1WVdSa0tHRmpkR2wyWlVOc1lYTnpLVHRjY2x4dUlDQWdJQ0FnSUNCOU95QWdJQ0FnWEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lGOXlaVzF2ZG1WRGJHRnpjMFp2Y2xCeVpYWnBiM1Z6VTNSaGNuTW9aV3hsYlN3Z1lXTjBhWFpsUTJ4aGMzTXBJSHRjY2x4dUlDQWdJQ0FnSUNCa2J5QjdJR1ZzWlcwZ1BTQmxiR1Z0TG5CeVpYWnBiM1Z6Uld4bGJXVnVkRk5wWW14cGJtYzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzB1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hoWTNScGRtVkRiR0Z6Y3lrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ2QyaHBiR1VnS0dWc1pXMHVjSEpsZG1sdmRYTkZiR1Z0Wlc1MFUybGliR2x1WnlBbUppQmxiR1Z0TG5CeVpYWnBiM1Z6Uld4bGJXVnVkRk5wWW14cGJtY3VZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLR0ZqZEdsMlpVTnNZWE56S1NrN0lDQWdYSEpjYmlBZ0lDQjlPMXh5WEc1OU95SmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaWJlKTtcblxuICAgICAgICAvLyBET01cbiAgICAgICAgdGhpcy5zdWJzY3JpYmVGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1YnNjcmliZV9fZm9ybScpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZUJ0biA9IHRoaXMuc3Vic2NyaWJlRm9ybS5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtLWJ0bicpO1xuXG4gICAgICAgIC8vICBFdmVudFxuICAgICAgICB0aGlzLl9zdWJzY3JpYmVGcm9ybVN1Ym1pdCgpO1xuICAgICAgICB0aGlzLl9idG5UYXJnZXRBbmltYXRpb24oKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU3Vic2NyaWJlLCBbe1xuICAgICAgICBrZXk6ICdfc3Vic2NyaWJlRnJvcm1TdWJtaXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3N1YnNjcmliZUZyb3JtU3VibWl0KCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByZWxvYWRlckljb24gPSBfdGhpcy5zdWJzY3JpYmVGb3JtLnF1ZXJ5U2VsZWN0b3IoJy5zdWJzY3JpYmVfX2Zvcm0tYnRuLS1wcmVsb2FkZXInKSxcbiAgICAgICAgICAgICAgICAgICAgc2VudEljb24gPSBfdGhpcy5zdWJzY3JpYmVGb3JtLnF1ZXJ5U2VsZWN0b3IoJy5zdWJzY3JpYmVfX2Zvcm0tYnRuLS1zZW50Jyk7XG5cbiAgICAgICAgICAgICAgICBwcmVsb2FkZXJJY29uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG5cbiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlLnRhcmdldC5lbWFpbC52YWx1ZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBmZXRjaCgnaHR0cHM6Ly9tYXhzLTRlYmU0LmZpcmViYXNlaW8uY29tL2NsaWVudHMuanNvbicsIG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlbG9hZGVySWNvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5lbWFpbC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2J0blRhcmdldEFuaW1hdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYnRuVGFyZ2V0QW5pbWF0aW9uKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zWCA9IGUub2Zmc2V0WCArICdweCcsXG4gICAgICAgICAgICAgICAgICAgIHBvc1kgPSBlLm9mZnNldFkgKyAncHgnO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEFuaW1hdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5jbGFzc0xpc3QuYWRkKCdidXR0b24tYnViYmxlX19mb3JtLWJ0bi10ZXJnZXQtYW5pbWF0aW9uJyk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0QW5pbWF0aW9uLnN0eWxlLmxlZnQgPSBwb3NYO1xuICAgICAgICAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5zdHlsZS50b3AgPSBwb3NZO1xuICAgICAgICAgICAgICAgIF90aGlzMi5zdWJzY3JpYmVCdG4uYXBwZW5kQ2hpbGQodGFyZ2V0QW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsRWwgPSBfdGhpczIuc3Vic2NyaWJlQnRuLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuc3Vic2NyaWJlQnRuLnJlbW92ZUNoaWxkKGRlbEVsKTtcbiAgICAgICAgICAgICAgICB9LCA0MDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU3Vic2NyaWJlO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTdWJzY3JpYmU7XG47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZFdKelkzSnBZbVV1YW5NaVhTd2libUZ0WlhNaU9sc2lVM1ZpYzJOeWFXSmxJaXdpYzNWaWMyTnlhV0psUm05eWJTSXNJbVJ2WTNWdFpXNTBJaXdpY1hWbGNubFRaV3hsWTNSdmNpSXNJbk4xWW5OamNtbGlaVUowYmlJc0lsOXpkV0p6WTNKcFltVkdjbTl5YlZOMVltMXBkQ0lzSWw5aWRHNVVZWEpuWlhSQmJtbHRZWFJwYjI0aUxDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeUlpd2laU0lzSW5CeVpYWmxiblJFWldaaGRXeDBJaXdpY0hKbGJHOWhaR1Z5U1dOdmJpSXNJbk5sYm5SSlkyOXVJaXdpYzNSNWJHVWlMQ0prYVhOd2JHRjVJaXdpWm05eWJVUmhkR0VpTENKbGJXRnBiQ0lzSW5SaGNtZGxkQ0lzSW5aaGJIVmxJaXdpYjNCMGFXOXVjeUlzSW0xbGRHaHZaQ0lzSW1KdlpIa2lMQ0pLVTA5T0lpd2ljM1J5YVc1bmFXWjVJaXdpWm1WMFkyZ2lMQ0owYUdWdUlpd2ljbVZ6Y0c5dWMyVWlMQ0p6ZEdGMGRYTWlMQ0p6WlhSVWFXMWxiM1YwSWl3aWNHOXpXQ0lzSW05bVpuTmxkRmdpTENKd2IzTlpJaXdpYjJabWMyVjBXU0lzSW5SaGNtZGxkRUZ1YVcxaGRHbHZiaUlzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0pqYkdGemMweHBjM1FpTENKaFpHUWlMQ0pzWldaMElpd2lkRzl3SWl3aVlYQndaVzVrUTJocGJHUWlMQ0prWld4RmJDSXNJbU5vYVd4a2NtVnVJaXdpY21WdGIzWmxRMmhwYkdRaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3U1VGQmNVSkJMRk03UVVGRGFrSXNlVUpCUVdNN1FVRkJRVHM3UVVGRFZqdEJRVU5CTEdGQlFVdERMR0ZCUVV3c1IwRkJjVUpETEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzYTBKQlFYWkNMRU5CUVhKQ08wRkJRMEVzWVVGQlMwTXNXVUZCVEN4SFFVRnZRaXhMUVVGTFNDeGhRVUZNTEVOQlFXMUNSU3hoUVVGdVFpeERRVUZwUXl4elFrRkJha01zUTBGQmNFSTdPMEZCUlVFN1FVRkRRU3hoUVVGTFJTeHhRa0ZCVER0QlFVTkJMR0ZCUVV0RExHMUNRVUZNTzBGQlEwZzdPenM3WjBSQlJYVkNPMEZCUVVFN08wRkJRM0JDTEdsQ1FVRkxUQ3hoUVVGTUxFTkJRVzFDVFN4blFrRkJia0lzUTBGQmIwTXNVVUZCY0VNc1JVRkJPRU1zVlVGQlEwTXNRMEZCUkN4RlFVRlBPMEZCUTJwRVFTeHJRa0ZCUlVNc1kwRkJSanM3UVVGRlNpeHZRa0ZCU1VNc1owSkJRV2RDTEUxQlFVdFVMR0ZCUVV3c1EwRkJiVUpGTEdGQlFXNUNMRU5CUVdsRExHbERRVUZxUXl4RFFVRndRanRCUVVGQkxHOUNRVU5KVVN4WFFVRlhMRTFCUVV0V0xHRkJRVXdzUTBGQmJVSkZMR0ZCUVc1Q0xFTkJRV2xETERSQ1FVRnFReXhEUVVSbU96dEJRVWRCVHl3NFFrRkJZMFVzUzBGQlpDeERRVUZ2UWtNc1QwRkJjRUlzUjBGQk9FSXNUVUZCT1VJN08wRkJSVUVzYjBKQlFVbERMRmRCUVZjN1FVRkRXRU1zTWtKQlFVOVFMRVZCUVVWUkxFMUJRVVlzUTBGQlUwUXNTMEZCVkN4RFFVRmxSVHRCUVVSWUxHbENRVUZtT3p0QlFVbEJMRzlDUVVGSlF5eFZRVUZWTzBGQlExWkRMRFJDUVVGUkxFMUJSRVU3UVVGRlZrTXNNRUpCUVUxRExFdEJRVXRETEZOQlFVd3NRMEZCWlZJc1VVRkJaanRCUVVaSkxHbENRVUZrT3p0QlFVdEJVeXh6UWtGQlRTeG5SRUZCVGl4RlFVRjNSRXdzVDBGQmVFUXNSVUZEUzAwc1NVRkVUQ3hEUVVOVkxGVkJRVlZETEZGQlFWWXNSVUZCYjBJN1FVRkRkRUlzZDBKQlFVbEJMRk5CUVZORExFMUJRVlFzUzBGQmIwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRGVrSm9RaXh6UTBGQlkwVXNTMEZCWkN4RFFVRnZRa01zVDBGQmNFSXNSMEZCT0VJc1RVRkJPVUk3UVVGRFFVWXNhVU5CUVZORExFdEJRVlFzUTBGQlpVTXNUMEZCWml4SFFVRjVRaXhOUVVGNlFqczdRVUZGUVdNc2JVTkJRVmNzV1VGQlRUdEJRVU5pYUVJc2NVTkJRVk5ETEV0QlFWUXNRMEZCWlVNc1QwRkJaaXhIUVVGNVFpeE5RVUY2UWp0QlFVTklMSGxDUVVaRUxFVkJSVWNzU1VGR1NEczdRVUZKUVV3c01FSkJRVVZSTEUxQlFVWXNRMEZCVTBRc1MwRkJWQ3hEUVVGbFJTeExRVUZtTEVkQlFYVkNMRVZCUVhaQ08wRkJRMGc3UVVGRFNpeHBRa0ZhVER0QlFXRkRMR0ZCT1VKRU8wRkJLMEpJT3pzN09FTkJSWEZDTzBGQlFVRTdPMEZCUTJ4Q0xHbENRVUZMWWl4WlFVRk1MRU5CUVd0Q1J5eG5Ra0ZCYkVJc1EwRkJiVU1zVDBGQmJrTXNSVUZCTkVNc1lVRkJTenRCUVVNM1F5eHZRa0ZCU1hGQ0xFOUJRVTl3UWl4RlFVRkZjVUlzVDBGQlJpeEhRVUZaTEVsQlFYWkNPMEZCUVVFc2IwSkJRMGxETEU5QlFVOTBRaXhGUVVGRmRVSXNUMEZCUml4SFFVRlpMRWxCUkhaQ096dEJRVWRCTEc5Q1FVRkpReXhyUWtGQmEwSTVRaXhUUVVGVEswSXNZVUZCVkN4RFFVRjFRaXhMUVVGMlFpeERRVUYwUWp0QlFVTkJSQ3huUTBGQlowSkZMRk5CUVdoQ0xFTkJRVEJDUXl4SFFVRXhRaXhEUVVFNFFpd3dRMEZCT1VJN1FVRkRRVWdzWjBOQlFXZENjRUlzUzBGQmFFSXNRMEZCYzBKM1FpeEpRVUYwUWl4SFFVRTJRbElzU1VGQk4wSTdRVUZEUVVrc1owTkJRV2RDY0VJc1MwRkJhRUlzUTBGQmMwSjVRaXhIUVVGMFFpeEhRVUUwUWxBc1NVRkJOVUk3UVVGRFFTeDFRa0ZCU3pGQ0xGbEJRVXdzUTBGQmEwSnJReXhYUVVGc1FpeERRVUU0UWs0c1pVRkJPVUk3TzBGQlJVRk1MREpDUVVGWExGbEJRVTA3UVVGRFlpeDNRa0ZCU1Zrc1VVRkJVU3hQUVVGTGJrTXNXVUZCVEN4RFFVRnJRbTlETEZGQlFXeENMRU5CUVRKQ0xFTkJRVE5DTEVOQlFWbzdRVUZEUVN3eVFrRkJTM0JETEZsQlFVd3NRMEZCYTBKeFF5eFhRVUZzUWl4RFFVRTRRa1lzUzBGQk9VSTdRVUZEU0N4cFFrRklSQ3hGUVVkSExFZEJTRWc3UVVGSlNDeGhRV1JFTzBGQlpVZzdPenM3T3p0clFrRTNSR2RDZGtNc1V6dEJRVGhFY0VJaUxDSm1hV3hsSWpvaVgzTjFZbk5qY21saVpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGTjFZbk5qY21saVpTQjdYSEpjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJFVDAxY2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMVluTmpjbWxpWlVadmNtMGdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VjM1ZpYzJOeWFXSmxYMTltYjNKdEp5azdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkV0p6WTNKcFltVkNkRzRnUFNCMGFHbHpMbk4xWW5OamNtbGlaVVp2Y20wdWNYVmxjbmxUWld4bFkzUnZjaWduTG5OMVluTmpjbWxpWlY5ZlptOXliUzFpZEc0bktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdJRVYyWlc1MFhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzVmljMk55YVdKbFJuSnZjbTFUZFdKdGFYUW9LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDlpZEc1VVlYSm5aWFJCYm1sdFlYUnBiMjRvS1R0Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdYM04xWW5OamNtbGlaVVp5YjNKdFUzVmliV2wwS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzVmljMk55YVdKbFJtOXliUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R6ZFdKdGFYUW5MQ0FvWlNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSEJ5Wld4dllXUmxja2xqYjI0Z1BTQjBhR2x6TG5OMVluTmpjbWxpWlVadmNtMHVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuTjFZbk5qY21saVpWOWZabTl5YlMxaWRHNHRMWEJ5Wld4dllXUmxjaWNwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wlc1MFNXTnZiaUE5SUhSb2FYTXVjM1ZpYzJOeWFXSmxSbTl5YlM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YzNWaWMyTnlhV0psWDE5bWIzSnRMV0owYmkwdGMyVnVkQ2NwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J3Y21Wc2IyRmtaWEpKWTI5dUxuTjBlV3hsTG1ScGMzQnNZWGtnUFNBblpteGxlQ2M3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCbWIzSnRSR0YwWVNBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXMWhhV3c2SUdVdWRHRnlaMlYwTG1WdFlXbHNMblpoYkhWbFhISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUc5d2RHbHZibk1nUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGRHaHZaRG9nSjFCUFUxUW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmliMlI1T2lCS1UwOU9Mbk4wY21sdVoybG1lU2htYjNKdFJHRjBZU2xjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdabGRHTm9LQ2RvZEhSd2N6b3ZMMjFoZUhNdE5HVmlaVFF1Wm1seVpXSmhjMlZwYnk1amIyMHZZMnhwWlc1MGN5NXFjMjl1Snl3Z2IzQjBhVzl1Y3lsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNGdLSEpsYzNCdmJuTmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6Y0c5dWMyVXVjM1JoZEhWeklEMDlQU0F5TURBcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVnNiMkZrWlhKSlkyOXVMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQW5ibTl1WlNjN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWdWRFbGpiMjR1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJQ2RtYkdWNEp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0NncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWdWRFbGpiMjR1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJQ2R1YjI1bEp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxDQXlNREF3S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTNTBZWEpuWlhRdVpXMWhhV3d1ZG1Gc2RXVWdQU0FuSnp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJRjlpZEc1VVlYSm5aWFJCYm1sdFlYUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1emRXSnpZM0pwWW1WQ2RHNHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQmxJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQnZjMWdnUFNCbExtOW1abk5sZEZnZ0t5QW5jSGduTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXpXU0E5SUdVdWIyWm1jMlYwV1NBcklDZHdlQ2M3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkR0Z5WjJWMFFXNXBiV0YwYVc5dUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRFRnVhVzFoZEdsdmJpNWpiR0Z6YzB4cGMzUXVZV1JrS0NkaWRYUjBiMjR0WW5WaVlteGxYMTltYjNKdExXSjBiaTEwWlhKblpYUXRZVzVwYldGMGFXOXVKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRFRnVhVzFoZEdsdmJpNXpkSGxzWlM1c1pXWjBJRDBnY0c5eldEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwUVc1cGJXRjBhVzl1TG5OMGVXeGxMblJ2Y0NBOUlIQnZjMWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMzVmljMk55YVdKbFFuUnVMbUZ3Y0dWdVpFTm9hV3hrS0hSaGNtZGxkRUZ1YVcxaGRHbHZiaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrWld4RmJDQTlJSFJvYVhNdWMzVmljMk55YVdKbFFuUnVMbU5vYVd4a2NtVnVXekJkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZFdKelkzSnBZbVZDZEc0dWNtVnRiM1psUTJocGJHUW9aR1ZzUld3cE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQTBNREFwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmVHRjY2x4dWZUc2lYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2FkZFByb2R1Y3RJdGVtcyA9IHJlcXVpcmUoJy4vX2FkZC1wcm9kdWN0LWl0ZW1zJyk7XG5cbnZhciBfYWRkUHJvZHVjdEl0ZW1zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZFByb2R1Y3RJdGVtcyk7XG5cbnZhciBfYnVyZ2VyTWVudSA9IHJlcXVpcmUoJy4vX2J1cmdlci1tZW51Jyk7XG5cbnZhciBfYnVyZ2VyTWVudTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9idXJnZXJNZW51KTtcblxudmFyIF9maXhlZEhlYWRlciA9IHJlcXVpcmUoJy4vX2ZpeGVkLWhlYWRlcicpO1xuXG52YXIgX2ZpeGVkSGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpeGVkSGVhZGVyKTtcblxudmFyIF9TZWFyY2hMb2dpbkZvcm1zID0gcmVxdWlyZSgnLi9fU2VhcmNoLWxvZ2luLWZvcm1zJyk7XG5cbnZhciBfU2VhcmNoTG9naW5Gb3JtczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TZWFyY2hMb2dpbkZvcm1zKTtcblxudmFyIF9wcm9kdWN0SXRlbXNFdmVudHMgPSByZXF1aXJlKCcuL19wcm9kdWN0LWl0ZW1zLWV2ZW50cycpO1xuXG52YXIgX3Byb2R1Y3RJdGVtc0V2ZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9kdWN0SXRlbXNFdmVudHMpO1xuXG52YXIgX3N1YnNjcmliZSA9IHJlcXVpcmUoJy4vX3N1YnNjcmliZScpO1xuXG52YXIgX3N1YnNjcmliZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdWJzY3JpYmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXQpO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuXG4gICAgLy8gQ2xvbmUgbmF2aWdhdGlvblxuICAgIGZ1bmN0aW9uIGNsb25lTmF2KCkge1xuICAgICAgICB2YXIgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlci1uYXZfX2xpc3QnKS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIHZhciBjbG9uZU5hdlBhcnJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2Jyk7XG5cbiAgICAgICAgY2xvbmVOYXZQYXJyZW50Lmluc2VydEJlZm9yZShuYXYsIGNsb25lTmF2UGFycmVudFswXSk7XG4gICAgfTtcbiAgICBjbG9uZU5hdigpO1xuXG4gICAgLy8gU2V0IG1hcmdpbiB0b3AgZm9yIHRvcCBzZWN0aW9uXG4gICAgZnVuY3Rpb24gc2V0TWFyZ2luKCkge1xuICAgICAgICB2YXIgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpLFxuICAgICAgICAgICAgdG9wU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b3Atc2VjdGlvbicpO1xuXG4gICAgICAgIHRvcFNlY3Rpb24uc3R5bGUubWFyZ2luVG9wID0gaGVhZGVyLm9mZnNldEhlaWdodCArICdweCc7XG4gICAgfTtcbiAgICBzZXRNYXJnaW4oKTtcblxuICAgIC8qIC8vIEdvb2dsZSBNYXBcclxuICAgIGZ1bmN0aW9uIGluaXRNYXAoKSB7XHJcbiAgICAgICAgbGV0IHl1emhueUJyaXogPSB7bGF0OiA0Ni45NjMzOSwgbG5nOiAzMS45ODc4MjN9O1xyXG4gICAgICAgIGxldCBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSwge1xyXG4gICAgICAgICAgem9vbTogMTcsXHJcbiAgICAgICAgICBjZW50ZXI6IHl1emhueUJyaXpcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XHJcbiAgICAgICAgICBwb3NpdGlvbjogeXV6aG55QnJpeixcclxuICAgICAgICAgIG1hcDogbWFwLFxyXG4gICAgICAgICAgdGl0bGU6ICfQrtC20L3Ri9C5INCx0YDQuNC3J1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTsgKi9cblxuICAgIHZhciBhZGRQcm9kdWN0SXRlbXMgPSBuZXcgX2FkZFByb2R1Y3RJdGVtczIuZGVmYXVsdCgpO1xuICAgIHZhciBidXJnZXJNZW51ID0gbmV3IF9idXJnZXJNZW51Mi5kZWZhdWx0KCk7XG4gICAgdmFyIGZpeGVkSGVhZGVyID0gbmV3IF9maXhlZEhlYWRlcjIuZGVmYXVsdCgpO1xuICAgIHZhciBzZWFyY2hMb2dpbkZvcm1zID0gbmV3IF9TZWFyY2hMb2dpbkZvcm1zMi5kZWZhdWx0KCk7XG4gICAgdmFyIHByb2R1Y3RJdGVtc0V2ZW50cyA9IG5ldyBfcHJvZHVjdEl0ZW1zRXZlbnRzMi5kZWZhdWx0KCk7XG4gICAgdmFyIHN1YnNjcmliZSA9IG5ldyBfc3Vic2NyaWJlMi5kZWZhdWx0KCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1aaGEyVmZZakUyWm1NNVltTXVhbk1pWFN3aWJtRnRaWE1pT2xzaWQybHVaRzkzSWl3aVlXUmtSWFpsYm5STWFYTjBaVzVsY2lJc0ltbHVhWFFpTENKamJHOXVaVTVoZGlJc0ltNWhkaUlzSW1SdlkzVnRaVzUwSWl3aWNYVmxjbmxUWld4bFkzUnZjaUlzSW1Oc2IyNWxUbTlrWlNJc0ltTnNiMjVsVG1GMlVHRnljbVZ1ZENJc0ltbHVjMlZ5ZEVKbFptOXlaU0lzSW5ObGRFMWhjbWRwYmlJc0ltaGxZV1JsY2lJc0luUnZjRk5sWTNScGIyNGlMQ0p6ZEhsc1pTSXNJbTFoY21kcGJsUnZjQ0lzSW05bVpuTmxkRWhsYVdkb2RDSXNJbUZrWkZCeWIyUjFZM1JKZEdWdGN5SXNJbUoxY21kbGNrMWxiblVpTENKbWFYaGxaRWhsWVdSbGNpSXNJbk5sWVhKamFFeHZaMmx1Um05eWJYTWlMQ0p3Y205a2RXTjBTWFJsYlhORmRtVnVkSE1pTENKemRXSnpZM0pwWW1VaVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlJVRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdRVUZRUVVFc1QwRkJUME1zWjBKQlFWQXNRMEZCZDBJc2EwSkJRWGhDTEVWQlFUUkRReXhKUVVFMVF6czdRVUZUUVN4VFFVRlRRU3hKUVVGVUxFZEJRV2RDT3p0QlFVVmFPMEZCUTBFc1lVRkJVME1zVVVGQlZDeEhRVUZ2UWp0QlFVTm9RaXhaUVVGSlF5eE5RVUZOUXl4VFFVRlRReXhoUVVGVUxFTkJRWFZDTEcxQ1FVRjJRaXhGUVVFMFEwTXNVMEZCTlVNc1EwRkJjMFFzU1VGQmRFUXNRMEZCVmp0QlFVTkJMRmxCUVVsRExHdENRVUZyUWtnc1UwRkJVME1zWVVGQlZDeERRVUYxUWl4WlFVRjJRaXhEUVVGMFFqczdRVUZGUVVVc2QwSkJRV2RDUXl4WlFVRm9RaXhEUVVFMlFrd3NSMEZCTjBJc1JVRkJhME5KTEdkQ1FVRm5RaXhEUVVGb1FpeERRVUZzUXp0QlFVTklPMEZCUTBSTU96dEJRVVZCTzBGQlEwRXNZVUZCVTA4c1UwRkJWQ3hIUVVGeFFqdEJRVU5xUWl4WlFVRkpReXhUUVVGVFRpeFRRVUZUUXl4aFFVRlVMRU5CUVhWQ0xGTkJRWFpDTEVOQlFXSTdRVUZCUVN4WlFVTkpUU3hoUVVGaFVDeFRRVUZUUXl4aFFVRlVMRU5CUVhWQ0xHTkJRWFpDTEVOQlJHcENPenRCUVVkQlRTeHRRa0ZCVjBNc1MwRkJXQ3hEUVVGcFFrTXNVMEZCYWtJc1IwRkJOa0pJTEU5QlFVOUpMRmxCUVZBc1IwRkJjMElzU1VGQmJrUTdRVUZEU0R0QlFVTkVURHM3UVVGRlFUczdPenM3T3pzN096czdPenM3UVVGalFTeFJRVUZOVFN4clFrRkJhMElzSzBKQlFYaENPMEZCUTBFc1VVRkJUVU1zWVVGQllTd3dRa0ZCYmtJN1FVRkRRU3hSUVVGTlF5eGpRVUZqTERKQ1FVRndRanRCUVVOQkxGRkJRVTFETEcxQ1FVRnRRaXhuUTBGQmVrSTdRVUZEUVN4UlFVRk5ReXh4UWtGQmNVSXNhME5CUVROQ08wRkJRMEVzVVVGQlRVTXNXVUZCV1N4NVFrRkJiRUk3UVVGRFNDSXNJbVpwYkdVaU9pSm1ZV3RsWDJJeE5tWmpPV0pqTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0owUlBUVU52Ym5SbGJuUk1iMkZrWldRbkxDQnBibWwwS1R0Y2NseHVYSEpjYm1sdGNHOXlkQ0JCWkdSUWNtOWtkV04wU1hSbGJYTWdabkp2YlNBbkxpOWZZV1JrTFhCeWIyUjFZM1F0YVhSbGJYTW5PMXh5WEc1cGJYQnZjblFnUW5WeVoyVnlUV1Z1ZFNCbWNtOXRJQ2N1TDE5aWRYSm5aWEl0YldWdWRTYzdYSEpjYm1sdGNHOXlkQ0JHYVhobFpFaGxZV1JsY2lCbWNtOXRJQ2N1TDE5bWFYaGxaQzFvWldGa1pYSW5PMXh5WEc1cGJYQnZjblFnVTJWaGNtTm9URzluYVc1R2IzSnRjeUJtY205dElDY3VMMTlUWldGeVkyZ3RiRzluYVc0dFptOXliWE1uTzF4eVhHNXBiWEJ2Y25RZ1VISnZaSFZqZEVsMFpXMXpSWFpsYm5SeklHWnliMjBnSnk0dlgzQnliMlIxWTNRdGFYUmxiWE10WlhabGJuUnpKenRjY2x4dWFXMXdiM0owSUZOMVluTmpjbWxpWlNCbWNtOXRJQ2N1TDE5emRXSnpZM0pwWW1Vbk8xeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2FXNXBkQ2dwSUh0Y2NseHVJQ0FnWEhKY2JpQWdJQ0F2THlCRGJHOXVaU0J1WVhacFoyRjBhVzl1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJqYkc5dVpVNWhkaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYm1GMklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxtaGxZV1JsY2kxdVlYWmZYMnhwYzNRbktTNWpiRzl1WlU1dlpHVW9kSEoxWlNrN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdOc2IyNWxUbUYyVUdGeWNtVnVkQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTVtYVhobFpDMXVZWFluS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWTJ4dmJtVk9ZWFpRWVhKeVpXNTBMbWx1YzJWeWRFSmxabTl5WlNodVlYWXNJR05zYjI1bFRtRjJVR0Z5Y21WdWRGc3dYU2s3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnWTJ4dmJtVk9ZWFlvS1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJUWlhRZ2JXRnlaMmx1SUhSdmNDQm1iM0lnZEc5d0lITmxZM1JwYjI1Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhObGRFMWhjbWRwYmlncElIdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2FHVmhaR1Z5SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG1obFlXUmxjaWNwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjNCVFpXTjBhVzl1SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG5SdmNDMXpaV04wYVc5dUp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUnZjRk5sWTNScGIyNHVjM1I1YkdVdWJXRnlaMmx1Vkc5d0lEMGdhR1ZoWkdWeUxtOW1abk5sZEVobGFXZG9kQ0FySUNkd2VDYzdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdjMlYwVFdGeVoybHVLQ2xjY2x4dVhISmNiaUFnSUNBdktpQXZMeUJIYjI5bmJHVWdUV0Z3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm1sMFRXRndLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0I1ZFhwb2JubENjbWw2SUQwZ2UyeGhkRG9nTkRZdU9UWXpNemtzSUd4dVp6b2dNekV1T1RnM09ESXpmVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdiV0Z3SUQwZ2JtVjNJR2R2YjJkc1pTNXRZWEJ6TGsxaGNDaGtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmJXRndKeWtzSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSHB2YjIwNklERTNMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1kyVnVkR1Z5T2lCNWRYcG9ibmxDY21sNlhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRzFoY210bGNpQTlJRzVsZHlCbmIyOW5iR1V1YldGd2N5NU5ZWEpyWlhJb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ2SUhsMWVtaHVlVUp5YVhvc1hISmNiaUFnSUNBZ0lDQWdJQ0J0WVhBNklHMWhjQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lIUnBkR3hsT2lBbjBLN1F0dEM5MFl2UXVTRFFzZEdBMExqUXR5ZGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwN0lDb3ZYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdZV1JrVUhKdlpIVmpkRWwwWlcxeklEMGdibVYzSUVGa1pGQnliMlIxWTNSSmRHVnRjenRjY2x4dUlDQWdJR052Ym5OMElHSjFjbWRsY2sxbGJuVWdQU0J1WlhjZ1FuVnlaMlZ5VFdWdWRUdGNjbHh1SUNBZ0lHTnZibk4wSUdacGVHVmtTR1ZoWkdWeUlEMGdibVYzSUVacGVHVmtTR1ZoWkdWeU8xeHlYRzRnSUNBZ1kyOXVjM1FnYzJWaGNtTm9URzluYVc1R2IzSnRjeUE5SUc1bGR5QlRaV0Z5WTJoTWIyZHBia1p2Y20xek8xeHlYRzRnSUNBZ1kyOXVjM1FnY0hKdlpIVmpkRWwwWlcxelJYWmxiblJ6SUQwZ2JtVjNJRkJ5YjJSMVkzUkpkR1Z0YzBWMlpXNTBjenRjY2x4dUlDQWdJR052Ym5OMElITjFZbk5qY21saVpTQTlJRzVsZHlCVGRXSnpZM0pwWW1VN1hISmNibjA3SWwxOSJdfQ==
