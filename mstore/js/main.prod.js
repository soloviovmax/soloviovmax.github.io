(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchLoginForms = function () {
   function SearchLoginForms() {
      _classCallCheck(this, SearchLoginForms);

      // DOM
      this.serchWrap = document.querySelector('.user-panel__item--search');
      this.searchBtn = this.serchWrap.querySelector('.user-panel__button--search');
      this.searchForm = this.serchWrap.querySelector('.user-panel__search-form');

      this.loginWrap = document.querySelector('.user-panel__item--login');
      this.loginBtn = this.loginWrap.querySelector('.user-panel__button--user');
      this.loginFormWrap = this.loginWrap.querySelector('.user-panel__login-form-wrap');

      this.serchFormActiveClass = 'user-panel__search-form--active';
      this.loginFormActiveClass = 'user-panel__login-form-wrap--active';

      this.switchesBrns = this.loginWrap.querySelectorAll('.user-panel__login-switches-btn');
      //  events
      this._toggleInput(this.searchBtn, this.searchForm, this.serchFormActiveClass, this.loginFormWrap, this.loginFormActiveClass);
      this._toggleInput(this.loginBtn, this.loginFormWrap, this.loginFormActiveClass, this.searchForm, this.serchFormActiveClass);

      this._scrollCloseInput();

      this._switchesBtnsEvents();
   }

   _createClass(SearchLoginForms, [{
      key: '_toggleInput',
      value: function _toggleInput(btn, form, activeClass, mustBeClose, mustBeCloseActiveClass) {
         btn.addEventListener('click', function (e) {
            if (e.target === e.currentTarget || e.target.parentElement === e.currentTarget) {
               form.classList.toggle(activeClass);

               if (mustBeClose.classList.contains(mustBeCloseActiveClass)) {
                  mustBeClose.classList.remove(mustBeCloseActiveClass);
               }
            }
         });
      }
   }, {
      key: '_scrollCloseInput',
      value: function _scrollCloseInput() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            if (_this.searchForm.classList.contains(_this.serchFormActiveClass)) {
               _this.searchForm.classList.remove(_this.serchFormActiveClass);
            };

            if (_this.loginFormWrap.classList.contains(_this.loginFormActiveClass)) {
               _this.loginFormWrap.classList.remove(_this.loginFormActiveClass);
            };
         });
      }
   }, {
      key: '_switchesBtnsEvents',
      value: function _switchesBtnsEvents() {
         var signInBtn = this.switchesBrns[0],
             registerBtn = this.switchesBrns[1],
             confirmPasswordInput = this.loginFormWrap.querySelector('.user-panel__login-input--confirm-password');

         registerBtn.addEventListener('click', function (e) {
            if (e.currentTarget.classList.contains('user-panel__login-switches-btn--nonactive')) {
               e.currentTarget.classList.remove('user-panel__login-switches-btn--nonactive');
               signInBtn.classList.add('user-panel__login-switches-btn--nonactive');

               confirmPasswordInput.setAttribute('required', '');
               confirmPasswordInput.style.display = 'block';
            }
         });

         signInBtn.addEventListener('click', function (e) {
            if (e.currentTarget.classList.contains('user-panel__login-switches-btn--nonactive')) {
               e.currentTarget.classList.remove('user-panel__login-switches-btn--nonactive');
               registerBtn.classList.add('user-panel__login-switches-btn--nonactive');

               confirmPasswordInput.removeAttribute('required');
               confirmPasswordInput.style.display = 'none';
               confirmPasswordInput.value = '';
            }
         });
      }
   }]);

   return SearchLoginForms;
}();

exports.default = SearchLoginForms;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AddProductItems = function () {
    function AddProductItems() {
        _classCallCheck(this, AddProductItems);

        // DOM
        this.mainItem = document.querySelector('.product__item-clone').children[0];
        this.parrent = document.querySelector('.feauture-product');
        this.btn = document.querySelector('.load-more-btn');

        // vars 
        this.firstLoadedItemsQty = 8;
        this.pressBtnLoadedItemsQty = 4;

        //  events
        this._firstLoadAddItems();
        this._pressBtnAddItems();
    }

    _createClass(AddProductItems, [{
        key: '_firstLoadAddItems',
        value: function _firstLoadAddItems() {
            var _this = this;

            var xhr = new XMLHttpRequest();

            xhr.open('GET', 'https://soloviovmax.github.io/mstore/db.json');

            xhr.responseType = "json";

            xhr.addEventListener('load', function () {
                var data = xhr.response;
                var totalQtyItems = data.length - 1;
                var qtyItems = _this.firstLoadedItemsQty;

                _this._addItems(totalQtyItems, qtyItems, data);
            });
            xhr.send();
        }
    }, {
        key: '_pressBtnAddItems',
        value: function _pressBtnAddItems() {
            var _this2 = this;

            this.nowAdded = this.firstLoadedItemsQty;

            this.btn.addEventListener('click', function () {
                var xhr = new XMLHttpRequest();

                xhr.open('GET', 'https://soloviovmax.github.io/mstore/db.json');

                xhr.responseType = "json";

                xhr.addEventListener('load', function () {
                    var data = xhr.response;
                    var totalQtyItems = data.length - 1 - _this2.nowAdded;
                    var qtyItems = _this2.pressBtnLoadedItemsQty;
                    _this2._addItems(totalQtyItems, qtyItems, data);

                    _this2.nowAdded += _this2.pressBtnLoadedItemsQty;
                });
                xhr.send();
            });
        }
    }, {
        key: '_addItems',
        value: function _addItems(totalQty, addQty, data) {

            for (var i = totalQty; i > totalQty - addQty; i--) {
                if (i === 0) {
                    this.btn.style.display = 'none';
                }
                var currentItem = this.mainItem.cloneNode(true);

                var img = currentItem.querySelector('.product__img'),
                    title = currentItem.querySelector('.product__title-link'),
                    price = currentItem.querySelector('.product__price'),
                    basketBtn = currentItem.querySelector('.product__details-button--basket'),
                    zoomBtn = currentItem.querySelector('.product__details-button--zoom');

                var dataItem = data[i];

                for (var key in dataItem) {
                    if (key === 'src') {
                        img.setAttribute('src', 'img/' + dataItem[key]);
                        zoomBtn.dataset.src = 'img/' + 'big-' + dataItem[key];
                    } else if (key === 'title') {
                        title.textContent = dataItem[key];
                        img.setAttribute('alt', dataItem[key]);
                    } else if (key === 'price') {
                        price.textContent = '$' + dataItem[key];
                        basketBtn.dataset.price = dataItem[key];
                    } else if (key === 'id') {
                        currentItem.dataset.id = dataItem[key];
                    } else if (key === 'oldPrice') {
                        var oldPriceSpan = document.createElement('span');
                        oldPriceSpan.textContent = '$' + dataItem[key];
                        oldPriceSpan.classList.add('product__old-price');
                        var descrWrap = currentItem.querySelector('.product-descr');
                        descrWrap.insertBefore(oldPriceSpan, descrWrap.children[2]);
                    } else if (key === 'label') {
                        currentItem.classList.add('product__item--label-' + dataItem[key]);
                    }
                }
                this.parrent.appendChild(currentItem);
            }
        }
    }]);

    return AddProductItems;
}();

exports.default = AddProductItems;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BurgerMenu = function () {
   function BurgerMenu() {
      _classCallCheck(this, BurgerMenu);

      // DOM
      this.btn = document.querySelector('.burger-btn');
      this.navList = document.querySelector('.fixed-nav .header-nav__list');
      this.navItem = document.querySelectorAll('.fixed-nav .header-nav__item');
      this.header = document.querySelector('.header');
      this.maincontent = document.querySelector('.maincontent');
      this.footer = document.querySelector('.footer');

      //  events
      this._events();
   }

   _createClass(BurgerMenu, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         this.btn.addEventListener('click', function () {
            _this.navList.classList.add('header-nav__list--burger-active');

            var timeout = 50;

            var _loop = function _loop(i) {

               setTimeout(function () {
                  _this.navItem[i].classList.add('header-nav__item--burger-active');
               }, timeout);

               timeout += 50;
            };

            for (var i = 0; i < _this.navItem.length; i++) {
               _loop(i);
            };

            document.body.classList.add('overflow-hidden');
            _this.header.classList.add('blur');
            _this.maincontent.classList.add('blur');
            _this.footer.classList.add('blur');
         });

         this.navList.addEventListener('click', function (e) {
            if (e.target === e.currentTarget) {
               _this.navList.classList.remove('header-nav__list--burger-active');

               for (var i = 0; i < _this.navItem.length; i++) {
                  _this.navItem[i].classList.remove('header-nav__item--burger-active');
               };

               document.body.classList.remove('overflow-hidden');
               _this.header.classList.remove('blur');
               _this.maincontent.classList.remove('blur');
               _this.footer.classList.remove('blur');
            }
         });
      }
   }]);

   return BurgerMenu;
}();

exports.default = BurgerMenu;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9idXJnZXItbWVudS5qcyJdLCJuYW1lcyI6WyJCdXJnZXJNZW51IiwiYnRuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmF2TGlzdCIsIm5hdkl0ZW0iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaGVhZGVyIiwibWFpbmNvbnRlbnQiLCJmb290ZXIiLCJfZXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsInRpbWVvdXQiLCJpIiwic2V0VGltZW91dCIsImxlbmd0aCIsImJvZHkiLCJlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsVTtBQUNsQix5QkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsR0FBTCxHQUFXQyxTQUFTQyxhQUFULENBQXVCLGFBQXZCLENBQVg7QUFDQSxXQUFLQyxPQUFMLEdBQWVGLFNBQVNDLGFBQVQsQ0FBdUIsOEJBQXZCLENBQWY7QUFDQSxXQUFLRSxPQUFMLEdBQWVILFNBQVNJLGdCQUFULENBQTBCLDhCQUExQixDQUFmO0FBQ0EsV0FBS0MsTUFBTCxHQUFjTCxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQWQ7QUFDQSxXQUFLSyxXQUFMLEdBQW1CTixTQUFTQyxhQUFULENBQXVCLGNBQXZCLENBQW5CO0FBQ0EsV0FBS00sTUFBTCxHQUFjUCxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQWQ7O0FBRUE7QUFDQSxXQUFLTyxPQUFMO0FBQ0Y7Ozs7Z0NBRVM7QUFBQTs7QUFDUCxjQUFLVCxHQUFMLENBQVNVLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DLFlBQU07QUFDdEMsa0JBQUtQLE9BQUwsQ0FBYVEsU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsaUNBQTNCOztBQUVBLGdCQUFJQyxVQUFVLEVBQWQ7O0FBSHNDLHVDQUk3QkMsQ0FKNkI7O0FBTW5DQywwQkFBVyxZQUFNO0FBQ2Qsd0JBQUtYLE9BQUwsQ0FBYVUsQ0FBYixFQUFnQkgsU0FBaEIsQ0FBMEJDLEdBQTFCLENBQThCLGlDQUE5QjtBQUNGLGdCQUZELEVBRUdDLE9BRkg7O0FBSUFBLDBCQUFXLEVBQVg7QUFWbUM7O0FBSXRDLGlCQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSSxNQUFLVixPQUFMLENBQWFZLE1BQWpDLEVBQXlDRixHQUF6QyxFQUE4QztBQUFBLHFCQUFyQ0EsQ0FBcUM7QUFPN0M7O0FBRURiLHFCQUFTZ0IsSUFBVCxDQUFjTixTQUFkLENBQXdCQyxHQUF4QixDQUE0QixpQkFBNUI7QUFDQSxrQkFBS04sTUFBTCxDQUFZSyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNBLGtCQUFLTCxXQUFMLENBQWlCSSxTQUFqQixDQUEyQkMsR0FBM0IsQ0FBK0IsTUFBL0I7QUFDQSxrQkFBS0osTUFBTCxDQUFZRyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNGLFVBakJEOztBQW1CQSxjQUFLVCxPQUFMLENBQWFPLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLGFBQUs7QUFDekMsZ0JBQUlRLEVBQUVDLE1BQUYsS0FBYUQsRUFBRUUsYUFBbkIsRUFBa0M7QUFDL0IscUJBQUtqQixPQUFMLENBQWFRLFNBQWIsQ0FBdUJVLE1BQXZCLENBQThCLGlDQUE5Qjs7QUFFQSxvQkFBSyxJQUFJUCxJQUFJLENBQWIsRUFBZ0JBLElBQUksTUFBS1YsT0FBTCxDQUFhWSxNQUFqQyxFQUF5Q0YsR0FBekMsRUFBOEM7QUFDM0Msd0JBQUtWLE9BQUwsQ0FBYVUsQ0FBYixFQUFnQkgsU0FBaEIsQ0FBMEJVLE1BQTFCLENBQWlDLGlDQUFqQztBQUNGOztBQUVEcEIsd0JBQVNnQixJQUFULENBQWNOLFNBQWQsQ0FBd0JVLE1BQXhCLENBQStCLGlCQUEvQjtBQUNBLHFCQUFLZixNQUFMLENBQVlLLFNBQVosQ0FBc0JVLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0EscUJBQUtkLFdBQUwsQ0FBaUJJLFNBQWpCLENBQTJCVSxNQUEzQixDQUFrQyxNQUFsQztBQUNBLHFCQUFLYixNQUFMLENBQVlHLFNBQVosQ0FBc0JVLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0Y7QUFDSCxVQWJEO0FBY0Y7Ozs7OztrQkFoRGlCdEIsVTtBQWlEcEIiLCJmaWxlIjoiX2J1cmdlci1tZW51LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVyZ2VyTWVudSB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5idG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnVyZ2VyLWJ0bicpO1xyXG4gICAgICB0aGlzLm5hdkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2IC5oZWFkZXItbmF2X19saXN0Jyk7XHJcbiAgICAgIHRoaXMubmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maXhlZC1uYXYgLmhlYWRlci1uYXZfX2l0ZW0nKTtcclxuICAgICAgdGhpcy5oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XHJcbiAgICAgIHRoaXMubWFpbmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbmNvbnRlbnQnKTtcclxuICAgICAgdGhpcy5mb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9vdGVyJyk7XHJcblxyXG4gICAgICAvLyAgZXZlbnRzXHJcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xyXG4gICB9XHJcblxyXG4gICBfZXZlbnRzKCkge1xyXG4gICAgICB0aGlzLmJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgdGhpcy5uYXZMaXN0LmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1uYXZfX2xpc3QtLWJ1cmdlci1hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgIGxldCB0aW1lb3V0ID0gNTA7XHJcbiAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uYXZJdGVtLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgdGhpcy5uYXZJdGVtW2ldLmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1uYXZfX2l0ZW0tLWJ1cmdlci1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfSwgdGltZW91dCk7XHJcblxyXG4gICAgICAgICAgICB0aW1lb3V0ICs9IDUwO1xyXG4gICAgICAgICB9O1xyXG5cclxuICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdvdmVyZmxvdy1oaWRkZW4nKTtcclxuICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnYmx1cicpO1xyXG4gICAgICAgICB0aGlzLm1haW5jb250ZW50LmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcclxuICAgICAgICAgdGhpcy5mb290ZXIuY2xhc3NMaXN0LmFkZCgnYmx1cicpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMubmF2TGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgICAgICB0aGlzLm5hdkxpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaGVhZGVyLW5hdl9fbGlzdC0tYnVyZ2VyLWFjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5hdkl0ZW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgdGhpcy5uYXZJdGVtW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1uYXZfX2l0ZW0tLWJ1cmdlci1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmZsb3ctaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdibHVyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgfVxyXG59OyJdfQ==
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FixedHeader = function () {
   function FixedHeader() {
      _classCallCheck(this, FixedHeader);

      // DOM
      this.header = document.querySelector('.bottom-header');

      // Additional Vars
      this.offset = 1000;

      //  events
      this._events();
   }

   _createClass(FixedHeader, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            if (window.pageYOffset > _this.offset) {
               _this.header.style.transform = 'translateY(0)';
               _this.header.classList.add('bottom-header--fixed');
            } else if (window.pageYOffset > _this.offset / 3 * 2) {
               _this.header.style.transform = 'translateY(-100%)';
            } else {
               _this.header.classList.remove('bottom-header--fixed');
               _this.header.style.transform = 'translateY(0)';
            }
         });
      }
   }]);

   return FixedHeader;
}();

exports.default = FixedHeader;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9maXhlZC1oZWFkZXIuanMiXSwibmFtZXMiOlsiRml4ZWRIZWFkZXIiLCJoZWFkZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJvZmZzZXQiLCJfZXZlbnRzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhZ2VZT2Zmc2V0Iiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFc7QUFDbEIsMEJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLE1BQUwsR0FBY0MsU0FBU0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBZDs7QUFFQTtBQUNBLFdBQUtDLE1BQUwsR0FBYyxJQUFkOztBQUVBO0FBQ0EsV0FBS0MsT0FBTDtBQUNGOzs7O2dDQUVTO0FBQUE7O0FBQ1BDLGdCQUFPQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxhQUFLO0FBQ3BDLGdCQUFJRCxPQUFPRSxXQUFQLEdBQXFCLE1BQUtKLE1BQTlCLEVBQXNDO0FBQ25DLHFCQUFLSCxNQUFMLENBQVlRLEtBQVosQ0FBa0JDLFNBQWxCLEdBQThCLGVBQTlCO0FBQ0EscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkMsR0FBdEIsQ0FBMEIsc0JBQTFCO0FBQ0YsYUFIRCxNQUdPLElBQUlOLE9BQU9FLFdBQVAsR0FBc0IsTUFBS0osTUFBTCxHQUFjLENBQWYsR0FBb0IsQ0FBN0MsRUFBZ0Q7QUFDcEQscUJBQUtILE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsbUJBQTlCO0FBQ0YsYUFGTSxNQUVBO0FBQ0oscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkUsTUFBdEIsQ0FBNkIsc0JBQTdCO0FBQ0EscUJBQUtaLE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsZUFBOUI7QUFDRjtBQUNILFVBVkQ7QUFXRjs7Ozs7O2tCQXhCaUJWLFc7QUF5QnBCIiwiZmlsZSI6Il9maXhlZC1oZWFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGaXhlZEhlYWRlciB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm90dG9tLWhlYWRlcicpO1xyXG5cclxuICAgICAgLy8gQWRkaXRpb25hbCBWYXJzXHJcbiAgICAgIHRoaXMub2Zmc2V0ID0gMTAwMDtcclxuXHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fZXZlbnRzKCk7XHJcbiAgIH1cclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHtcclxuICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiAodGhpcy5vZmZzZXQgLyAzKSAqIDIpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTEwMCUpJztcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcbn07Il19
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProductItemsEvents = function () {
    function ProductItemsEvents() {
        _classCallCheck(this, ProductItemsEvents);

        // DOM
        this.itemsWrap = document.querySelector('.feauture-product');
        this.basketTotalPrice = document.querySelector('.user-panel__button-total-price');
        this.basketQty = document.querySelector('.user-panel__button-qty--basket');
        this.heartsQty = document.querySelector('.user-panel__button-qty--heart');
        this.imageZoomBtn = document.querySelector('.product__details-button--zoom');
        this.imgZoomWindow = document.querySelector('.img-zoom-window__img');

        // Additional Vars
        this.totalPrice = 0;
        this.totalQty = 0;
        this.totalLikes = 0;

        //  events
        this._events();
        this._loadBasketFromLocalStorege();
    }

    _createClass(ProductItemsEvents, [{
        key: '_events',
        value: function _events() {
            var _this = this;

            this.itemsWrap.addEventListener('click', function (e) {
                _this._addToBasket(e);
                _this._like(e);
                _this._openImgZoomWindow(e);
                _this._stars(e);
            });

            this._closeImgZoomWindow();
        }
    }, {
        key: '_addToBasket',
        value: function _addToBasket(e) {
            if (e.target.parentElement.dataset.price || e.target.dataset.price) {

                var targetBasket = null;
                if (e.target.tagName === 'I') {
                    targetBasket = e.target.parentElement;
                } else {
                    targetBasket = e.target;
                }

                var putInBasketArrow = document.createElement('i');

                putInBasketArrow.classList.add('fa');
                putInBasketArrow.classList.add('fa-arrow-down');
                putInBasketArrow.setAttribute('aria-hidden', 'true');

                targetBasket.appendChild(putInBasketArrow);

                setTimeout(function () {
                    targetBasket.removeChild(targetBasket.children[1]);
                }, 200);

                var itemPrice = targetBasket.dataset.price;
                this.totalPrice += +itemPrice;
                this.totalQty++;

                this.basketTotalPrice.textContent = '$' + this.totalPrice;
                this.basketQty.textContent = this.totalQty;

                localStorage.setItem('basketTotalPrice', this.totalPrice);
                localStorage.setItem('basketQty', this.totalQty);
            };
        }
    }, {
        key: '_loadBasketFromLocalStorege',
        value: function _loadBasketFromLocalStorege() {
            if (localStorage.getItem('basketTotalPrice')) {
                this.totalPrice = +localStorage.getItem('basketTotalPrice');
                this.basketTotalPrice.textContent = '$' + this.totalPrice;
            }

            if (localStorage.getItem('basketQty')) {
                this.totalQty = +localStorage.getItem('basketQty');
                this.basketQty.textContent = this.totalQty;
            }
        }
    }, {
        key: '_like',
        value: function _like(e) {
            if (e.target.parentElement.classList.contains('product__details-button--heart') || e.target.classList.contains('product__details-button--heart')) {

                var targetHeart = null;
                if (e.target.tagName === 'I') {
                    targetHeart = e.target.parentElement;
                } else {
                    targetHeart = e.target;
                }

                if (targetHeart.classList.contains('product__details-button--heart-active')) {
                    targetHeart.classList.remove('product__details-button--heart-active');
                    this.totalLikes--;
                    this.heartsQty.textContent = this.totalLikes;
                } else {
                    targetHeart.classList.add('product__details-button--heart-active');
                    this.totalLikes++;
                    this.heartsQty.textContent = this.totalLikes;
                }
            };
        }
    }, {
        key: '_openImgZoomWindow',
        value: function _openImgZoomWindow(e) {
            if (e.target.parentElement.classList.contains('product__details-button--zoom') || e.target.classList.contains('product__details-button--zoom')) {

                var targetZoomBtn = null;
                if (e.target.tagName === 'I') {
                    targetZoomBtn = e.target.parentElement;
                } else {
                    targetZoomBtn = e.target;
                }

                var imgSrc = targetZoomBtn.dataset.src;

                this.imgZoomWindow.setAttribute('src', imgSrc);
                this.imgZoomWindow.parentElement.classList.add('img-zoom-window--active');
                document.body.classList.add('overflow-hidden');
            }
        }
    }, {
        key: '_closeImgZoomWindow',
        value: function _closeImgZoomWindow(e) {
            this.imgZoomWindow.parentElement.addEventListener('click', function (e) {
                if (e.target) {
                    e.currentTarget.classList.remove('img-zoom-window--active');
                    document.body.classList.remove('overflow-hidden');
                }
            });
        }
    }, {
        key: '_stars',
        value: function _stars(e) {
            if (e.target.parentElement.classList.contains('product__rating-button') || e.target.classList.contains('product__rating-button')) {

                var targetStar = null;
                if (e.target.tagName === 'I') {
                    targetStar = e.target.parentElement;
                } else {
                    targetStar = e.target;
                }

                targetStar.classList.add('product__rating-button--active');

                if (targetStar.previousElementSibling && targetStar.previousElementSibling.classList.contains('product__rating-button--active')) {
                    this._removeClassForPreviousStars(targetStar, 'product__rating-button--active');
                };

                this._addClassForNextStars(targetStar, 'product__rating-button--active');
            }
        }
    }, {
        key: '_addClassForNextStars',
        value: function _addClassForNextStars(elem, activeClass) {
            while (elem = elem.nextElementSibling) {
                elem.classList.add(activeClass);
            };
        }
    }, {
        key: '_removeClassForPreviousStars',
        value: function _removeClassForPreviousStars(elem, activeClass) {
            do {
                elem = elem.previousElementSibling;
                elem.classList.remove(activeClass);
            } while (elem.previousElementSibling && elem.previousElementSibling.classList.contains(activeClass));
        }
    }]);

    return ProductItemsEvents;
}();

exports.default = ProductItemsEvents;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SiteInfo = function () {
   function SiteInfo() {
      _classCallCheck(this, SiteInfo);

      // DOM
      this.siteInfoWindow = document.querySelector('.site-info');
      this.siteInfoBtn = this.siteInfoWindow.querySelector('.site-info__label');

      this._btnEvent();
   }

   _createClass(SiteInfo, [{
      key: '_btnEvent',
      value: function _btnEvent() {
         var _this = this;

         var infoIcon = this.siteInfoBtn.children[0],
             closeIcon = this.siteInfoBtn.children[1];

         this.siteInfoBtn.addEventListener('click', function (e) {
            if (e.target === e.currentTarget || e.target.parentElement === e.currentTarget) {
               _this.siteInfoWindow.classList.toggle('site-info--active');
            }
         });
      }
   }]);

   return SiteInfo;
}();

exports.default = SiteInfo;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zaXRlLWluZm8uanMiXSwibmFtZXMiOlsiU2l0ZUluZm8iLCJzaXRlSW5mb1dpbmRvdyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNpdGVJbmZvQnRuIiwiX2J0bkV2ZW50IiwiaW5mb0ljb24iLCJjaGlsZHJlbiIsImNsb3NlSWNvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFE7QUFDbEIsdUJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLGNBQUwsR0FBc0JDLFNBQVNDLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBdEI7QUFDQSxXQUFLQyxXQUFMLEdBQW1CLEtBQUtILGNBQUwsQ0FBb0JFLGFBQXBCLENBQWtDLG1CQUFsQyxDQUFuQjs7QUFFQSxXQUFLRSxTQUFMO0FBQ0Y7Ozs7a0NBRVc7QUFBQTs7QUFDVCxhQUFJQyxXQUFXLEtBQUtGLFdBQUwsQ0FBaUJHLFFBQWpCLENBQTBCLENBQTFCLENBQWY7QUFBQSxhQUNJQyxZQUFZLEtBQUtKLFdBQUwsQ0FBaUJHLFFBQWpCLENBQTBCLENBQTFCLENBRGhCOztBQUdBLGNBQUtILFdBQUwsQ0FBaUJLLGdCQUFqQixDQUFrQyxPQUFsQyxFQUEyQyxhQUFLO0FBQzdDLGdCQUFJQyxFQUFFQyxNQUFGLEtBQWFELEVBQUVFLGFBQWYsSUFBZ0NGLEVBQUVDLE1BQUYsQ0FBU0UsYUFBVCxLQUEyQkgsRUFBRUUsYUFBakUsRUFBZ0Y7QUFDN0UscUJBQUtYLGNBQUwsQ0FBb0JhLFNBQXBCLENBQThCQyxNQUE5QixDQUFxQyxtQkFBckM7QUFDRjtBQUNILFVBSkQ7QUFLRjs7Ozs7O2tCQWxCaUJmLFE7QUFtQnBCIiwiZmlsZSI6Il9zaXRlLWluZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTaXRlSW5mbyB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5zaXRlSW5mb1dpbmRvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaXRlLWluZm8nKTtcclxuICAgICAgdGhpcy5zaXRlSW5mb0J0biA9IHRoaXMuc2l0ZUluZm9XaW5kb3cucXVlcnlTZWxlY3RvcignLnNpdGUtaW5mb19fbGFiZWwnKTtcclxuXHJcbiAgICAgIHRoaXMuX2J0bkV2ZW50KCk7XHJcbiAgIH07XHJcblxyXG4gICBfYnRuRXZlbnQoKSB7XHJcbiAgICAgIGxldCBpbmZvSWNvbiA9IHRoaXMuc2l0ZUluZm9CdG4uY2hpbGRyZW5bMF0sXHJcbiAgICAgICAgICBjbG9zZUljb24gPSB0aGlzLnNpdGVJbmZvQnRuLmNoaWxkcmVuWzFdO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5zaXRlSW5mb0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldC5wYXJlbnRFbGVtZW50ID09PSBlLmN1cnJlbnRUYXJnZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5zaXRlSW5mb1dpbmRvdy5jbGFzc0xpc3QudG9nZ2xlKCdzaXRlLWluZm8tLWFjdGl2ZScpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG59OyJdfQ==
},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Subscribe = function () {
    function Subscribe() {
        _classCallCheck(this, Subscribe);

        // DOM
        this.subscribeForm = document.querySelector('.subscribe__form');
        this.subscribeBtn = this.subscribeForm.querySelector('.subscribe__form-btn');

        //  Event
        this._subscribeFrormSubmit();
        this._btnTargetAnimation();
    }

    _createClass(Subscribe, [{
        key: '_subscribeFrormSubmit',
        value: function _subscribeFrormSubmit() {
            var _this = this;

            this.subscribeForm.addEventListener('submit', function (e) {
                e.preventDefault();

                var preloaderIcon = _this.subscribeForm.querySelector('.subscribe__form-btn--preloader'),
                    sentIcon = _this.subscribeForm.querySelector('.subscribe__form-btn--sent');

                preloaderIcon.style.display = 'flex';

                var formData = {
                    email: e.target.email.value
                };

                var options = {
                    method: 'POST',
                    body: JSON.stringify(formData)
                };

                fetch('https://maxs-4ebe4.firebaseio.com/clients.json', options).then(function (response) {
                    if (response.status === 200) {
                        preloaderIcon.style.display = 'none';
                        sentIcon.style.display = 'flex';

                        setTimeout(function () {
                            sentIcon.style.display = 'none';
                        }, 2000);

                        e.target.email.value = '';
                    }
                });
            });
        }
    }, {
        key: '_btnTargetAnimation',
        value: function _btnTargetAnimation() {
            var _this2 = this;

            this.subscribeBtn.addEventListener('click', function (e) {
                var posX = e.offsetX + 'px',
                    posY = e.offsetY + 'px';

                var targetAnimation = document.createElement('div');
                targetAnimation.classList.add('button-bubble__form-btn-terget-animation');
                targetAnimation.style.left = posX;
                targetAnimation.style.top = posY;
                _this2.subscribeBtn.appendChild(targetAnimation);

                setTimeout(function () {
                    var delEl = _this2.subscribeBtn.children[0];
                    _this2.subscribeBtn.removeChild(delEl);
                }, 400);
            });
        }
    }]);

    return Subscribe;
}();

exports.default = Subscribe;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdWJzY3JpYmUuanMiXSwibmFtZXMiOlsiU3Vic2NyaWJlIiwic3Vic2NyaWJlRm9ybSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN1YnNjcmliZUJ0biIsIl9zdWJzY3JpYmVGcm9ybVN1Ym1pdCIsIl9idG5UYXJnZXRBbmltYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwicHJlbG9hZGVySWNvbiIsInNlbnRJY29uIiwic3R5bGUiLCJkaXNwbGF5IiwiZm9ybURhdGEiLCJlbWFpbCIsInRhcmdldCIsInZhbHVlIiwib3B0aW9ucyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzZXRUaW1lb3V0IiwicG9zWCIsIm9mZnNldFgiLCJwb3NZIiwib2Zmc2V0WSIsInRhcmdldEFuaW1hdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJsZWZ0IiwidG9wIiwiYXBwZW5kQ2hpbGQiLCJkZWxFbCIsImNoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFM7QUFDakIseUJBQWM7QUFBQTs7QUFDVjtBQUNBLGFBQUtDLGFBQUwsR0FBcUJDLFNBQVNDLGFBQVQsQ0FBdUIsa0JBQXZCLENBQXJCO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQixLQUFLSCxhQUFMLENBQW1CRSxhQUFuQixDQUFpQyxzQkFBakMsQ0FBcEI7O0FBRUE7QUFDQSxhQUFLRSxxQkFBTDtBQUNBLGFBQUtDLG1CQUFMO0FBQ0g7Ozs7Z0RBRXVCO0FBQUE7O0FBQ3BCLGlCQUFLTCxhQUFMLENBQW1CTSxnQkFBbkIsQ0FBb0MsUUFBcEMsRUFBOEMsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2pEQSxrQkFBRUMsY0FBRjs7QUFFSixvQkFBSUMsZ0JBQWdCLE1BQUtULGFBQUwsQ0FBbUJFLGFBQW5CLENBQWlDLGlDQUFqQyxDQUFwQjtBQUFBLG9CQUNJUSxXQUFXLE1BQUtWLGFBQUwsQ0FBbUJFLGFBQW5CLENBQWlDLDRCQUFqQyxDQURmOztBQUdBTyw4QkFBY0UsS0FBZCxDQUFvQkMsT0FBcEIsR0FBOEIsTUFBOUI7O0FBRUEsb0JBQUlDLFdBQVc7QUFDWEMsMkJBQU9QLEVBQUVRLE1BQUYsQ0FBU0QsS0FBVCxDQUFlRTtBQURYLGlCQUFmOztBQUlBLG9CQUFJQyxVQUFVO0FBQ1ZDLDRCQUFRLE1BREU7QUFFVkMsMEJBQU1DLEtBQUtDLFNBQUwsQ0FBZVIsUUFBZjtBQUZJLGlCQUFkOztBQUtBUyxzQkFBTSxnREFBTixFQUF3REwsT0FBeEQsRUFDS00sSUFETCxDQUNVLFVBQVVDLFFBQVYsRUFBb0I7QUFDdEIsd0JBQUlBLFNBQVNDLE1BQVQsS0FBb0IsR0FBeEIsRUFBNkI7QUFDekJoQixzQ0FBY0UsS0FBZCxDQUFvQkMsT0FBcEIsR0FBOEIsTUFBOUI7QUFDQUYsaUNBQVNDLEtBQVQsQ0FBZUMsT0FBZixHQUF5QixNQUF6Qjs7QUFFQWMsbUNBQVcsWUFBTTtBQUNiaEIscUNBQVNDLEtBQVQsQ0FBZUMsT0FBZixHQUF5QixNQUF6QjtBQUNILHlCQUZELEVBRUcsSUFGSDs7QUFJQUwsMEJBQUVRLE1BQUYsQ0FBU0QsS0FBVCxDQUFlRSxLQUFmLEdBQXVCLEVBQXZCO0FBQ0g7QUFDSixpQkFaTDtBQWFDLGFBOUJEO0FBK0JIOzs7OENBRXFCO0FBQUE7O0FBQ2xCLGlCQUFLYixZQUFMLENBQWtCRyxnQkFBbEIsQ0FBbUMsT0FBbkMsRUFBNEMsYUFBSztBQUM3QyxvQkFBSXFCLE9BQU9wQixFQUFFcUIsT0FBRixHQUFZLElBQXZCO0FBQUEsb0JBQ0lDLE9BQU90QixFQUFFdUIsT0FBRixHQUFZLElBRHZCOztBQUdBLG9CQUFJQyxrQkFBa0I5QixTQUFTK0IsYUFBVCxDQUF1QixLQUF2QixDQUF0QjtBQUNBRCxnQ0FBZ0JFLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QiwwQ0FBOUI7QUFDQUgsZ0NBQWdCcEIsS0FBaEIsQ0FBc0J3QixJQUF0QixHQUE2QlIsSUFBN0I7QUFDQUksZ0NBQWdCcEIsS0FBaEIsQ0FBc0J5QixHQUF0QixHQUE0QlAsSUFBNUI7QUFDQSx1QkFBSzFCLFlBQUwsQ0FBa0JrQyxXQUFsQixDQUE4Qk4sZUFBOUI7O0FBRUFMLDJCQUFXLFlBQU07QUFDYix3QkFBSVksUUFBUSxPQUFLbkMsWUFBTCxDQUFrQm9DLFFBQWxCLENBQTJCLENBQTNCLENBQVo7QUFDQSwyQkFBS3BDLFlBQUwsQ0FBa0JxQyxXQUFsQixDQUE4QkYsS0FBOUI7QUFDSCxpQkFIRCxFQUdHLEdBSEg7QUFJSCxhQWREO0FBZUg7Ozs7OztrQkE3RGdCdkMsUztBQThEcEIiLCJmaWxlIjoiX3N1YnNjcmliZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1YnNjcmliZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBET01cclxuICAgICAgICB0aGlzLnN1YnNjcmliZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtJyk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4gPSB0aGlzLnN1YnNjcmliZUZvcm0ucXVlcnlTZWxlY3RvcignLnN1YnNjcmliZV9fZm9ybS1idG4nKTtcclxuXHJcbiAgICAgICAgLy8gIEV2ZW50XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlRnJvcm1TdWJtaXQoKTtcclxuICAgICAgICB0aGlzLl9idG5UYXJnZXRBbmltYXRpb24oKTtcclxuICAgIH07XHJcblxyXG4gICAgX3N1YnNjcmliZUZyb3JtU3VibWl0KCkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHByZWxvYWRlckljb24gPSB0aGlzLnN1YnNjcmliZUZvcm0ucXVlcnlTZWxlY3RvcignLnN1YnNjcmliZV9fZm9ybS1idG4tLXByZWxvYWRlcicpLFxyXG4gICAgICAgICAgICBzZW50SWNvbiA9IHRoaXMuc3Vic2NyaWJlRm9ybS5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtLWJ0bi0tc2VudCcpO1xyXG5cclxuICAgICAgICBwcmVsb2FkZXJJY29uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblxyXG4gICAgICAgIGxldCBmb3JtRGF0YSA9IHtcclxuICAgICAgICAgICAgZW1haWw6IGUudGFyZ2V0LmVtYWlsLnZhbHVlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZldGNoKCdodHRwczovL21heHMtNGViZTQuZmlyZWJhc2Vpby5jb20vY2xpZW50cy5qc29uJywgb3B0aW9ucylcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkZXJJY29uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuZW1haWwudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9idG5UYXJnZXRBbmltYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgbGV0IHBvc1ggPSBlLm9mZnNldFggKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgcG9zWSA9IGUub2Zmc2V0WSArICdweCc7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0QW5pbWF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5jbGFzc0xpc3QuYWRkKCdidXR0b24tYnViYmxlX19mb3JtLWJ0bi10ZXJnZXQtYW5pbWF0aW9uJyk7XHJcbiAgICAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5zdHlsZS5sZWZ0ID0gcG9zWDtcclxuICAgICAgICAgICAgdGFyZ2V0QW5pbWF0aW9uLnN0eWxlLnRvcCA9IHBvc1k7XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlQnRuLmFwcGVuZENoaWxkKHRhcmdldEFuaW1hdGlvbik7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBkZWxFbCA9IHRoaXMuc3Vic2NyaWJlQnRuLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4ucmVtb3ZlQ2hpbGQoZGVsRWwpO1xyXG4gICAgICAgICAgICB9LCA0MDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufTsiXX0=
},{}],8:[function(require,module,exports){
'use strict';

var _addProductItems = require('./_add-product-items');

var _addProductItems2 = _interopRequireDefault(_addProductItems);

var _burgerMenu = require('./_burger-menu');

var _burgerMenu2 = _interopRequireDefault(_burgerMenu);

var _fixedHeader = require('./_fixed-header');

var _fixedHeader2 = _interopRequireDefault(_fixedHeader);

var _SearchLoginForms = require('./_Search-login-forms');

var _SearchLoginForms2 = _interopRequireDefault(_SearchLoginForms);

var _productItemsEvents = require('./_product-items-events');

var _productItemsEvents2 = _interopRequireDefault(_productItemsEvents);

var _subscribe = require('./_subscribe');

var _subscribe2 = _interopRequireDefault(_subscribe);

var _siteInfo = require('./_site-info');

var _siteInfo2 = _interopRequireDefault(_siteInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('DOMContentLoaded', init);

function init() {

    // Clone navigation
    function cloneNav() {
        var nav = document.querySelector('.header-nav__list').cloneNode(true);
        var cloneNavParrent = document.querySelector('.fixed-nav');

        cloneNavParrent.insertBefore(nav, cloneNavParrent[0]);
    };
    cloneNav();

    // Set margin top for top section
    function setMargin() {
        var header = document.querySelector('.header'),
            topSection = document.querySelector('.top-section');

        topSection.style.marginTop = header.offsetHeight + 'px';
    };
    setMargin();

    /* // Google Map
    function initMap() {
        let yuzhnyBriz = {lat: 46.96339, lng: 31.987823};
        let map = new google.maps.Map(document.getElementById('map'), {
          zoom: 17,
          center: yuzhnyBriz
        });
        let marker = new google.maps.Marker({
          position: yuzhnyBriz,
          map: map,
          title: 'Южный бриз'
        });
    }; */

    var addProductItems = new _addProductItems2.default();
    var burgerMenu = new _burgerMenu2.default();
    var fixedHeader = new _fixedHeader2.default();
    var searchLoginForms = new _SearchLoginForms2.default();
    var productItemsEvents = new _productItemsEvents2.default();
    var subscribe = new _subscribe2.default();
    var siteInfo = new _siteInfo2.default();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfN2Y2ODQzOTEuanMiXSwibmFtZXMiOlsid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXQiLCJjbG9uZU5hdiIsIm5hdiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lTm9kZSIsImNsb25lTmF2UGFycmVudCIsImluc2VydEJlZm9yZSIsInNldE1hcmdpbiIsImhlYWRlciIsInRvcFNlY3Rpb24iLCJzdHlsZSIsIm1hcmdpblRvcCIsIm9mZnNldEhlaWdodCIsImFkZFByb2R1Y3RJdGVtcyIsImJ1cmdlck1lbnUiLCJmaXhlZEhlYWRlciIsInNlYXJjaExvZ2luRm9ybXMiLCJwcm9kdWN0SXRlbXNFdmVudHMiLCJzdWJzY3JpYmUiLCJzaXRlSW5mbyJdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBUkFBLE9BQU9DLGdCQUFQLENBQXdCLGtCQUF4QixFQUE0Q0MsSUFBNUM7O0FBVUEsU0FBU0EsSUFBVCxHQUFnQjs7QUFFWjtBQUNBLGFBQVNDLFFBQVQsR0FBb0I7QUFDaEIsWUFBSUMsTUFBTUMsU0FBU0MsYUFBVCxDQUF1QixtQkFBdkIsRUFBNENDLFNBQTVDLENBQXNELElBQXRELENBQVY7QUFDQSxZQUFJQyxrQkFBa0JILFNBQVNDLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBdEI7O0FBRUFFLHdCQUFnQkMsWUFBaEIsQ0FBNkJMLEdBQTdCLEVBQWtDSSxnQkFBZ0IsQ0FBaEIsQ0FBbEM7QUFDSDtBQUNETDs7QUFFQTtBQUNBLGFBQVNPLFNBQVQsR0FBcUI7QUFDakIsWUFBSUMsU0FBU04sU0FBU0MsYUFBVCxDQUF1QixTQUF2QixDQUFiO0FBQUEsWUFDSU0sYUFBYVAsU0FBU0MsYUFBVCxDQUF1QixjQUF2QixDQURqQjs7QUFHQU0sbUJBQVdDLEtBQVgsQ0FBaUJDLFNBQWpCLEdBQTZCSCxPQUFPSSxZQUFQLEdBQXNCLElBQW5EO0FBQ0g7QUFDREw7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0FBY0EsUUFBTU0sa0JBQWtCLCtCQUF4QjtBQUNBLFFBQU1DLGFBQWEsMEJBQW5CO0FBQ0EsUUFBTUMsY0FBYywyQkFBcEI7QUFDQSxRQUFNQyxtQkFBbUIsZ0NBQXpCO0FBQ0EsUUFBTUMscUJBQXFCLGtDQUEzQjtBQUNBLFFBQU1DLFlBQVkseUJBQWxCO0FBQ0EsUUFBTUMsV0FBVyx3QkFBakI7QUFDSCIsImZpbGUiOiJmYWtlXzdmNjg0MzkxLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0KTtcclxuXHJcbmltcG9ydCBBZGRQcm9kdWN0SXRlbXMgZnJvbSAnLi9fYWRkLXByb2R1Y3QtaXRlbXMnO1xyXG5pbXBvcnQgQnVyZ2VyTWVudSBmcm9tICcuL19idXJnZXItbWVudSc7XHJcbmltcG9ydCBGaXhlZEhlYWRlciBmcm9tICcuL19maXhlZC1oZWFkZXInO1xyXG5pbXBvcnQgU2VhcmNoTG9naW5Gb3JtcyBmcm9tICcuL19TZWFyY2gtbG9naW4tZm9ybXMnO1xyXG5pbXBvcnQgUHJvZHVjdEl0ZW1zRXZlbnRzIGZyb20gJy4vX3Byb2R1Y3QtaXRlbXMtZXZlbnRzJztcclxuaW1wb3J0IFN1YnNjcmliZSBmcm9tICcuL19zdWJzY3JpYmUnO1xyXG5pbXBvcnQgU2l0ZUluZm8gZnJvbSAnLi9fc2l0ZS1pbmZvJztcclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgIFxyXG4gICAgLy8gQ2xvbmUgbmF2aWdhdGlvblxyXG4gICAgZnVuY3Rpb24gY2xvbmVOYXYoKSB7XHJcbiAgICAgICAgbGV0IG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItbmF2X19saXN0JykuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgIGxldCBjbG9uZU5hdlBhcnJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2Jyk7XHJcblxyXG4gICAgICAgIGNsb25lTmF2UGFycmVudC5pbnNlcnRCZWZvcmUobmF2LCBjbG9uZU5hdlBhcnJlbnRbMF0pO1xyXG4gICAgfTtcclxuICAgIGNsb25lTmF2KCk7XHJcblxyXG4gICAgLy8gU2V0IG1hcmdpbiB0b3AgZm9yIHRvcCBzZWN0aW9uXHJcbiAgICBmdW5jdGlvbiBzZXRNYXJnaW4oKSB7XHJcbiAgICAgICAgbGV0IGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKSxcclxuICAgICAgICAgICAgdG9wU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b3Atc2VjdGlvbicpO1xyXG5cclxuICAgICAgICB0b3BTZWN0aW9uLnN0eWxlLm1hcmdpblRvcCA9IGhlYWRlci5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgfTtcclxuICAgIHNldE1hcmdpbigpXHJcblxyXG4gICAgLyogLy8gR29vZ2xlIE1hcFxyXG4gICAgZnVuY3Rpb24gaW5pdE1hcCgpIHtcclxuICAgICAgICBsZXQgeXV6aG55QnJpeiA9IHtsYXQ6IDQ2Ljk2MzM5LCBsbmc6IDMxLjk4NzgyM307XHJcbiAgICAgICAgbGV0IG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XHJcbiAgICAgICAgICB6b29tOiAxNyxcclxuICAgICAgICAgIGNlbnRlcjogeXV6aG55QnJpelxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgICAgIHBvc2l0aW9uOiB5dXpobnlCcml6LFxyXG4gICAgICAgICAgbWFwOiBtYXAsXHJcbiAgICAgICAgICB0aXRsZTogJ9Cu0LbQvdGL0Lkg0LHRgNC40LcnXHJcbiAgICAgICAgfSk7XHJcbiAgICB9OyAqL1xyXG5cclxuICAgIGNvbnN0IGFkZFByb2R1Y3RJdGVtcyA9IG5ldyBBZGRQcm9kdWN0SXRlbXM7XHJcbiAgICBjb25zdCBidXJnZXJNZW51ID0gbmV3IEJ1cmdlck1lbnU7XHJcbiAgICBjb25zdCBmaXhlZEhlYWRlciA9IG5ldyBGaXhlZEhlYWRlcjtcclxuICAgIGNvbnN0IHNlYXJjaExvZ2luRm9ybXMgPSBuZXcgU2VhcmNoTG9naW5Gb3JtcztcclxuICAgIGNvbnN0IHByb2R1Y3RJdGVtc0V2ZW50cyA9IG5ldyBQcm9kdWN0SXRlbXNFdmVudHM7XHJcbiAgICBjb25zdCBzdWJzY3JpYmUgPSBuZXcgU3Vic2NyaWJlO1xyXG4gICAgY29uc3Qgc2l0ZUluZm8gPSBuZXcgU2l0ZUluZm87XHJcbn07Il19
},{"./_Search-login-forms":1,"./_add-product-items":2,"./_burger-menu":3,"./_fixed-header":4,"./_product-items-events":5,"./_site-info":6,"./_subscribe":7}]},{},[8])
//# sourceMappingURL=data:application/json;base64,
