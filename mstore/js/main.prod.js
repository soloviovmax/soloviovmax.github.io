(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchLoginForms = function () {
   function SearchLoginForms() {
      _classCallCheck(this, SearchLoginForms);

      // DOM
      this.serchWrap = document.querySelector('.user-panel__item--search');
      this.searchBtn = this.serchWrap.querySelector('.user-panel__button--search');
      this.searchForm = this.serchWrap.querySelector('.user-panel__search-form');

      this.loginWrap = document.querySelector('.user-panel__item--login');
      this.loginBtn = this.loginWrap.querySelector('.user-panel__button--user');
      this.loginFormWrap = this.loginWrap.querySelector('.user-panel__login-form-wrap');

      this.serchFormActiveClass = 'user-panel__search-form--active';
      this.loginFormActiveClass = 'user-panel__login-form-wrap--active';

      this.switchesBrns = this.loginWrap.querySelectorAll('.user-panel__login-switches-btn');
      //  events
      this._toggleInput(this.searchBtn, this.searchForm, this.serchFormActiveClass, this.loginFormWrap, this.loginFormActiveClass);
      this._toggleInput(this.loginBtn, this.loginFormWrap, this.loginFormActiveClass, this.searchForm, this.serchFormActiveClass);

      this._scrollCloseInput();

      this._switchesBtnsEvents();
   }

   _createClass(SearchLoginForms, [{
      key: '_toggleInput',
      value: function _toggleInput(btn, form, activeClass, mustBeClose, mustBeCloseActiveClass) {
         btn.addEventListener('click', function (e) {
            if (e.target === e.currentTarget || e.target.parentElement === e.currentTarget) {
               form.classList.toggle(activeClass);

               if (mustBeClose.classList.contains(mustBeCloseActiveClass)) {
                  mustBeClose.classList.remove(mustBeCloseActiveClass);
               }
            }
         });
      }
   }, {
      key: '_scrollCloseInput',
      value: function _scrollCloseInput() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            if (_this.searchForm.classList.contains(_this.serchFormActiveClass)) {
               _this.searchForm.classList.remove(_this.serchFormActiveClass);
            };

            if (_this.loginFormWrap.classList.contains(_this.loginFormActiveClass)) {
               _this.loginFormWrap.classList.remove(_this.loginFormActiveClass);
            };
         });
      }
   }, {
      key: '_switchesBtnsEvents',
      value: function _switchesBtnsEvents() {
         var signInBtn = this.switchesBrns[0],
             registerBtn = this.switchesBrns[1],
             confirmPasswordInput = this.loginFormWrap.querySelector('.user-panel__login-input--confirm-password');

         registerBtn.addEventListener('click', function (e) {
            if (e.currentTarget.classList.contains('user-panel__login-switches-btn--nonactive')) {
               e.currentTarget.classList.remove('user-panel__login-switches-btn--nonactive');
               signInBtn.classList.add('user-panel__login-switches-btn--nonactive');

               confirmPasswordInput.setAttribute('required', '');
               confirmPasswordInput.style.display = 'block';
            }
         });

         signInBtn.addEventListener('click', function (e) {
            if (e.currentTarget.classList.contains('user-panel__login-switches-btn--nonactive')) {
               e.currentTarget.classList.remove('user-panel__login-switches-btn--nonactive');
               registerBtn.classList.add('user-panel__login-switches-btn--nonactive');

               confirmPasswordInput.removeAttribute('required');
               confirmPasswordInput.style.display = 'none';
               confirmPasswordInput.value = '';
            }
         });
      }
   }]);

   return SearchLoginForms;
}();

exports.default = SearchLoginForms;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9TZWFyY2gtbG9naW4tZm9ybXMuanMiXSwibmFtZXMiOlsiU2VhcmNoTG9naW5Gb3JtcyIsInNlcmNoV3JhcCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNlYXJjaEJ0biIsInNlYXJjaEZvcm0iLCJsb2dpbldyYXAiLCJsb2dpbkJ0biIsImxvZ2luRm9ybVdyYXAiLCJzZXJjaEZvcm1BY3RpdmVDbGFzcyIsImxvZ2luRm9ybUFjdGl2ZUNsYXNzIiwic3dpdGNoZXNCcm5zIiwicXVlcnlTZWxlY3RvckFsbCIsIl90b2dnbGVJbnB1dCIsIl9zY3JvbGxDbG9zZUlucHV0IiwiX3N3aXRjaGVzQnRuc0V2ZW50cyIsImJ0biIsImZvcm0iLCJhY3RpdmVDbGFzcyIsIm11c3RCZUNsb3NlIiwibXVzdEJlQ2xvc2VBY3RpdmVDbGFzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJjb250YWlucyIsInJlbW92ZSIsIndpbmRvdyIsInNpZ25JbkJ0biIsInJlZ2lzdGVyQnRuIiwiY29uZmlybVBhc3N3b3JkSW5wdXQiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsImRpc3BsYXkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsZ0I7QUFDbEIsK0JBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLFNBQUwsR0FBaUJDLFNBQVNDLGFBQVQsQ0FBdUIsMkJBQXZCLENBQWpCO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixLQUFLSCxTQUFMLENBQWVFLGFBQWYsQ0FBNkIsNkJBQTdCLENBQWpCO0FBQ0EsV0FBS0UsVUFBTCxHQUFrQixLQUFLSixTQUFMLENBQWVFLGFBQWYsQ0FBNkIsMEJBQTdCLENBQWxCOztBQUVBLFdBQUtHLFNBQUwsR0FBaUJKLFNBQVNDLGFBQVQsQ0FBdUIsMEJBQXZCLENBQWpC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SUMsRUFBRUUsYUFBRixDQUFnQkUsU0FBaEIsQ0FBMEJFLFFBQTFCLENBQW1DLDJDQUFuQyxDQUFKLEVBQXFGO0FBQ2xGTixpQkFBRUUsYUFBRixDQUFnQkUsU0FBaEIsQ0FBMEJHLE1BQTFCLENBQWlDLDJDQUFqQztBQUNBRywyQkFBWU4sU0FBWixDQUFzQlEsR0FBdEIsQ0FBMEIsMkNBQTFCOztBQUVBRCxvQ0FBcUJLLGVBQXJCLENBQXFDLFVBQXJDO0FBQ0FMLG9DQUFxQkcsS0FBckIsQ0FBMkJDLE9BQTNCLEdBQXFDLE1BQXJDO0FBQ0FKLG9DQUFxQk0sS0FBckIsR0FBNkIsRUFBN0I7QUFDRjtBQUNILFVBVEQ7QUFVRjs7Ozs7O2tCQXpFaUJ2QyxnQjtBQTBFcEIiLCJmaWxlIjoiX1NlYXJjaC1sb2dpbi1mb3Jtcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaExvZ2luRm9ybXMge1xyXG4gICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgLy8gRE9NXHJcbiAgICAgIHRoaXMuc2VyY2hXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItcGFuZWxfX2l0ZW0tLXNlYXJjaCcpO1xyXG4gICAgICB0aGlzLnNlYXJjaEJ0biA9IHRoaXMuc2VyY2hXcmFwLnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19idXR0b24tLXNlYXJjaCcpO1xyXG4gICAgICB0aGlzLnNlYXJjaEZvcm0gPSB0aGlzLnNlcmNoV3JhcC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fc2VhcmNoLWZvcm0nKTtcclxuXHJcbiAgICAgIHRoaXMubG9naW5XcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItcGFuZWxfX2l0ZW0tLWxvZ2luJyk7XHJcbiAgICAgIHRoaXMubG9naW5CdG4gPSB0aGlzLmxvZ2luV3JhcC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fYnV0dG9uLS11c2VyJyk7XHJcbiAgICAgIHRoaXMubG9naW5Gb3JtV3JhcCA9IHRoaXMubG9naW5XcmFwLnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19sb2dpbi1mb3JtLXdyYXAnKTtcclxuXHJcbiAgICAgIHRoaXMuc2VyY2hGb3JtQWN0aXZlQ2xhc3MgPSAndXNlci1wYW5lbF9fc2VhcmNoLWZvcm0tLWFjdGl2ZSc7XHJcbiAgICAgIHRoaXMubG9naW5Gb3JtQWN0aXZlQ2xhc3MgPSAndXNlci1wYW5lbF9fbG9naW4tZm9ybS13cmFwLS1hY3RpdmUnO1xyXG5cclxuICAgICAgdGhpcy5zd2l0Y2hlc0JybnMgPSB0aGlzLmxvZ2luV3JhcC5xdWVyeVNlbGVjdG9yQWxsKCcudXNlci1wYW5lbF9fbG9naW4tc3dpdGNoZXMtYnRuJyk7XHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fdG9nZ2xlSW5wdXQodGhpcy5zZWFyY2hCdG4sIHRoaXMuc2VhcmNoRm9ybSwgdGhpcy5zZXJjaEZvcm1BY3RpdmVDbGFzcywgdGhpcy5sb2dpbkZvcm1XcmFwLCB0aGlzLmxvZ2luRm9ybUFjdGl2ZUNsYXNzKTtcclxuICAgICAgdGhpcy5fdG9nZ2xlSW5wdXQodGhpcy5sb2dpbkJ0biwgdGhpcy5sb2dpbkZvcm1XcmFwLCB0aGlzLmxvZ2luRm9ybUFjdGl2ZUNsYXNzLCB0aGlzLnNlYXJjaEZvcm0sIHRoaXMuc2VyY2hGb3JtQWN0aXZlQ2xhc3MpO1xyXG5cclxuICAgICAgdGhpcy5fc2Nyb2xsQ2xvc2VJbnB1dCgpO1xyXG5cclxuICAgICAgdGhpcy5fc3dpdGNoZXNCdG5zRXZlbnRzKCk7XHJcbiAgIH07XHJcblxyXG4gICBfdG9nZ2xlSW5wdXQoYnRuLCBmb3JtLCBhY3RpdmVDbGFzcywgbXVzdEJlQ2xvc2UsIG11c3RCZUNsb3NlQWN0aXZlQ2xhc3MpIHtcclxuICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQgPT09IGUuY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC50b2dnbGUoYWN0aXZlQ2xhc3MpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG11c3RCZUNsb3NlLmNsYXNzTGlzdC5jb250YWlucyhtdXN0QmVDbG9zZUFjdGl2ZUNsYXNzKSkge1xyXG4gICAgICAgICAgICAgICBtdXN0QmVDbG9zZS5jbGFzc0xpc3QucmVtb3ZlKG11c3RCZUNsb3NlQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgIH07XHJcblxyXG4gICBfc2Nyb2xsQ2xvc2VJbnB1dCgpIHtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGUgPT4ge1xyXG4gICAgICAgICBpZiAodGhpcy5zZWFyY2hGb3JtLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLnNlcmNoRm9ybUFjdGl2ZUNsYXNzKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaEZvcm0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNlcmNoRm9ybUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgIGlmICh0aGlzLmxvZ2luRm9ybVdyYXAuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMubG9naW5Gb3JtQWN0aXZlQ2xhc3MpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9naW5Gb3JtV3JhcC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMubG9naW5Gb3JtQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICB9OyBcclxuICAgICAgfSk7XHJcbiAgIH07XHJcblxyXG4gICBfc3dpdGNoZXNCdG5zRXZlbnRzKCkge1xyXG4gICAgICBsZXQgc2lnbkluQnRuID0gdGhpcy5zd2l0Y2hlc0JybnNbMF0sXHJcbiAgICAgICAgICByZWdpc3RlckJ0biA9IHRoaXMuc3dpdGNoZXNCcm5zWzFdLFxyXG4gICAgICAgICAgY29uZmlybVBhc3N3b3JkSW5wdXQgPSB0aGlzLmxvZ2luRm9ybVdyYXAucXVlcnlTZWxlY3RvcignLnVzZXItcGFuZWxfX2xvZ2luLWlucHV0LS1jb25maXJtLXBhc3N3b3JkJyk7XHJcblxyXG4gICAgICByZWdpc3RlckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndXNlci1wYW5lbF9fbG9naW4tc3dpdGNoZXMtYnRuLS1ub25hY3RpdmUnKSkge1xyXG4gICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgndXNlci1wYW5lbF9fbG9naW4tc3dpdGNoZXMtYnRuLS1ub25hY3RpdmUnKTtcclxuICAgICAgICAgICAgc2lnbkluQnRuLmNsYXNzTGlzdC5hZGQoJ3VzZXItcGFuZWxfX2xvZ2luLXN3aXRjaGVzLWJ0bi0tbm9uYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICBjb25maXJtUGFzc3dvcmRJbnB1dC5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJywgJycpO1xyXG4gICAgICAgICAgICBjb25maXJtUGFzc3dvcmRJbnB1dC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNpZ25JbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndXNlci1wYW5lbF9fbG9naW4tc3dpdGNoZXMtYnRuLS1ub25hY3RpdmUnKSkge1xyXG4gICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgndXNlci1wYW5lbF9fbG9naW4tc3dpdGNoZXMtYnRuLS1ub25hY3RpdmUnKTtcclxuICAgICAgICAgICAgcmVnaXN0ZXJCdG4uY2xhc3NMaXN0LmFkZCgndXNlci1wYW5lbF9fbG9naW4tc3dpdGNoZXMtYnRuLS1ub25hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbmZpcm1QYXNzd29yZElucHV0LnJlbW92ZUF0dHJpYnV0ZSgncmVxdWlyZWQnKTtcclxuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkSW5wdXQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkSW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgfSAgICAgICBcclxuICAgICAgfSk7XHJcbiAgIH07XHJcbn07Il19
},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AddProductItems = function () {
    function AddProductItems() {
        _classCallCheck(this, AddProductItems);

        // DOM
        this.mainItem = document.querySelector('.product__item-clone').children[0];
        this.parrent = document.querySelector('.feauture-product');
        this.btn = document.querySelector('.load-more-btn');

        // vars 
        this.firstLoadedItemsQty = 8;
        this.pressBtnLoadedItemsQty = 4;

        //  events
        this._firstLoadAddItems();
        this._pressBtnAddItems();
    }

    _createClass(AddProductItems, [{
        key: '_firstLoadAddItems',
        value: function _firstLoadAddItems() {
            var _this = this;

            var xhr = new XMLHttpRequest();

            xhr.open('GET', 'https://soloviovmax.github.io/mstore/db.json');

            xhr.responseType = "json";

            xhr.addEventListener('load', function () {
                var data = xhr.response;
                var totalQtyItems = data.length - 1;
                var qtyItems = _this.firstLoadedItemsQty;

                _this._addItems(totalQtyItems, qtyItems, data);
            });
            xhr.send();
        }
    }, {
        key: '_pressBtnAddItems',
        value: function _pressBtnAddItems() {
            var _this2 = this;

            this.nowAdded = this.firstLoadedItemsQty;

            this.btn.addEventListener('click', function () {
                var xhr = new XMLHttpRequest();

                xhr.open('GET', 'https://soloviovmax.github.io/mstore/db.json');

                xhr.responseType = "json";

                xhr.addEventListener('load', function () {
                    var data = xhr.response;
                    var totalQtyItems = data.length - 1 - _this2.nowAdded;
                    var qtyItems = _this2.pressBtnLoadedItemsQty;
                    _this2._addItems(totalQtyItems, qtyItems, data);

                    _this2.nowAdded += _this2.pressBtnLoadedItemsQty;
                });
                xhr.send();
            });
        }
    }, {
        key: '_addItems',
        value: function _addItems(totalQty, addQty, data) {

            for (var i = totalQty; i > totalQty - addQty; i--) {
                if (i === 0) {
                    this.btn.style.display = 'none';
                }
                var currentItem = this.mainItem.cloneNode(true);

                var img = currentItem.querySelector('.product__img'),
                    title = currentItem.querySelector('.product__title-link'),
                    price = currentItem.querySelector('.product__price'),
                    basketBtn = currentItem.querySelector('.product__details-button--basket'),
                    zoomBtn = currentItem.querySelector('.product__details-button--zoom');

                var dataItem = data[i];

                for (var key in dataItem) {
                    if (key === 'src') {
                        img.setAttribute('src', 'img/' + dataItem[key]);
                        zoomBtn.dataset.src = 'img/' + 'big-' + dataItem[key];
                    } else if (key === 'title') {
                        title.textContent = dataItem[key];
                    } else if (key === 'price') {
                        price.textContent = '$' + dataItem[key];
                        basketBtn.dataset.price = dataItem[key];
                    } else if (key === 'id') {
                        currentItem.dataset.id = dataItem[key];
                    } else if (key === 'oldPrice') {
                        var oldPriceSpan = document.createElement('span');
                        oldPriceSpan.textContent = '$' + dataItem[key];
                        oldPriceSpan.classList.add('product__old-price');
                        var descrWrap = currentItem.querySelector('.product-descr');
                        descrWrap.insertBefore(oldPriceSpan, descrWrap.children[2]);
                    } else if (key === 'label') {
                        currentItem.classList.add('product__item--label-' + dataItem[key]);
                    }
                }
                this.parrent.appendChild(currentItem);
            }
        }
    }]);

    return AddProductItems;
}();

exports.default = AddProductItems;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BurgerMenu = function () {
   function BurgerMenu() {
      _classCallCheck(this, BurgerMenu);

      // DOM
      this.btn = document.querySelector('.burger-btn');
      this.navList = document.querySelector('.fixed-nav .header-nav__list');
      this.navItem = document.querySelectorAll('.fixed-nav .header-nav__item');
      this.header = document.querySelector('.header');
      this.maincontent = document.querySelector('.maincontent');
      this.footer = document.querySelector('.footer');

      //  events
      this._events();
   }

   _createClass(BurgerMenu, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         this.btn.addEventListener('click', function () {
            _this.navList.classList.add('header-nav__list--burger-active');

            var timeout = 50;

            var _loop = function _loop(i) {

               setTimeout(function () {
                  _this.navItem[i].classList.add('header-nav__item--burger-active');
               }, timeout);

               timeout += 50;
            };

            for (var i = 0; i < _this.navItem.length; i++) {
               _loop(i);
            };

            document.body.classList.add('overflow-hidden');
            _this.header.classList.add('blur');
            _this.maincontent.classList.add('blur');
            _this.footer.classList.add('blur');
         });

         this.navList.addEventListener('click', function (e) {
            if (e.target === e.currentTarget) {
               _this.navList.classList.remove('header-nav__list--burger-active');

               for (var i = 0; i < _this.navItem.length; i++) {
                  _this.navItem[i].classList.remove('header-nav__item--burger-active');
               };

               document.body.classList.remove('overflow-hidden');
               _this.header.classList.remove('blur');
               _this.maincontent.classList.remove('blur');
               _this.footer.classList.remove('blur');
            }
         });
      }
   }]);

   return BurgerMenu;
}();

exports.default = BurgerMenu;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9idXJnZXItbWVudS5qcyJdLCJuYW1lcyI6WyJCdXJnZXJNZW51IiwiYnRuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmF2TGlzdCIsIm5hdkl0ZW0iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaGVhZGVyIiwibWFpbmNvbnRlbnQiLCJmb290ZXIiLCJfZXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsInRpbWVvdXQiLCJpIiwic2V0VGltZW91dCIsImxlbmd0aCIsImJvZHkiLCJlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsVTtBQUNsQix5QkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsR0FBTCxHQUFXQyxTQUFTQyxhQUFULENBQXVCLGFBQXZCLENBQVg7QUFDQSxXQUFLQyxPQUFMLEdBQWVGLFNBQVNDLGFBQVQsQ0FBdUIsOEJBQXZCLENBQWY7QUFDQSxXQUFLRSxPQUFMLEdBQWVILFNBQVNJLGdCQUFULENBQTBCLDhCQUExQixDQUFmO0FBQ0EsV0FBS0MsTUFBTCxHQUFjTCxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQWQ7QUFDQSxXQUFLSyxXQUFMLEdBQW1CTixTQUFTQyxhQUFULENBQXVCLGNBQXZCLENBQW5CO0FBQ0EsV0FBS00sTUFBTCxHQUFjUCxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQWQ7O0FBRUE7QUFDQSxXQUFLTyxPQUFMO0FBQ0Y7Ozs7Z0NBRVM7QUFBQTs7QUFDUCxjQUFLVCxHQUFMLENBQVNVLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DLFlBQU07QUFDdEMsa0JBQUtQLE9BQUwsQ0FBYVEsU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsaUNBQTNCOztBQUVBLGdCQUFJQyxVQUFVLEVBQWQ7O0FBSHNDLHVDQUk3QkMsQ0FKNkI7O0FBTW5DQywwQkFBVyxZQUFNO0FBQ2Qsd0JBQUtYLE9BQUwsQ0FBYVUsQ0FBYixFQUFnQkgsU0FBaEIsQ0FBMEJDLEdBQTFCLENBQThCLGlDQUE5QjtBQUNGLGdCQUZELEVBRUdDLE9BRkg7O0FBSUFBLDBCQUFXLEVBQVg7QUFWbUM7O0FBSXRDLGlCQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSSxNQUFLVixPQUFMLENBQWFZLE1BQWpDLEVBQXlDRixHQUF6QyxFQUE4QztBQUFBLHFCQUFyQ0EsQ0FBcUM7QUFPN0M7O0FBRURiLHFCQUFTZ0IsSUFBVCxDQUFjTixTQUFkLENBQXdCQyxHQUF4QixDQUE0QixpQkFBNUI7QUFDQSxrQkFBS04sTUFBTCxDQUFZSyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNBLGtCQUFLTCxXQUFMLENBQWlCSSxTQUFqQixDQUEyQkMsR0FBM0IsQ0FBK0IsTUFBL0I7QUFDQSxrQkFBS0osTUFBTCxDQUFZRyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNGLFVBakJEOztBQW1CQSxjQUFLVCxPQUFMLENBQWFPLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLGFBQUs7QUFDekMsZ0JBQUlRLEVBQUVDLE1BQUYsS0FBYUQsRUFBRUUsYUFBbkIsRUFBa0M7QUFDL0IscUJBQUtqQixPQUFMLENBQWFRLFNBQWIsQ0FBdUJVLE1BQXZCLENBQThCLGlDQUE5Qjs7QUFFQSxvQkFBSyxJQUFJUCxJQUFJLENBQWIsRUFBZ0JBLElBQUksTUFBS1YsT0FBTCxDQUFhWSxNQUFqQyxFQUF5Q0YsR0FBekMsRUFBOEM7QUFDM0Msd0JBQUtWLE9BQUwsQ0FBYVUsQ0FBYixFQUFnQkgsU0FBaEIsQ0FBMEJVLE1BQTFCLENBQWlDLGlDQUFqQztBQUNGOztBQUVEcEIsd0JBQVNnQixJQUFULENBQWNOLFNBQWQsQ0FBd0JVLE1BQXhCLENBQStCLGlCQUEvQjtBQUNBLHFCQUFLZixNQUFMLENBQVlLLFNBQVosQ0FBc0JVLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0EscUJBQUtkLFdBQUwsQ0FBaUJJLFNBQWpCLENBQTJCVSxNQUEzQixDQUFrQyxNQUFsQztBQUNBLHFCQUFLYixNQUFMLENBQVlHLFNBQVosQ0FBc0JVLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0Y7QUFDSCxVQWJEO0FBY0Y7Ozs7OztrQkFoRGlCdEIsVTtBQWlEcEIiLCJmaWxlIjoiX2J1cmdlci1tZW51LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVyZ2VyTWVudSB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5idG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnVyZ2VyLWJ0bicpO1xyXG4gICAgICB0aGlzLm5hdkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2IC5oZWFkZXItbmF2X19saXN0Jyk7XHJcbiAgICAgIHRoaXMubmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maXhlZC1uYXYgLmhlYWRlci1uYXZfX2l0ZW0nKTtcclxuICAgICAgdGhpcy5oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJyk7XHJcbiAgICAgIHRoaXMubWFpbmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbmNvbnRlbnQnKTtcclxuICAgICAgdGhpcy5mb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9vdGVyJyk7XHJcblxyXG4gICAgICAvLyAgZXZlbnRzXHJcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xyXG4gICB9XHJcblxyXG4gICBfZXZlbnRzKCkge1xyXG4gICAgICB0aGlzLmJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgdGhpcy5uYXZMaXN0LmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1uYXZfX2xpc3QtLWJ1cmdlci1hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgIGxldCB0aW1lb3V0ID0gNTA7XHJcbiAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uYXZJdGVtLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgdGhpcy5uYXZJdGVtW2ldLmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1uYXZfX2l0ZW0tLWJ1cmdlci1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfSwgdGltZW91dCk7XHJcblxyXG4gICAgICAgICAgICB0aW1lb3V0ICs9IDUwO1xyXG4gICAgICAgICB9O1xyXG5cclxuICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdvdmVyZmxvdy1oaWRkZW4nKTtcclxuICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnYmx1cicpO1xyXG4gICAgICAgICB0aGlzLm1haW5jb250ZW50LmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcclxuICAgICAgICAgdGhpcy5mb290ZXIuY2xhc3NMaXN0LmFkZCgnYmx1cicpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMubmF2TGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgICAgICB0aGlzLm5hdkxpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaGVhZGVyLW5hdl9fbGlzdC0tYnVyZ2VyLWFjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5hdkl0ZW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgdGhpcy5uYXZJdGVtW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1uYXZfX2l0ZW0tLWJ1cmdlci1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmZsb3ctaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdibHVyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgfVxyXG59OyJdfQ==
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FixedHeader = function () {
   function FixedHeader() {
      _classCallCheck(this, FixedHeader);

      // DOM
      this.header = document.querySelector('.bottom-header');

      // Additional Vars
      this.offset = 1000;

      //  events
      this._events();
   }

   _createClass(FixedHeader, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            if (window.pageYOffset > _this.offset) {
               _this.header.style.transform = 'translateY(0)';
               _this.header.classList.add('bottom-header--fixed');
            } else if (window.pageYOffset > _this.offset / 3 * 2) {
               _this.header.style.transform = 'translateY(-100%)';
            } else {
               _this.header.classList.remove('bottom-header--fixed');
               _this.header.style.transform = 'translateY(0)';
            }
         });
      }
   }]);

   return FixedHeader;
}();

exports.default = FixedHeader;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9maXhlZC1oZWFkZXIuanMiXSwibmFtZXMiOlsiRml4ZWRIZWFkZXIiLCJoZWFkZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJvZmZzZXQiLCJfZXZlbnRzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhZ2VZT2Zmc2V0Iiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFc7QUFDbEIsMEJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLE1BQUwsR0FBY0MsU0FBU0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBZDs7QUFFQTtBQUNBLFdBQUtDLE1BQUwsR0FBYyxJQUFkOztBQUVBO0FBQ0EsV0FBS0MsT0FBTDtBQUNGOzs7O2dDQUVTO0FBQUE7O0FBQ1BDLGdCQUFPQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxhQUFLO0FBQ3BDLGdCQUFJRCxPQUFPRSxXQUFQLEdBQXFCLE1BQUtKLE1BQTlCLEVBQXNDO0FBQ25DLHFCQUFLSCxNQUFMLENBQVlRLEtBQVosQ0FBa0JDLFNBQWxCLEdBQThCLGVBQTlCO0FBQ0EscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkMsR0FBdEIsQ0FBMEIsc0JBQTFCO0FBQ0YsYUFIRCxNQUdPLElBQUlOLE9BQU9FLFdBQVAsR0FBc0IsTUFBS0osTUFBTCxHQUFjLENBQWYsR0FBb0IsQ0FBN0MsRUFBZ0Q7QUFDcEQscUJBQUtILE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsbUJBQTlCO0FBQ0YsYUFGTSxNQUVBO0FBQ0oscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkUsTUFBdEIsQ0FBNkIsc0JBQTdCO0FBQ0EscUJBQUtaLE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsZUFBOUI7QUFDRjtBQUNILFVBVkQ7QUFXRjs7Ozs7O2tCQXhCaUJWLFc7QUF5QnBCIiwiZmlsZSI6Il9maXhlZC1oZWFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGaXhlZEhlYWRlciB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm90dG9tLWhlYWRlcicpO1xyXG5cclxuICAgICAgLy8gQWRkaXRpb25hbCBWYXJzXHJcbiAgICAgIHRoaXMub2Zmc2V0ID0gMTAwMDtcclxuXHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fZXZlbnRzKCk7XHJcbiAgIH1cclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHtcclxuICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiAodGhpcy5vZmZzZXQgLyAzKSAqIDIpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTEwMCUpJztcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcbn07Il19
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProductItemsEvents = function () {
    function ProductItemsEvents() {
        _classCallCheck(this, ProductItemsEvents);

        // DOM
        this.itemsWrap = document.querySelector('.feauture-product');
        this.basketTotalPrice = document.querySelector('.user-panel__button-total-price');
        this.basketQty = document.querySelector('.user-panel__button-qty--basket');
        this.heartsQty = document.querySelector('.user-panel__button-qty--heart');
        this.imageZoomBtn = document.querySelector('.product__details-button--zoom');
        this.imgZoomWindow = document.querySelector('.img-zoom-window__img');

        // Additional Vars
        this.totalPrice = 0;
        this.totalQty = 0;
        this.totalLikes = 0;

        //  events
        this._events();
        this._loadBasketFromLocalStorege();
    }

    _createClass(ProductItemsEvents, [{
        key: '_events',
        value: function _events() {
            var _this = this;

            this.itemsWrap.addEventListener('click', function (e) {
                _this._addToBasket(e);
                _this._like(e);
                _this._openImgZoomWindow(e);
                _this._stars(e);
            });

            this._closeImgZoomWindow();
        }
    }, {
        key: '_addToBasket',
        value: function _addToBasket(e) {
            if (e.target.parentElement.dataset.price || e.target.dataset.price) {

                var targetBasket = null;
                if (e.target.tagName === 'I') {
                    targetBasket = e.target.parentElement;
                } else {
                    targetBasket = e.target;
                }

                var putInBasketArrow = document.createElement('i');

                putInBasketArrow.classList.add('fa');
                putInBasketArrow.classList.add('fa-arrow-down');
                putInBasketArrow.setAttribute('aria-hidden', 'true');

                targetBasket.appendChild(putInBasketArrow);

                setTimeout(function () {
                    targetBasket.removeChild(targetBasket.children[1]);
                }, 200);

                var itemPrice = targetBasket.dataset.price;
                this.totalPrice += +itemPrice;
                this.totalQty++;

                this.basketTotalPrice.textContent = '$' + this.totalPrice;
                this.basketQty.textContent = this.totalQty;

                localStorage.setItem('basketTotalPrice', this.totalPrice);
                localStorage.setItem('basketQty', this.totalQty);
            };
        }
    }, {
        key: '_loadBasketFromLocalStorege',
        value: function _loadBasketFromLocalStorege() {
            if (localStorage.getItem('basketTotalPrice')) {
                this.totalPrice = +localStorage.getItem('basketTotalPrice');
                this.basketTotalPrice.textContent = this.totalPrice;
            }

            if (localStorage.getItem('basketQty')) {
                this.totalQty = +localStorage.getItem('basketQty');
                this.basketQty.textContent = this.totalQty;
            }
        }
    }, {
        key: '_like',
        value: function _like(e) {
            if (e.target.parentElement.classList.contains('product__details-button--heart') || e.target.classList.contains('product__details-button--heart')) {

                var targetHeart = null;
                if (e.target.tagName === 'I') {
                    targetHeart = e.target.parentElement;
                } else {
                    targetHeart = e.target;
                }

                if (targetHeart.classList.contains('product__details-button--heart-active')) {
                    targetHeart.classList.remove('product__details-button--heart-active');
                    this.totalLikes--;
                    this.heartsQty.textContent = this.totalLikes;
                } else {
                    targetHeart.classList.add('product__details-button--heart-active');
                    this.totalLikes++;
                    this.heartsQty.textContent = this.totalLikes;
                }
            };
        }
    }, {
        key: '_openImgZoomWindow',
        value: function _openImgZoomWindow(e) {
            if (e.target.parentElement.classList.contains('product__details-button--zoom') || e.target.classList.contains('product__details-button--zoom')) {

                var targetZoomBtn = null;
                if (e.target.tagName === 'I') {
                    targetZoomBtn = e.target.parentElement;
                } else {
                    targetZoomBtn = e.target;
                }

                var imgSrc = targetZoomBtn.dataset.src;

                this.imgZoomWindow.setAttribute('src', imgSrc);
                this.imgZoomWindow.parentElement.classList.add('img-zoom-window--active');
                document.body.classList.add('overflow-hidden');
            }
        }
    }, {
        key: '_closeImgZoomWindow',
        value: function _closeImgZoomWindow(e) {
            this.imgZoomWindow.parentElement.addEventListener('click', function (e) {
                if (e.target) {
                    e.currentTarget.classList.remove('img-zoom-window--active');
                    document.body.classList.remove('overflow-hidden');
                }
            });
        }
    }, {
        key: '_stars',
        value: function _stars(e) {
            if (e.target.parentElement.classList.contains('product__rating-button') || e.target.classList.contains('product__rating-button')) {

                var targetStar = null;
                if (e.target.tagName === 'I') {
                    targetStar = e.target.parentElement;
                } else {
                    targetStar = e.target;
                }

                targetStar.classList.add('product__rating-button--active');

                if (targetStar.previousElementSibling && targetStar.previousElementSibling.classList.contains('product__rating-button--active')) {
                    this._removeClassForPreviousStars(targetStar, 'product__rating-button--active');
                };

                this._addClassForNextStars(targetStar, 'product__rating-button--active');
            }
        }
    }, {
        key: '_addClassForNextStars',
        value: function _addClassForNextStars(elem, activeClass) {
            while (elem = elem.nextElementSibling) {
                elem.classList.add(activeClass);
            };
        }
    }, {
        key: '_removeClassForPreviousStars',
        value: function _removeClassForPreviousStars(elem, activeClass) {
            do {
                elem = elem.previousElementSibling;
                elem.classList.remove(activeClass);
            } while (elem.previousElementSibling && elem.previousElementSibling.classList.contains(activeClass));
        }
    }]);

    return ProductItemsEvents;
}();

exports.default = ProductItemsEvents;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Subscribe = function () {
    function Subscribe() {
        _classCallCheck(this, Subscribe);

        // DOM
        this.subscribeForm = document.querySelector('.subscribe__form');
        this.subscribeBtn = this.subscribeForm.querySelector('.subscribe__form-btn');

        //  Event
        this._subscribeFrormSubmit();
        this._btnTargetAnimation();
    }

    _createClass(Subscribe, [{
        key: '_subscribeFrormSubmit',
        value: function _subscribeFrormSubmit() {
            var _this = this;

            this.subscribeForm.addEventListener('submit', function (e) {
                e.preventDefault();

                var preloaderIcon = _this.subscribeForm.querySelector('.subscribe__form-btn--preloader'),
                    sentIcon = _this.subscribeForm.querySelector('.subscribe__form-btn--sent');

                preloaderIcon.style.display = 'flex';

                var formData = {
                    email: e.target.email.value
                };

                var options = {
                    method: 'POST',
                    body: JSON.stringify(formData)
                };

                fetch('https://maxs-4ebe4.firebaseio.com/clients.json', options).then(function (response) {
                    if (response.status === 200) {
                        preloaderIcon.style.display = 'none';
                        sentIcon.style.display = 'flex';

                        setTimeout(function () {
                            sentIcon.style.display = 'none';
                        }, 2000);

                        e.target.email.value = '';
                    }
                });
            });
        }
    }, {
        key: '_btnTargetAnimation',
        value: function _btnTargetAnimation() {
            var _this2 = this;

            this.subscribeBtn.addEventListener('click', function (e) {
                var posX = e.offsetX + 'px',
                    posY = e.offsetY + 'px';

                var targetAnimation = document.createElement('div');
                targetAnimation.classList.add('button-bubble__form-btn-terget-animation');
                targetAnimation.style.left = posX;
                targetAnimation.style.top = posY;
                _this2.subscribeBtn.appendChild(targetAnimation);

                setTimeout(function () {
                    var delEl = _this2.subscribeBtn.children[0];
                    _this2.subscribeBtn.removeChild(delEl);
                }, 400);
            });
        }
    }]);

    return Subscribe;
}();

exports.default = Subscribe;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdWJzY3JpYmUuanMiXSwibmFtZXMiOlsiU3Vic2NyaWJlIiwic3Vic2NyaWJlRm9ybSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN1YnNjcmliZUJ0biIsIl9zdWJzY3JpYmVGcm9ybVN1Ym1pdCIsIl9idG5UYXJnZXRBbmltYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwicHJlbG9hZGVySWNvbiIsInNlbnRJY29uIiwic3R5bGUiLCJkaXNwbGF5IiwiZm9ybURhdGEiLCJlbWFpbCIsInRhcmdldCIsInZhbHVlIiwib3B0aW9ucyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzZXRUaW1lb3V0IiwicG9zWCIsIm9mZnNldFgiLCJwb3NZIiwib2Zmc2V0WSIsInRhcmdldEFuaW1hdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJsZWZ0IiwidG9wIiwiYXBwZW5kQ2hpbGQiLCJkZWxFbCIsImNoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFM7QUFDakIseUJBQWM7QUFBQTs7QUFDVjtBQUNBLGFBQUtDLGFBQUwsR0FBcUJDLFNBQVNDLGFBQVQsQ0FBdUIsa0JBQXZCLENBQXJCO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQixLQUFLSCxhQUFMLENBQW1CRSxhQUFuQixDQUFpQyxzQkFBakMsQ0FBcEI7O0FBRUE7QUFDQSxhQUFLRSxxQkFBTDtBQUNBLGFBQUtDLG1CQUFMO0FBQ0g7Ozs7Z0RBRXVCO0FBQUE7O0FBQ3BCLGlCQUFLTCxhQUFMLENBQW1CTSxnQkFBbkIsQ0FBb0MsUUFBcEMsRUFBOEMsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2pEQSxrQkFBRUMsY0FBRjs7QUFFSixvQkFBSUMsZ0JBQWdCLE1BQUtULGFBQUwsQ0FBbUJFLGFBQW5CLENBQWlDLGlDQUFqQyxDQUFwQjtBQUFBLG9CQUNJUSxXQUFXLE1BQUtWLGFBQUwsQ0FBbUJFLGFBQW5CLENBQWlDLDRCQUFqQyxDQURmOztBQUdBTyw4QkFBY0UsS0FBZCxDQUFvQkMsT0FBcEIsR0FBOEIsTUFBOUI7O0FBRUEsb0JBQUlDLFdBQVc7QUFDWEMsMkJBQU9QLEVBQUVRLE1BQUYsQ0FBU0QsS0FBVCxDQUFlRTtBQURYLGlCQUFmOztBQUlBLG9CQUFJQyxVQUFVO0FBQ1ZDLDRCQUFRLE1BREU7QUFFVkMsMEJBQU1DLEtBQUtDLFNBQUwsQ0FBZVIsUUFBZjtBQUZJLGlCQUFkOztBQUtBUyxzQkFBTSxnREFBTixFQUF3REwsT0FBeEQsRUFDS00sSUFETCxDQUNVLFVBQVVDLFFBQVYsRUFBb0I7QUFDdEIsd0JBQUlBLFNBQVNDLE1BQVQsS0FBb0IsR0FBeEIsRUFBNkI7QUFDekJoQixzQ0FBY0UsS0FBZCxDQUFvQkMsT0FBcEIsR0FBOEIsTUFBOUI7QUFDQUYsaUNBQVNDLEtBQVQsQ0FBZUMsT0FBZixHQUF5QixNQUF6Qjs7QUFFQWMsbUNBQVcsWUFBTTtBQUNiaEIscUNBQVNDLEtBQVQsQ0FBZUMsT0FBZixHQUF5QixNQUF6QjtBQUNILHlCQUZELEVBRUcsSUFGSDs7QUFJQUwsMEJBQUVRLE1BQUYsQ0FBU0QsS0FBVCxDQUFlRSxLQUFmLEdBQXVCLEVBQXZCO0FBQ0g7QUFDSixpQkFaTDtBQWFDLGFBOUJEO0FBK0JIOzs7OENBRXFCO0FBQUE7O0FBQ2xCLGlCQUFLYixZQUFMLENBQWtCRyxnQkFBbEIsQ0FBbUMsT0FBbkMsRUFBNEMsYUFBSztBQUM3QyxvQkFBSXFCLE9BQU9wQixFQUFFcUIsT0FBRixHQUFZLElBQXZCO0FBQUEsb0JBQ0lDLE9BQU90QixFQUFFdUIsT0FBRixHQUFZLElBRHZCOztBQUdBLG9CQUFJQyxrQkFBa0I5QixTQUFTK0IsYUFBVCxDQUF1QixLQUF2QixDQUF0QjtBQUNBRCxnQ0FBZ0JFLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QiwwQ0FBOUI7QUFDQUgsZ0NBQWdCcEIsS0FBaEIsQ0FBc0J3QixJQUF0QixHQUE2QlIsSUFBN0I7QUFDQUksZ0NBQWdCcEIsS0FBaEIsQ0FBc0J5QixHQUF0QixHQUE0QlAsSUFBNUI7QUFDQSx1QkFBSzFCLFlBQUwsQ0FBa0JrQyxXQUFsQixDQUE4Qk4sZUFBOUI7O0FBRUFMLDJCQUFXLFlBQU07QUFDYix3QkFBSVksUUFBUSxPQUFLbkMsWUFBTCxDQUFrQm9DLFFBQWxCLENBQTJCLENBQTNCLENBQVo7QUFDQSwyQkFBS3BDLFlBQUwsQ0FBa0JxQyxXQUFsQixDQUE4QkYsS0FBOUI7QUFDSCxpQkFIRCxFQUdHLEdBSEg7QUFJSCxhQWREO0FBZUg7Ozs7OztrQkE3RGdCdkMsUztBQThEcEIiLCJmaWxlIjoiX3N1YnNjcmliZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1YnNjcmliZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBET01cclxuICAgICAgICB0aGlzLnN1YnNjcmliZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtJyk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4gPSB0aGlzLnN1YnNjcmliZUZvcm0ucXVlcnlTZWxlY3RvcignLnN1YnNjcmliZV9fZm9ybS1idG4nKTtcclxuXHJcbiAgICAgICAgLy8gIEV2ZW50XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlRnJvcm1TdWJtaXQoKTtcclxuICAgICAgICB0aGlzLl9idG5UYXJnZXRBbmltYXRpb24oKTtcclxuICAgIH07XHJcblxyXG4gICAgX3N1YnNjcmliZUZyb3JtU3VibWl0KCkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHByZWxvYWRlckljb24gPSB0aGlzLnN1YnNjcmliZUZvcm0ucXVlcnlTZWxlY3RvcignLnN1YnNjcmliZV9fZm9ybS1idG4tLXByZWxvYWRlcicpLFxyXG4gICAgICAgICAgICBzZW50SWNvbiA9IHRoaXMuc3Vic2NyaWJlRm9ybS5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtLWJ0bi0tc2VudCcpO1xyXG5cclxuICAgICAgICBwcmVsb2FkZXJJY29uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcblxyXG4gICAgICAgIGxldCBmb3JtRGF0YSA9IHtcclxuICAgICAgICAgICAgZW1haWw6IGUudGFyZ2V0LmVtYWlsLnZhbHVlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZldGNoKCdodHRwczovL21heHMtNGViZTQuZmlyZWJhc2Vpby5jb20vY2xpZW50cy5qc29uJywgb3B0aW9ucylcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkZXJJY29uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuZW1haWwudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9idG5UYXJnZXRBbmltYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgbGV0IHBvc1ggPSBlLm9mZnNldFggKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgcG9zWSA9IGUub2Zmc2V0WSArICdweCc7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0QW5pbWF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5jbGFzc0xpc3QuYWRkKCdidXR0b24tYnViYmxlX19mb3JtLWJ0bi10ZXJnZXQtYW5pbWF0aW9uJyk7XHJcbiAgICAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5zdHlsZS5sZWZ0ID0gcG9zWDtcclxuICAgICAgICAgICAgdGFyZ2V0QW5pbWF0aW9uLnN0eWxlLnRvcCA9IHBvc1k7XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlQnRuLmFwcGVuZENoaWxkKHRhcmdldEFuaW1hdGlvbik7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBkZWxFbCA9IHRoaXMuc3Vic2NyaWJlQnRuLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVCdG4ucmVtb3ZlQ2hpbGQoZGVsRWwpO1xyXG4gICAgICAgICAgICB9LCA0MDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufTsiXX0=
},{}],7:[function(require,module,exports){
'use strict';

var _addProductItems = require('./_add-product-items');

var _addProductItems2 = _interopRequireDefault(_addProductItems);

var _burgerMenu = require('./_burger-menu');

var _burgerMenu2 = _interopRequireDefault(_burgerMenu);

var _fixedHeader = require('./_fixed-header');

var _fixedHeader2 = _interopRequireDefault(_fixedHeader);

var _SearchLoginForms = require('./_Search-login-forms');

var _SearchLoginForms2 = _interopRequireDefault(_SearchLoginForms);

var _productItemsEvents = require('./_product-items-events');

var _productItemsEvents2 = _interopRequireDefault(_productItemsEvents);

var _subscribe = require('./_subscribe');

var _subscribe2 = _interopRequireDefault(_subscribe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('DOMContentLoaded', init);

function init() {

    // Clone navigation
    function cloneNav() {
        var nav = document.querySelector('.header-nav__list').cloneNode(true);
        var cloneNavParrent = document.querySelector('.fixed-nav');

        cloneNavParrent.insertBefore(nav, cloneNavParrent[0]);
    };
    cloneNav();

    // Set margin top for top section
    function setMargin() {
        var header = document.querySelector('.header'),
            topSection = document.querySelector('.top-section');

        topSection.style.marginTop = header.offsetHeight + 'px';
    };
    setMargin();

    /* // Google Map
    function initMap() {
        let yuzhnyBriz = {lat: 46.96339, lng: 31.987823};
        let map = new google.maps.Map(document.getElementById('map'), {
          zoom: 17,
          center: yuzhnyBriz
        });
        let marker = new google.maps.Marker({
          position: yuzhnyBriz,
          map: map,
          title: 'Южный бриз'
        });
    }; */

    var addProductItems = new _addProductItems2.default();
    var burgerMenu = new _burgerMenu2.default();
    var fixedHeader = new _fixedHeader2.default();
    var searchLoginForms = new _SearchLoginForms2.default();
    var productItemsEvents = new _productItemsEvents2.default();
    var subscribe = new _subscribe2.default();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfNzcxNmFlNzguanMiXSwibmFtZXMiOlsid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXQiLCJjbG9uZU5hdiIsIm5hdiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lTm9kZSIsImNsb25lTmF2UGFycmVudCIsImluc2VydEJlZm9yZSIsInNldE1hcmdpbiIsImhlYWRlciIsInRvcFNlY3Rpb24iLCJzdHlsZSIsIm1hcmdpblRvcCIsIm9mZnNldEhlaWdodCIsImFkZFByb2R1Y3RJdGVtcyIsImJ1cmdlck1lbnUiLCJmaXhlZEhlYWRlciIsInNlYXJjaExvZ2luRm9ybXMiLCJwcm9kdWN0SXRlbXNFdmVudHMiLCJzdWJzY3JpYmUiXSwibWFwcGluZ3MiOiI7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFQQUEsT0FBT0MsZ0JBQVAsQ0FBd0Isa0JBQXhCLEVBQTRDQyxJQUE1Qzs7QUFTQSxTQUFTQSxJQUFULEdBQWdCOztBQUVaO0FBQ0EsYUFBU0MsUUFBVCxHQUFvQjtBQUNoQixZQUFJQyxNQUFNQyxTQUFTQyxhQUFULENBQXVCLG1CQUF2QixFQUE0Q0MsU0FBNUMsQ0FBc0QsSUFBdEQsQ0FBVjtBQUNBLFlBQUlDLGtCQUFrQkgsU0FBU0MsYUFBVCxDQUF1QixZQUF2QixDQUF0Qjs7QUFFQUUsd0JBQWdCQyxZQUFoQixDQUE2QkwsR0FBN0IsRUFBa0NJLGdCQUFnQixDQUFoQixDQUFsQztBQUNIO0FBQ0RMOztBQUVBO0FBQ0EsYUFBU08sU0FBVCxHQUFxQjtBQUNqQixZQUFJQyxTQUFTTixTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQWI7QUFBQSxZQUNJTSxhQUFhUCxTQUFTQyxhQUFULENBQXVCLGNBQXZCLENBRGpCOztBQUdBTSxtQkFBV0MsS0FBWCxDQUFpQkMsU0FBakIsR0FBNkJILE9BQU9JLFlBQVAsR0FBc0IsSUFBbkQ7QUFDSDtBQUNETDs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7QUFjQSxRQUFNTSxrQkFBa0IsK0JBQXhCO0FBQ0EsUUFBTUMsYUFBYSwwQkFBbkI7QUFDQSxRQUFNQyxjQUFjLDJCQUFwQjtBQUNBLFFBQU1DLG1CQUFtQixnQ0FBekI7QUFDQSxRQUFNQyxxQkFBcUIsa0NBQTNCO0FBQ0EsUUFBTUMsWUFBWSx5QkFBbEI7QUFDSCIsImZpbGUiOiJmYWtlXzc3MTZhZTc4LmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0KTtcclxuXHJcbmltcG9ydCBBZGRQcm9kdWN0SXRlbXMgZnJvbSAnLi9fYWRkLXByb2R1Y3QtaXRlbXMnO1xyXG5pbXBvcnQgQnVyZ2VyTWVudSBmcm9tICcuL19idXJnZXItbWVudSc7XHJcbmltcG9ydCBGaXhlZEhlYWRlciBmcm9tICcuL19maXhlZC1oZWFkZXInO1xyXG5pbXBvcnQgU2VhcmNoTG9naW5Gb3JtcyBmcm9tICcuL19TZWFyY2gtbG9naW4tZm9ybXMnO1xyXG5pbXBvcnQgUHJvZHVjdEl0ZW1zRXZlbnRzIGZyb20gJy4vX3Byb2R1Y3QtaXRlbXMtZXZlbnRzJztcclxuaW1wb3J0IFN1YnNjcmliZSBmcm9tICcuL19zdWJzY3JpYmUnO1xyXG5cclxuZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgXHJcbiAgICAvLyBDbG9uZSBuYXZpZ2F0aW9uXHJcbiAgICBmdW5jdGlvbiBjbG9uZU5hdigpIHtcclxuICAgICAgICBsZXQgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlci1uYXZfX2xpc3QnKS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgbGV0IGNsb25lTmF2UGFycmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maXhlZC1uYXYnKTtcclxuXHJcbiAgICAgICAgY2xvbmVOYXZQYXJyZW50Lmluc2VydEJlZm9yZShuYXYsIGNsb25lTmF2UGFycmVudFswXSk7XHJcbiAgICB9O1xyXG4gICAgY2xvbmVOYXYoKTtcclxuXHJcbiAgICAvLyBTZXQgbWFyZ2luIHRvcCBmb3IgdG9wIHNlY3Rpb25cclxuICAgIGZ1bmN0aW9uIHNldE1hcmdpbigpIHtcclxuICAgICAgICBsZXQgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpLFxyXG4gICAgICAgICAgICB0b3BTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvcC1zZWN0aW9uJyk7XHJcblxyXG4gICAgICAgIHRvcFNlY3Rpb24uc3R5bGUubWFyZ2luVG9wID0gaGVhZGVyLm9mZnNldEhlaWdodCArICdweCc7XHJcbiAgICB9O1xyXG4gICAgc2V0TWFyZ2luKClcclxuXHJcbiAgICAvKiAvLyBHb29nbGUgTWFwXHJcbiAgICBmdW5jdGlvbiBpbml0TWFwKCkge1xyXG4gICAgICAgIGxldCB5dXpobnlCcml6ID0ge2xhdDogNDYuOTYzMzksIGxuZzogMzEuOTg3ODIzfTtcclxuICAgICAgICBsZXQgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuICAgICAgICAgIHpvb206IDE3LFxyXG4gICAgICAgICAgY2VudGVyOiB5dXpobnlCcml6XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4gICAgICAgICAgcG9zaXRpb246IHl1emhueUJyaXosXHJcbiAgICAgICAgICBtYXA6IG1hcCxcclxuICAgICAgICAgIHRpdGxlOiAn0K7QttC90YvQuSDQsdGA0LjQtydcclxuICAgICAgICB9KTtcclxuICAgIH07ICovXHJcblxyXG4gICAgY29uc3QgYWRkUHJvZHVjdEl0ZW1zID0gbmV3IEFkZFByb2R1Y3RJdGVtcztcclxuICAgIGNvbnN0IGJ1cmdlck1lbnUgPSBuZXcgQnVyZ2VyTWVudTtcclxuICAgIGNvbnN0IGZpeGVkSGVhZGVyID0gbmV3IEZpeGVkSGVhZGVyO1xyXG4gICAgY29uc3Qgc2VhcmNoTG9naW5Gb3JtcyA9IG5ldyBTZWFyY2hMb2dpbkZvcm1zO1xyXG4gICAgY29uc3QgcHJvZHVjdEl0ZW1zRXZlbnRzID0gbmV3IFByb2R1Y3RJdGVtc0V2ZW50cztcclxuICAgIGNvbnN0IHN1YnNjcmliZSA9IG5ldyBTdWJzY3JpYmU7XHJcbn07Il19
},{"./_Search-login-forms":1,"./_add-product-items":2,"./_burger-menu":3,"./_fixed-header":4,"./_product-items-events":5,"./_subscribe":6}]},{},[7])
//# sourceMappingURL=data:application/json;base64,
