(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AddProductItems = function () {
    function AddProductItems() {
        _classCallCheck(this, AddProductItems);

        // DOM
        this.mainItem = document.querySelector('.product__item-clone').children[0];
        this.parrent = document.querySelector('.feauture-product');
        this.btn = document.querySelector('.load-more-btn');

        // vars 
        this.firstLoadedItemsQty = 8;
        this.pressBtnLoadedItemsQty = 4;

        //  events
        this._firstLoadAddItems();
        this._pressBtnAddItems();
    }

    _createClass(AddProductItems, [{
        key: '_firstLoadAddItems',
        value: function _firstLoadAddItems() {
            var _this = this;

            var xhr = new XMLHttpRequest();

            xhr.open('GET', '../db.json');

            xhr.responseType = "json";

            xhr.addEventListener('load', function () {
                var data = xhr.response;
                var totalQtyItems = data.length - 1;
                var qtyItems = _this.firstLoadedItemsQty;

                _this._addItems(totalQtyItems, qtyItems, data);
            });
            xhr.send();
        }
    }, {
        key: '_pressBtnAddItems',
        value: function _pressBtnAddItems() {
            var _this2 = this;

            this.nowAdded = this.firstLoadedItemsQty;

            this.btn.addEventListener('click', function () {
                var xhr = new XMLHttpRequest();

                xhr.open('GET', '../db.json');

                xhr.responseType = "json";

                xhr.addEventListener('load', function () {
                    var data = xhr.response;
                    var totalQtyItems = data.length - 1 - _this2.nowAdded;
                    var qtyItems = _this2.pressBtnLoadedItemsQty;
                    _this2._addItems(totalQtyItems, qtyItems, data);

                    _this2.nowAdded += _this2.pressBtnLoadedItemsQty;
                });
                xhr.send();
            });
        }
    }, {
        key: '_addItems',
        value: function _addItems(totalQty, addQty, data) {

            for (var i = totalQty; i > totalQty - addQty; i--) {
                if (i === 0) {
                    this.btn.style.display = 'none';
                }
                var currentItem = this.mainItem.cloneNode(true);

                var img = currentItem.querySelector('.product__img'),
                    title = currentItem.querySelector('.product__title-link'),
                    price = currentItem.querySelector('.product__price'),
                    basketBtn = currentItem.querySelector('.product__details-button--basket'),
                    zoomBtn = currentItem.querySelector('.product__details-button--zoom');

                var dataItem = data[i];

                for (var key in dataItem) {
                    if (key === 'src') {
                        img.setAttribute('src', 'img/' + dataItem[key]);
                        zoomBtn.dataset.src = 'img/' + 'big-' + dataItem[key];
                    } else if (key === 'title') {
                        title.textContent = dataItem[key];
                    } else if (key === 'price') {
                        price.textContent = '$' + dataItem[key];
                        basketBtn.dataset.price = dataItem[key];
                    } else if (key === 'id') {
                        currentItem.dataset.id = dataItem[key];
                    } else if (key === 'oldPrice') {
                        var oldPriceSpan = document.createElement('span');
                        oldPriceSpan.textContent = '$' + dataItem[key];
                        oldPriceSpan.classList.add('product__old-price');
                        var descrWrap = currentItem.querySelector('.product-descr');
                        descrWrap.insertBefore(oldPriceSpan, descrWrap.children[2]);
                    } else if (key === 'label') {
                        currentItem.classList.add('product__item--label-' + dataItem[key]);
                    }
                }
                this.parrent.appendChild(currentItem);
            }
        }
    }]);

    return AddProductItems;
}();

exports.default = AddProductItems;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BurgerMenu = function () {
   function BurgerMenu() {
      _classCallCheck(this, BurgerMenu);

      // DOM
      this.btn = document.querySelector('.burger-btn');
      this.navList = document.querySelector('.fixed-nav .header-nav__list');
      this.navItem = document.querySelectorAll('.fixed-nav .header-nav__item');
      this.body = document.querySelector('body');
      this.header = document.querySelector('.header');
      this.maincontent = document.querySelector('.maincontent');
      this.footer = document.querySelector('.footer');

      //  events
      this._events();
   }

   _createClass(BurgerMenu, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         this.btn.addEventListener('click', function () {
            _this.navList.classList.add('header-nav__list--burger-active');

            var timeout = 50;

            var _loop = function _loop(i) {

               setTimeout(function () {
                  _this.navItem[i].classList.add('header-nav__item--burger-active');
               }, timeout);

               timeout += 50;
            };

            for (var i = 0; i < _this.navItem.length; i++) {
               _loop(i);
            };

            _this.body.classList.add('overflow-hidden');
            _this.header.classList.add('blur');
            _this.maincontent.classList.add('blur');
            _this.footer.classList.add('blur');
         });

         this.navList.addEventListener('click', function (e) {
            if (e.target === e.currentTarget) {
               _this.navList.classList.remove('header-nav__list--burger-active');

               for (var i = 0; i < _this.navItem.length; i++) {
                  _this.navItem[i].classList.remove('header-nav__item--burger-active');
               };

               _this.body.classList.remove('overflow-hidden');
               _this.header.classList.remove('blur');
               _this.maincontent.classList.remove('blur');
               _this.footer.classList.remove('blur');
            }
         });
      }
   }]);

   return BurgerMenu;
}();

exports.default = BurgerMenu;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9idXJnZXItbWVudS5qcyJdLCJuYW1lcyI6WyJCdXJnZXJNZW51IiwiYnRuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmF2TGlzdCIsIm5hdkl0ZW0iLCJxdWVyeVNlbGVjdG9yQWxsIiwiYm9keSIsImhlYWRlciIsIm1haW5jb250ZW50IiwiZm9vdGVyIiwiX2V2ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0aW1lb3V0IiwiaSIsInNldFRpbWVvdXQiLCJsZW5ndGgiLCJlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsVTtBQUNsQix5QkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsR0FBTCxHQUFXQyxTQUFTQyxhQUFULENBQXVCLGFBQXZCLENBQVg7QUFDQSxXQUFLQyxPQUFMLEdBQWVGLFNBQVNDLGFBQVQsQ0FBdUIsOEJBQXZCLENBQWY7QUFDQSxXQUFLRSxPQUFMLEdBQWVILFNBQVNJLGdCQUFULENBQTBCLDhCQUExQixDQUFmO0FBQ0EsV0FBS0MsSUFBTCxHQUFZTCxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQVo7QUFDQSxXQUFLSyxNQUFMLEdBQWNOLFNBQVNDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBZDtBQUNBLFdBQUtNLFdBQUwsR0FBbUJQLFNBQVNDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBbkI7QUFDQSxXQUFLTyxNQUFMLEdBQWNSLFNBQVNDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBZDs7QUFFQTtBQUNBLFdBQUtRLE9BQUw7QUFDRjs7OztnQ0FFUztBQUFBOztBQUNQLGNBQUtWLEdBQUwsQ0FBU1csZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMsWUFBTTtBQUN0QyxrQkFBS1IsT0FBTCxDQUFhUyxTQUFiLENBQXVCQyxHQUF2QixDQUEyQixpQ0FBM0I7O0FBRUEsZ0JBQUlDLFVBQVUsRUFBZDs7QUFIc0MsdUNBSTdCQyxDQUo2Qjs7QUFNbkNDLDBCQUFXLFlBQU07QUFDZCx3QkFBS1osT0FBTCxDQUFhVyxDQUFiLEVBQWdCSCxTQUFoQixDQUEwQkMsR0FBMUIsQ0FBOEIsaUNBQTlCO0FBQ0YsZ0JBRkQsRUFFR0MsT0FGSDs7QUFJQUEsMEJBQVcsRUFBWDtBQVZtQzs7QUFJdEMsaUJBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLE1BQUtYLE9BQUwsQ0FBYWEsTUFBakMsRUFBeUNGLEdBQXpDLEVBQThDO0FBQUEscUJBQXJDQSxDQUFxQztBQU83Qzs7QUFFRCxrQkFBS1QsSUFBTCxDQUFVTSxTQUFWLENBQW9CQyxHQUFwQixDQUF3QixpQkFBeEI7QUFDQSxrQkFBS04sTUFBTCxDQUFZSyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNBLGtCQUFLTCxXQUFMLENBQWlCSSxTQUFqQixDQUEyQkMsR0FBM0IsQ0FBK0IsTUFBL0I7QUFDQSxrQkFBS0osTUFBTCxDQUFZRyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNGLFVBakJEOztBQW1CQSxjQUFLVixPQUFMLENBQWFRLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLGFBQUs7QUFDekMsZ0JBQUlPLEVBQUVDLE1BQUYsS0FBYUQsRUFBRUUsYUFBbkIsRUFBa0M7QUFDL0IscUJBQUtqQixPQUFMLENBQWFTLFNBQWIsQ0FBdUJTLE1BQXZCLENBQThCLGlDQUE5Qjs7QUFFQSxvQkFBSyxJQUFJTixJQUFJLENBQWIsRUFBZ0JBLElBQUksTUFBS1gsT0FBTCxDQUFhYSxNQUFqQyxFQUF5Q0YsR0FBekMsRUFBOEM7QUFDM0Msd0JBQUtYLE9BQUwsQ0FBYVcsQ0FBYixFQUFnQkgsU0FBaEIsQ0FBMEJTLE1BQTFCLENBQWlDLGlDQUFqQztBQUNGOztBQUVELHFCQUFLZixJQUFMLENBQVVNLFNBQVYsQ0FBb0JTLE1BQXBCLENBQTJCLGlCQUEzQjtBQUNBLHFCQUFLZCxNQUFMLENBQVlLLFNBQVosQ0FBc0JTLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0EscUJBQUtiLFdBQUwsQ0FBaUJJLFNBQWpCLENBQTJCUyxNQUEzQixDQUFrQyxNQUFsQztBQUNBLHFCQUFLWixNQUFMLENBQVlHLFNBQVosQ0FBc0JTLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0Y7QUFDSCxVQWJEO0FBY0Y7Ozs7OztrQkFqRGlCdEIsVTtBQWtEcEIiLCJmaWxlIjoiX2J1cmdlci1tZW51LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVyZ2VyTWVudSB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5idG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnVyZ2VyLWJ0bicpO1xyXG4gICAgICB0aGlzLm5hdkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2IC5oZWFkZXItbmF2X19saXN0Jyk7XHJcbiAgICAgIHRoaXMubmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maXhlZC1uYXYgLmhlYWRlci1uYXZfX2l0ZW0nKTtcclxuICAgICAgdGhpcy5ib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gICAgICB0aGlzLmhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcclxuICAgICAgdGhpcy5tYWluY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluY29udGVudCcpO1xyXG4gICAgICB0aGlzLmZvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb290ZXInKTtcclxuXHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fZXZlbnRzKCk7XHJcbiAgIH1cclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHRoaXMuYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLm5hdkxpc3QuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLW5hdl9fbGlzdC0tYnVyZ2VyLWFjdGl2ZScpO1xyXG5cclxuICAgICAgICAgbGV0IHRpbWVvdXQgPSA1MDtcclxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5hdkl0ZW0ubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICB0aGlzLm5hdkl0ZW1baV0uY2xhc3NMaXN0LmFkZCgnaGVhZGVyLW5hdl9faXRlbS0tYnVyZ2VyLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuXHJcbiAgICAgICAgICAgIHRpbWVvdXQgKz0gNTA7XHJcbiAgICAgICAgIH07XHJcblxyXG4gICAgICAgICB0aGlzLmJvZHkuY2xhc3NMaXN0LmFkZCgnb3ZlcmZsb3ctaGlkZGVuJyk7XHJcbiAgICAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcclxuICAgICAgICAgdGhpcy5tYWluY29udGVudC5jbGFzc0xpc3QuYWRkKCdibHVyJyk7XHJcbiAgICAgICAgIHRoaXMuZm9vdGVyLmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLm5hdkxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5uYXZMaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1uYXZfX2xpc3QtLWJ1cmdlci1hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uYXZJdGVtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMubmF2SXRlbVtpXS5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXItbmF2X19pdGVtLS1idXJnZXItYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmZsb3ctaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdibHVyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgfVxyXG59OyJdfQ==
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FixedHeader = function () {
   function FixedHeader() {
      _classCallCheck(this, FixedHeader);

      // DOM
      this.header = document.querySelector('.bottom-header');

      // Additional Vars
      this.offset = 1000;

      //  events
      this._events();
   }

   _createClass(FixedHeader, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            if (window.pageYOffset > _this.offset) {
               _this.header.style.transform = 'translateY(0)';
               _this.header.classList.add('bottom-header--fixed');
            } else if (window.pageYOffset > _this.offset / 3 * 2) {
               _this.header.style.transform = 'translateY(-100%)';
            } else {
               _this.header.classList.remove('bottom-header--fixed');
               _this.header.style.transform = 'translateY(0)';
            }
         });
      }
   }]);

   return FixedHeader;
}();

exports.default = FixedHeader;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9maXhlZC1oZWFkZXIuanMiXSwibmFtZXMiOlsiRml4ZWRIZWFkZXIiLCJoZWFkZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJvZmZzZXQiLCJfZXZlbnRzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhZ2VZT2Zmc2V0Iiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFc7QUFDbEIsMEJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLE1BQUwsR0FBY0MsU0FBU0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBZDs7QUFFQTtBQUNBLFdBQUtDLE1BQUwsR0FBYyxJQUFkOztBQUVBO0FBQ0EsV0FBS0MsT0FBTDtBQUNGOzs7O2dDQUVTO0FBQUE7O0FBQ1BDLGdCQUFPQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxhQUFLO0FBQ3BDLGdCQUFJRCxPQUFPRSxXQUFQLEdBQXFCLE1BQUtKLE1BQTlCLEVBQXNDO0FBQ25DLHFCQUFLSCxNQUFMLENBQVlRLEtBQVosQ0FBa0JDLFNBQWxCLEdBQThCLGVBQTlCO0FBQ0EscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkMsR0FBdEIsQ0FBMEIsc0JBQTFCO0FBQ0YsYUFIRCxNQUdPLElBQUlOLE9BQU9FLFdBQVAsR0FBc0IsTUFBS0osTUFBTCxHQUFjLENBQWYsR0FBb0IsQ0FBN0MsRUFBZ0Q7QUFDcEQscUJBQUtILE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsbUJBQTlCO0FBQ0YsYUFGTSxNQUVBO0FBQ0oscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkUsTUFBdEIsQ0FBNkIsc0JBQTdCO0FBQ0EscUJBQUtaLE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsZUFBOUI7QUFDRjtBQUNILFVBVkQ7QUFXRjs7Ozs7O2tCQXhCaUJWLFc7QUF5QnBCIiwiZmlsZSI6Il9maXhlZC1oZWFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGaXhlZEhlYWRlciB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm90dG9tLWhlYWRlcicpO1xyXG5cclxuICAgICAgLy8gQWRkaXRpb25hbCBWYXJzXHJcbiAgICAgIHRoaXMub2Zmc2V0ID0gMTAwMDtcclxuXHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fZXZlbnRzKCk7XHJcbiAgIH1cclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHtcclxuICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiAodGhpcy5vZmZzZXQgLyAzKSAqIDIpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTEwMCUpJztcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcbn07Il19
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProductItemsEvents = function () {
    function ProductItemsEvents() {
        _classCallCheck(this, ProductItemsEvents);

        // DOM
        this.itemsWrap = document.querySelector('.feauture-product');
        this.basketTotalPrice = document.querySelector('.user-panel__button-total-price');
        this.basketQty = document.querySelector('.user-panel__button-qty--basket');
        this.heartsQty = document.querySelector('.user-panel__button-qty--heart');
        this.imageZoomBtn = document.querySelector('.product__details-button--zoom');
        this.imgZoomWindow = document.querySelector('.img-zoom-window__img');

        // Additional Vars
        this.totalPrice = 0;
        this.totalQty = 0;
        this.totalLikes = 0;

        //  events
        this._events();
        this._loadBasketFromLocalStorege();
    }

    _createClass(ProductItemsEvents, [{
        key: '_events',
        value: function _events() {
            var _this = this;

            this.itemsWrap.addEventListener('click', function (e) {
                _this._addToBasket(e);
                _this._like(e);
                _this._zoomBtn(e);
                _this._stars(e);
            });
        }
    }, {
        key: '_addToBasket',
        value: function _addToBasket(e) {
            if (e.target.parentElement.dataset.price || e.target.dataset.price) {

                var target = null;
                if (e.target.tagName === 'I') {
                    target = e.target.parentElement;
                } else {
                    target = e.target;
                }

                var itemPrice = target.dataset.price;
                this.totalPrice += +itemPrice;
                this.totalQty++;

                this.basketTotalPrice.textContent = '$' + this.totalPrice;
                this.basketQty.textContent = this.totalQty;

                localStorage.setItem('basketTotalPrice', this.totalPrice);
                localStorage.setItem('basketQty', this.totalQty);
            };
        }
    }, {
        key: '_loadBasketFromLocalStorege',
        value: function _loadBasketFromLocalStorege() {
            if (localStorage.getItem('basketTotalPrice')) {
                this.totalPrice = +localStorage.getItem('basketTotalPrice');
                this.basketTotalPrice.textContent = this.totalPrice;
            }

            if (localStorage.getItem('basketQty')) {
                this.totalQty = +localStorage.getItem('basketQty');
                this.basketQty.textContent = this.totalQty;
            }
        }
    }, {
        key: '_like',
        value: function _like(e) {
            if (e.target.parentElement.classList.contains('product__details-button--heart')) {
                if (e.target.parentElement.classList.contains('product__details-button--heart-active')) {
                    e.target.parentElement.classList.remove('product__details-button--heart-active');
                    this.totalLikes--;
                    this.heartsQty.textContent = this.totalLikes;
                } else {
                    e.target.parentElement.classList.add('product__details-button--heart-active');
                    this.totalLikes++;
                    this.heartsQty.textContent = this.totalLikes;
                }
            };
        }
    }, {
        key: '_zoomBtn',
        value: function _zoomBtn(e) {
            if (e.target.parentElement.classList.contains('product__details-button--zoom')) {
                var imgSrc = e.target.parentElement.dataset.src;

                this.imgZoomWindow.setAttribute('src', imgSrc);
                this.imgZoomWindow.parentElement.classList.add('img-zoom-window--active');
            }

            this.imgZoomWindow.parentElement.addEventListener('click', function (e) {
                if (e.target) {
                    e.currentTarget.classList.remove('img-zoom-window--active');
                }
            });
        }
    }, {
        key: '_stars',
        value: function _stars(e) {
            if (e.target.parentElement.classList.contains('product__rating-button')) {
                var targetStar = e.target.parentElement;
                targetStar.classList.add('product__rating-button--active');

                if (targetStar.previousElementSibling && targetStar.previousElementSibling.classList.contains('product__rating-button--active')) {
                    this._removeClassForPreviousStars(targetStar, 'product__rating-button--active');
                };

                this._addClassForNextStars(targetStar, 'product__rating-button--active');
            }
        }
    }, {
        key: '_addClassForNextStars',
        value: function _addClassForNextStars(elem, activeClass) {
            while (elem = elem.nextElementSibling) {
                elem.classList.add(activeClass);
            };
        }
    }, {
        key: '_removeClassForPreviousStars',
        value: function _removeClassForPreviousStars(elem, activeClass) {
            do {
                elem = elem.previousElementSibling;
                elem.classList.remove(activeClass);
            } while (elem.previousElementSibling && elem.previousElementSibling.classList.contains(activeClass));
        }
    }]);

    return ProductItemsEvents;
}();

exports.default = ProductItemsEvents;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9wcm9kdWN0LWl0ZW1zLWV2ZW50cy5qcyJdLCJuYW1lcyI6WyJQcm9kdWN0SXRlbXNFdmVudHMiLCJpdGVtc1dyYXAiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJiYXNrZXRUb3RhbFByaWNlIiwiYmFza2V0UXR5IiwiaGVhcnRzUXR5IiwiaW1hZ2Vab29tQnRuIiwiaW1nWm9vbVdpbmRvdyIsInRvdGFsUHJpY2UiLCJ0b3RhbFF0eSIsInRvdGFsTGlrZXMiLCJfZXZlbnRzIiwiX2xvYWRCYXNrZXRGcm9tTG9jYWxTdG9yZWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJfYWRkVG9CYXNrZXQiLCJfbGlrZSIsIl96b29tQnRuIiwiX3N0YXJzIiwidGFyZ2V0IiwicGFyZW50RWxlbWVudCIsImRhdGFzZXQiLCJwcmljZSIsInRhZ05hbWUiLCJpdGVtUHJpY2UiLCJ0ZXh0Q29udGVudCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJyZW1vdmUiLCJhZGQiLCJpbWdTcmMiLCJzcmMiLCJzZXRBdHRyaWJ1dGUiLCJjdXJyZW50VGFyZ2V0IiwidGFyZ2V0U3RhciIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJfcmVtb3ZlQ2xhc3NGb3JQcmV2aW91c1N0YXJzIiwiX2FkZENsYXNzRm9yTmV4dFN0YXJzIiwiZWxlbSIsImFjdGl2ZUNsYXNzIiwibmV4dEVsZW1lbnRTaWJsaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCQSxrQjtBQUNqQixrQ0FBYztBQUFBOztBQUVWO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQkMsU0FBU0MsYUFBVCxDQUF1QixtQkFBdkIsQ0FBakI7QUFDQSxhQUFLQyxnQkFBTCxHQUF3QkYsU0FBU0MsYUFBVCxDQUF1QixpQ0FBdkIsQ0FBeEI7QUFDQSxhQUFLRSxTQUFMLEdBQWlCSCxTQUFTQyxhQUFULENBQXVCLGlDQUF2QixDQUFqQjtBQUNBLGFBQUtHLFNB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QUFsQyxFQUE4QyxnQ0FBOUM7QUFDSDs7QUFFRCxxQkFBS0cscUJBQUwsQ0FBMkJILFVBQTNCLEVBQXVDLGdDQUF2QztBQUNIO0FBQ0o7Ozs4Q0FFcUJJLEksRUFBTUMsVyxFQUFhO0FBQ3JDLG1CQUFPRCxPQUFPQSxLQUFLRSxrQkFBbkIsRUFBdUM7QUFDbkNGLHFCQUFLWixTQUFMLENBQWVHLEdBQWYsQ0FBbUJVLFdBQW5CO0FBQ0g7QUFDSjs7O3FEQUU0QkQsSSxFQUFNQyxXLEVBQWE7QUFDNUMsZUFBRztBQUFFRCx1QkFBT0EsS0FBS0gsc0JBQVo7QUFDREcscUJBQUtaLFNBQUwsQ0FBZUUsTUFBZixDQUFzQlcsV0FBdEI7QUFDQyxhQUZMLFFBRWFELEtBQUtILHNCQUFMLElBQStCRyxLQUFLSCxzQkFBTCxDQUE0QlQsU0FBNUIsQ0FBc0NDLFFBQXRDLENBQStDWSxXQUEvQyxDQUY1QztBQUdIOzs7Ozs7a0JBcEhnQjNDLGtCO0FBcUhwQiIsImZpbGUiOiJfcHJvZHVjdC1pdGVtcy1ldmVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9kdWN0SXRlbXNFdmVudHMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIC8vIERPTVxyXG4gICAgICAgIHRoaXMuaXRlbXNXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlYXV0dXJlLXByb2R1Y3QnKTtcclxuICAgICAgICB0aGlzLmJhc2tldFRvdGFsUHJpY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fYnV0dG9uLXRvdGFsLXByaWNlJyk7XHJcbiAgICAgICAgdGhpcy5iYXNrZXRRdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fYnV0dG9uLXF0eS0tYmFza2V0Jyk7XHJcbiAgICAgICAgdGhpcy5oZWFydHNRdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fYnV0dG9uLXF0eS0taGVhcnQnKTtcclxuICAgICAgICB0aGlzLmltYWdlWm9vbUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0X19kZXRhaWxzLWJ1dHRvbi0tem9vbScpO1xyXG4gICAgICAgIHRoaXMuaW1nWm9vbVdpbmRvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbWctem9vbS13aW5kb3dfX2ltZycpO1xyXG5cclxuICAgICAgICAvLyBBZGRpdGlvbmFsIFZhcnNcclxuICAgICAgICB0aGlzLnRvdGFsUHJpY2UgPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxRdHkgPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxMaWtlcyA9IDA7XHJcblxyXG4gICAgICAgIC8vICBldmVudHNcclxuICAgICAgICB0aGlzLl9ldmVudHMoKTtcclxuICAgICAgICB0aGlzLl9sb2FkQmFza2V0RnJvbUxvY2FsU3RvcmVnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIF9ldmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtc1dyYXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRUb0Jhc2tldChlKTtcclxuICAgICAgICAgICAgdGhpcy4gX2xpa2UoZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3pvb21CdG4oZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXJzKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBfYWRkVG9CYXNrZXQoZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQucHJpY2UgfHwgZS50YXJnZXQuZGF0YXNldC5wcmljZSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHRhcmdldCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09PSAnSScpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGl0ZW1QcmljZSA9IHRhcmdldC5kYXRhc2V0LnByaWNlO1xyXG4gICAgICAgICAgICB0aGlzLnRvdGFsUHJpY2UgKz0gK2l0ZW1QcmljZTtcclxuICAgICAgICAgICAgdGhpcy50b3RhbFF0eSsrO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5iYXNrZXRUb3RhbFByaWNlLnRleHRDb250ZW50ID0gJyQnICsgdGhpcy50b3RhbFByaWNlO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2tldFF0eS50ZXh0Q29udGVudCA9IHRoaXMudG90YWxRdHk7XHJcblxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYmFza2V0VG90YWxQcmljZScsIHRoaXMudG90YWxQcmljZSk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdiYXNrZXRRdHknLCB0aGlzLnRvdGFsUXR5KVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIF9sb2FkQmFza2V0RnJvbUxvY2FsU3RvcmVnZSgpIHtcclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jhc2tldFRvdGFsUHJpY2UnKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRvdGFsUHJpY2UgPSArbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jhc2tldFRvdGFsUHJpY2UnKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNrZXRUb3RhbFByaWNlLnRleHRDb250ZW50ID0gdGhpcy50b3RhbFByaWNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdiYXNrZXRRdHknKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRvdGFsUXR5ID0gK2xvY2FsU3RvcmFnZS5nZXRJdGVtKCdiYXNrZXRRdHknKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNrZXRRdHkudGV4dENvbnRlbnQgPSB0aGlzLnRvdGFsUXR5O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgX2xpa2UoZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygncHJvZHVjdF9fZGV0YWlscy1idXR0b24tLWhlYXJ0JykpIHtcclxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwcm9kdWN0X19kZXRhaWxzLWJ1dHRvbi0taGVhcnQtYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncHJvZHVjdF9fZGV0YWlscy1idXR0b24tLWhlYXJ0LWFjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbExpa2VzLS07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlYXJ0c1F0eS50ZXh0Q29udGVudCA9IHRoaXMudG90YWxMaWtlcztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncHJvZHVjdF9fZGV0YWlscy1idXR0b24tLWhlYXJ0LWFjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbExpa2VzKys7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlYXJ0c1F0eS50ZXh0Q29udGVudCA9IHRoaXMudG90YWxMaWtlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIF96b29tQnRuKGUpIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2R1Y3RfX2RldGFpbHMtYnV0dG9uLS16b29tJykpIHtcclxuICAgICAgICAgICAgbGV0IGltZ1NyYyA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC5zcmM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmltZ1pvb21XaW5kb3cuc2V0QXR0cmlidXRlKCdzcmMnLCBpbWdTcmMpO1xyXG4gICAgICAgICAgICB0aGlzLmltZ1pvb21XaW5kb3cucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpbWctem9vbS13aW5kb3ctLWFjdGl2ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbWdab29tV2luZG93LnBhcmVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnaW1nLXpvb20td2luZG93LS1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBfc3RhcnMoZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygncHJvZHVjdF9fcmF0aW5nLWJ1dHRvbicpKSB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRTdGFyID0gZS50YXJnZXQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgdGFyZ2V0U3Rhci5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0X19yYXRpbmctYnV0dG9uLS1hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRTdGFyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgdGFyZ2V0U3Rhci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucygncHJvZHVjdF9fcmF0aW5nLWJ1dHRvbi0tYWN0aXZlJykpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQ2xhc3NGb3JQcmV2aW91c1N0YXJzKHRhcmdldFN0YXIsICdwcm9kdWN0X19yYXRpbmctYnV0dG9uLS1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzRm9yTmV4dFN0YXJzKHRhcmdldFN0YXIsICdwcm9kdWN0X19yYXRpbmctYnV0dG9uLS1hY3RpdmUnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9hZGRDbGFzc0Zvck5leHRTdGFycyhlbGVtLCBhY3RpdmVDbGFzcykge1xyXG4gICAgICAgIHdoaWxlIChlbGVtID0gZWxlbS5uZXh0RWxlbWVudFNpYmxpbmcpIHtcclxuICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKGFjdGl2ZUNsYXNzKTtcclxuICAgICAgICB9OyAgICAgXHJcbiAgICB9O1xyXG5cclxuICAgIF9yZW1vdmVDbGFzc0ZvclByZXZpb3VzU3RhcnMoZWxlbSwgYWN0aXZlQ2xhc3MpIHtcclxuICAgICAgICBkbyB7IGVsZW0gPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShhY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIH0gd2hpbGUgKGVsZW0ucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKGFjdGl2ZUNsYXNzKSk7ICAgXHJcbiAgICB9O1xyXG59OyJdfQ==
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Search = function () {
   function Search() {
      _classCallCheck(this, Search);

      // DOM
      this.serchWrap = document.querySelector('.user-panel__item--search');
      this.searchBtn = document.querySelector('.user-panel__button--search');
      this.searchForm = document.querySelector('.user-panel__search-form');

      this.formActiveClass = 'user-panel__search-form--active';
      //  events
      this._events();
   }

   _createClass(Search, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         this.serchWrap.addEventListener('click', function (e) {

            if (e.target === _this.searchBtn || e.target.parentElement === _this.searchBtn) {
               _this.searchForm.classList.toggle(_this.formActiveClass);
            }
         });

         window.addEventListener('scroll', function (e) {
            if (_this.searchForm.classList.contains(_this.formActiveClass)) {
               if (e) {
                  _this.searchForm.classList.remove(_this.formActiveClass);
               }
            }
         });
      }
   }]);

   return Search;
}();

exports.default = Search;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zZWFyY2guanMiXSwibmFtZXMiOlsiU2VhcmNoIiwic2VyY2hXcmFwIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2VhcmNoQnRuIiwic2VhcmNoRm9ybSIsImZvcm1BY3RpdmVDbGFzcyIsIl9ldmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJ3aW5kb3ciLCJjb250YWlucyIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsTTtBQUNsQixxQkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQkMsU0FBU0MsYUFBVCxDQUF1QiwyQkFBdkIsQ0FBakI7QUFDQSxXQUFLQyxTQUFMLEdBQWlCRixTQUFTQyxhQUFULENBQXVCLDZCQUF2QixDQUFqQjtBQUNBLFdBQUtFLFVBQUwsR0FBa0JILFNBQVNDLGFBQVQsQ0FBdUIsMEJBQXZCLENBQWxCOztBQUVBLFdBQUtHLGVBQUwsR0FBdUIsaUNBQXZCO0FBQ0E7QUFDQSxXQUFLQyxPQUFMO0FBQ0Y7Ozs7Z0NBRVM7QUFBQTs7QUFDUCxjQUFLTixTQUFMLENBQWVPLGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDLGFBQUs7O0FBRTNDLGdCQUFJQyxFQUFFQyxNQUFGLEtBQWEsTUFBS04sU0FBbEIsSUFBK0JLLEVBQUVDLE1BQUYsQ0FBU0MsYUFBVCxLQUEyQixNQUFLUCxTQUFuRSxFQUE4RTtBQUMzRSxxQkFBS0MsVUFBTCxDQUFnQk8sU0FBaEIsQ0FBMEJDLE1BQTFCLENBQWlDLE1BQUtQLGVBQXRDO0FBQ0Y7QUFDSCxVQUxEOztBQU9BUSxnQkFBT04sZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsYUFBSztBQUNwQyxnQkFBSSxNQUFLSCxVQUFMLENBQWdCTyxTQUFoQixDQUEwQkcsUUFBMUIsQ0FBbUMsTUFBS1QsZUFBeEMsQ0FBSixFQUE4RDtBQUMzRCxtQkFBSUcsQ0FBSixFQUFPO0FBQ0osd0JBQUtKLFVBQUwsQ0FBZ0JPLFNBQWhCLENBQTBCSSxNQUExQixDQUFpQyxNQUFLVixlQUF0QztBQUNGO0FBQ0g7QUFDSCxVQU5EO0FBT0Y7Ozs7OztrQkEzQmlCTixNO0FBNEJwQiIsImZpbGUiOiJfc2VhcmNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoIHtcclxuICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIERPTVxyXG4gICAgICB0aGlzLnNlcmNoV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19pdGVtLS1zZWFyY2gnKTtcclxuICAgICAgdGhpcy5zZWFyY2hCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fYnV0dG9uLS1zZWFyY2gnKTtcclxuICAgICAgdGhpcy5zZWFyY2hGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItcGFuZWxfX3NlYXJjaC1mb3JtJyk7XHJcblxyXG4gICAgICB0aGlzLmZvcm1BY3RpdmVDbGFzcyA9ICd1c2VyLXBhbmVsX19zZWFyY2gtZm9ybS0tYWN0aXZlJztcclxuICAgICAgLy8gIGV2ZW50c1xyXG4gICAgICB0aGlzLl9ldmVudHMoKTtcclxuICAgfTtcclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHRoaXMuc2VyY2hXcmFwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMuc2VhcmNoQnRuIHx8IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQgPT09IHRoaXMuc2VhcmNoQnRuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoRm9ybS5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuZm9ybUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHtcclxuICAgICAgICAgaWYgKHRoaXMuc2VhcmNoRm9ybS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5mb3JtQWN0aXZlQ2xhc3MpKSB7XHJcbiAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoRm9ybS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuZm9ybUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG59OyJdfQ==
},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Subscribe = function () {
   function Subscribe() {
      _classCallCheck(this, Subscribe);

      // DOM
      this.subscribeForm = document.querySelector('.subscribe__form');
      this.subscribeBtn = this.subscribeForm.querySelector('.subscribe__form-btn');

      //  Event
      this._event();
      this._btnTargetAnimation();
   }

   _createClass(Subscribe, [{
      key: '_event',
      value: function _event() {
         this.subscribeForm.addEventListener('submit', function (e) {
            event.preventDefault();

            var email = event.target.email.value;

            email = JSON.stringify(email);

            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'https://maxs-4ebe4.firebaseio.com/clients.json');
            xhr.send(email);

            setTimeout(function () {
               if (xhr.readyState == 4) {
                  console.log('Отправленно!');
               }
            }, 1000);

            event.target.email.value = '';
         });
      }
   }, {
      key: '_btnTargetAnimation',
      value: function _btnTargetAnimation() {
         var _this = this;

         this.subscribeBtn.addEventListener('click', function (e) {
            var posX = e.offsetX + 'px',
                posY = e.offsetY + 'px';

            var targetAnimation = document.createElement('div');
            targetAnimation.classList.add('button-bubble__form-btn-terget-animation');
            targetAnimation.style.left = posX;
            targetAnimation.style.top = posY;
            _this.subscribeBtn.appendChild(targetAnimation);

            setTimeout(function () {
               var delEl = _this.subscribeBtn.children[0];
               _this.subscribeBtn.removeChild(delEl);
            }, 400);
         });
      }
   }]);

   return Subscribe;
}();

exports.default = Subscribe;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdWJzY3JpYmUuanMiXSwibmFtZXMiOlsiU3Vic2NyaWJlIiwic3Vic2NyaWJlRm9ybSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN1YnNjcmliZUJ0biIsIl9ldmVudCIsIl9idG5UYXJnZXRBbmltYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImVtYWlsIiwidGFyZ2V0IiwidmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInNldFRpbWVvdXQiLCJyZWFkeVN0YXRlIiwiY29uc29sZSIsImxvZyIsInBvc1giLCJlIiwib2Zmc2V0WCIsInBvc1kiLCJvZmZzZXRZIiwidGFyZ2V0QW5pbWF0aW9uIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInN0eWxlIiwibGVmdCIsInRvcCIsImFwcGVuZENoaWxkIiwiZGVsRWwiLCJjaGlsZHJlbiIsInJlbW92ZUNoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCQSxTO0FBQ2xCLHdCQUFjO0FBQUE7O0FBQ1g7QUFDQSxXQUFLQyxhQUFMLEdBQXFCQyxTQUFTQyxhQUFULENBQXVCLGtCQUF2QixDQUFyQjtBQUNBLFdBQUtDLFlBQUwsR0FBb0IsS0FBS0gsYUFBTCxDQUFtQkUsYUFBbkIsQ0FBaUMsc0JBQWpDLENBQXBCOztBQUVBO0FBQ0EsV0FBS0UsTUFBTDtBQUNBLFdBQUtDLG1CQUFMO0FBQ0Y7Ozs7K0JBRVE7QUFDTixjQUFLTCxhQUFMLENBQW1CTSxnQkFBbkIsQ0FBb0MsUUFBcEMsRUFBOEMsYUFBSztBQUNoREMsa0JBQU1DLGNBQU47O0FBRUEsZ0JBQUlDLFFBQVFGLE1BQU1HLE1BQU4sQ0FBYUQsS0FBYixDQUFtQkUsS0FBL0I7O0FBRUFGLG9CQUFRRyxLQUFLQyxTQUFMLENBQWVKLEtBQWYsQ0FBUjs7QUFFQSxnQkFBSUssTUFBTSxJQUFJQyxjQUFKLEVBQVY7QUFDQUQsZ0JBQUlFLElBQUosQ0FBUyxNQUFULEVBQWlCLGdEQUFqQjtBQUNBRixnQkFBSUcsSUFBSixDQUFTUixLQUFUOztBQUVBUyx1QkFBVyxZQUFNO0FBQ2QsbUJBQUlKLElBQUlLLFVBQUosSUFBa0IsQ0FBdEIsRUFBeUI7QUFDdEJDLDBCQUFRQyxHQUFSLENBQVksY0FBWjtBQUNGO0FBQ0gsYUFKRCxFQUlHLElBSkg7O0FBTUFkLGtCQUFNRyxNQUFOLENBQWFELEtBQWIsQ0FBbUJFLEtBQW5CLEdBQTJCLEVBQTNCO0FBQ0YsVUFsQkQ7QUFtQkY7Ozs0Q0FFcUI7QUFBQTs7QUFDbkIsY0FBS1IsWUFBTCxDQUFrQkcsZ0JBQWxCLENBQW1DLE9BQW5DLEVBQTRDLGFBQUs7QUFDOUMsZ0JBQUlnQixPQUFPQyxFQUFFQyxPQUFGLEdBQVksSUFBdkI7QUFBQSxnQkFDSUMsT0FBT0YsRUFBRUcsT0FBRixHQUFZLElBRHZCOztBQUdBLGdCQUFJQyxrQkFBa0IxQixTQUFTMkIsYUFBVCxDQUF1QixLQUF2QixDQUF0QjtBQUNBRCw0QkFBZ0JFLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QiwwQ0FBOUI7QUFDQUgsNEJBQWdCSSxLQUFoQixDQUFzQkMsSUFBdEIsR0FBNkJWLElBQTdCO0FBQ0FLLDRCQUFnQkksS0FBaEIsQ0FBc0JFLEdBQXRCLEdBQTRCUixJQUE1QjtBQUNBLGtCQUFLdEIsWUFBTCxDQUFrQitCLFdBQWxCLENBQThCUCxlQUE5Qjs7QUFFQVQsdUJBQVcsWUFBTTtBQUNkLG1CQUFJaUIsUUFBUSxNQUFLaEMsWUFBTCxDQUFrQmlDLFFBQWxCLENBQTJCLENBQTNCLENBQVo7QUFDQSxxQkFBS2pDLFlBQUwsQ0FBa0JrQyxXQUFsQixDQUE4QkYsS0FBOUI7QUFDRixhQUhELEVBR0csR0FISDtBQUlGLFVBZEQ7QUFlRjs7Ozs7O2tCQWpEaUJwQyxTO0FBa0RwQiIsImZpbGUiOiJfc3Vic2NyaWJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3Vic2NyaWJlIHtcclxuICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIERPTVxyXG4gICAgICB0aGlzLnN1YnNjcmliZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtJyk7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlQnRuID0gdGhpcy5zdWJzY3JpYmVGb3JtLnF1ZXJ5U2VsZWN0b3IoJy5zdWJzY3JpYmVfX2Zvcm0tYnRuJyk7XHJcblxyXG4gICAgICAvLyAgRXZlbnRcclxuICAgICAgdGhpcy5fZXZlbnQoKTtcclxuICAgICAgdGhpcy5fYnRuVGFyZ2V0QW5pbWF0aW9uKCk7XHJcbiAgIH07XHJcblxyXG4gICBfZXZlbnQoKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBlID0+IHtcclxuICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGxldCBlbWFpbCA9IGV2ZW50LnRhcmdldC5lbWFpbC52YWx1ZTtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGVtYWlsID0gSlNPTi5zdHJpbmdpZnkoZW1haWwpO1xyXG5cclxuICAgICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICB4aHIub3BlbignUE9TVCcsICdodHRwczovL21heHMtNGViZTQuZmlyZWJhc2Vpby5jb20vY2xpZW50cy5qc29uJyk7XHJcbiAgICAgICAgIHhoci5zZW5kKGVtYWlsKTtcclxuXHJcbiAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCkge1xyXG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZygn0J7RgtC/0YDQsNCy0LvQtdC90L3QviEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGV2ZW50LnRhcmdldC5lbWFpbC52YWx1ZSA9ICcnO1xyXG4gICAgICB9KTtcclxuICAgfTtcclxuXHJcbiAgIF9idG5UYXJnZXRBbmltYXRpb24oKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgIGxldCBwb3NYID0gZS5vZmZzZXRYICsgJ3B4JyxcclxuICAgICAgICAgICAgIHBvc1kgPSBlLm9mZnNldFkgKyAncHgnO1xyXG5cclxuICAgICAgICAgbGV0IHRhcmdldEFuaW1hdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICB0YXJnZXRBbmltYXRpb24uY2xhc3NMaXN0LmFkZCgnYnV0dG9uLWJ1YmJsZV9fZm9ybS1idG4tdGVyZ2V0LWFuaW1hdGlvbicpO1xyXG4gICAgICAgICB0YXJnZXRBbmltYXRpb24uc3R5bGUubGVmdCA9IHBvc1g7XHJcbiAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5zdHlsZS50b3AgPSBwb3NZO1xyXG4gICAgICAgICB0aGlzLnN1YnNjcmliZUJ0bi5hcHBlbmRDaGlsZCh0YXJnZXRBbmltYXRpb24pO1xyXG5cclxuICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBkZWxFbCA9IHRoaXMuc3Vic2NyaWJlQnRuLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZUJ0bi5yZW1vdmVDaGlsZChkZWxFbCk7XHJcbiAgICAgICAgIH0sIDQwMCk7XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG59OyJdfQ==
},{}],7:[function(require,module,exports){
'use strict';

var _addProductItems = require('./_add-product-items');

var _addProductItems2 = _interopRequireDefault(_addProductItems);

var _burgerMenu = require('./_burger-menu');

var _burgerMenu2 = _interopRequireDefault(_burgerMenu);

var _fixedHeader = require('./_fixed-header');

var _fixedHeader2 = _interopRequireDefault(_fixedHeader);

var _search = require('./_search');

var _search2 = _interopRequireDefault(_search);

var _productItemsEvents = require('./_product-items-events');

var _productItemsEvents2 = _interopRequireDefault(_productItemsEvents);

var _subscribe = require('./_subscribe');

var _subscribe2 = _interopRequireDefault(_subscribe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('DOMContentLoaded', init);

function init() {

    // Clone navigation
    function cloneNav() {
        var nav = document.querySelector('.header-nav__list').cloneNode(true);
        var cloneNavParrent = document.querySelector('.fixed-nav');

        cloneNavParrent.insertBefore(nav, cloneNavParrent[0]);
    };
    cloneNav();

    // Set margin top for top section
    function setMargin() {
        var header = document.querySelector('.header'),
            topSection = document.querySelector('.top-section');

        topSection.style.marginTop = header.offsetHeight + 'px';
    };
    setMargin();

    var addProductItems = new _addProductItems2.default();
    var burgerMenu = new _burgerMenu2.default();
    var fixedHeader = new _fixedHeader2.default();
    var search = new _search2.default();
    var productItemsEvents = new _productItemsEvents2.default();
    var subscribe = new _subscribe2.default();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfYzFiOTIzOWEuanMiXSwibmFtZXMiOlsid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXQiLCJjbG9uZU5hdiIsIm5hdiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lTm9kZSIsImNsb25lTmF2UGFycmVudCIsImluc2VydEJlZm9yZSIsInNldE1hcmdpbiIsImhlYWRlciIsInRvcFNlY3Rpb24iLCJzdHlsZSIsIm1hcmdpblRvcCIsIm9mZnNldEhlaWdodCIsImFkZFByb2R1Y3RJdGVtcyIsImJ1cmdlck1lbnUiLCJmaXhlZEhlYWRlciIsInNlYXJjaCIsInByb2R1Y3RJdGVtc0V2ZW50cyIsInN1YnNjcmliZSJdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQVBBQSxPQUFPQyxnQkFBUCxDQUF3QixrQkFBeEIsRUFBNENDLElBQTVDOztBQVNBLFNBQVNBLElBQVQsR0FBZ0I7O0FBRVo7QUFDQSxhQUFTQyxRQUFULEdBQW9CO0FBQ2hCLFlBQUlDLE1BQU1DLFNBQVNDLGFBQVQsQ0FBdUIsbUJBQXZCLEVBQTRDQyxTQUE1QyxDQUFzRCxJQUF0RCxDQUFWO0FBQ0EsWUFBSUMsa0JBQWtCSCxTQUFTQyxhQUFULENBQXVCLFlBQXZCLENBQXRCOztBQUVBRSx3QkFBZ0JDLFlBQWhCLENBQTZCTCxHQUE3QixFQUFrQ0ksZ0JBQWdCLENBQWhCLENBQWxDO0FBQ0g7QUFDREw7O0FBRUE7QUFDQSxhQUFTTyxTQUFULEdBQXFCO0FBQ2pCLFlBQUlDLFNBQVNOLFNBQVNDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBYjtBQUFBLFlBQ0lNLGFBQWFQLFNBQVNDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FEakI7O0FBR0FNLG1CQUFXQyxLQUFYLENBQWlCQyxTQUFqQixHQUE2QkgsT0FBT0ksWUFBUCxHQUFzQixJQUFuRDtBQUNIO0FBQ0RMOztBQUVBLFFBQU1NLGtCQUFrQiwrQkFBeEI7QUFDQSxRQUFNQyxhQUFhLDBCQUFuQjtBQUNBLFFBQU1DLGNBQWMsMkJBQXBCO0FBQ0EsUUFBTUMsU0FBUyxzQkFBZjtBQUNBLFFBQU1DLHFCQUFxQixrQ0FBM0I7QUFDQSxRQUFNQyxZQUFZLHlCQUFsQjtBQUNIIiwiZmlsZSI6ImZha2VfYzFiOTIzOWEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXQpO1xyXG5cclxuaW1wb3J0IEFkZFByb2R1Y3RJdGVtcyBmcm9tICcuL19hZGQtcHJvZHVjdC1pdGVtcyc7XHJcbmltcG9ydCBCdXJnZXJNZW51IGZyb20gJy4vX2J1cmdlci1tZW51JztcclxuaW1wb3J0IEZpeGVkSGVhZGVyIGZyb20gJy4vX2ZpeGVkLWhlYWRlcic7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSAnLi9fc2VhcmNoJztcclxuaW1wb3J0IFByb2R1Y3RJdGVtc0V2ZW50cyBmcm9tICcuL19wcm9kdWN0LWl0ZW1zLWV2ZW50cyc7XHJcbmltcG9ydCBTdWJzY3JpYmUgZnJvbSAnLi9fc3Vic2NyaWJlJztcclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgIFxyXG4gICAgLy8gQ2xvbmUgbmF2aWdhdGlvblxyXG4gICAgZnVuY3Rpb24gY2xvbmVOYXYoKSB7XHJcbiAgICAgICAgbGV0IG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItbmF2X19saXN0JykuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgIGxldCBjbG9uZU5hdlBhcnJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2Jyk7XHJcblxyXG4gICAgICAgIGNsb25lTmF2UGFycmVudC5pbnNlcnRCZWZvcmUobmF2LCBjbG9uZU5hdlBhcnJlbnRbMF0pO1xyXG4gICAgfTtcclxuICAgIGNsb25lTmF2KCk7XHJcblxyXG4gICAgLy8gU2V0IG1hcmdpbiB0b3AgZm9yIHRvcCBzZWN0aW9uXHJcbiAgICBmdW5jdGlvbiBzZXRNYXJnaW4oKSB7XHJcbiAgICAgICAgbGV0IGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKSxcclxuICAgICAgICAgICAgdG9wU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b3Atc2VjdGlvbicpO1xyXG5cclxuICAgICAgICB0b3BTZWN0aW9uLnN0eWxlLm1hcmdpblRvcCA9IGhlYWRlci5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgfTtcclxuICAgIHNldE1hcmdpbigpXHJcblxyXG4gICAgY29uc3QgYWRkUHJvZHVjdEl0ZW1zID0gbmV3IEFkZFByb2R1Y3RJdGVtcztcclxuICAgIGNvbnN0IGJ1cmdlck1lbnUgPSBuZXcgQnVyZ2VyTWVudTtcclxuICAgIGNvbnN0IGZpeGVkSGVhZGVyID0gbmV3IEZpeGVkSGVhZGVyO1xyXG4gICAgY29uc3Qgc2VhcmNoID0gbmV3IFNlYXJjaDtcclxuICAgIGNvbnN0IHByb2R1Y3RJdGVtc0V2ZW50cyA9IG5ldyBQcm9kdWN0SXRlbXNFdmVudHM7XHJcbiAgICBjb25zdCBzdWJzY3JpYmUgPSBuZXcgU3Vic2NyaWJlO1xyXG59OyJdfQ==
},{"./_add-product-items":1,"./_burger-menu":2,"./_fixed-header":3,"./_product-items-events":4,"./_search":5,"./_subscribe":6}]},{},[7])
//# sourceMappingURL=data:application/json;base64,
