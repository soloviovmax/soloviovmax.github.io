(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AddProductItems = function () {
    function AddProductItems() {
        _classCallCheck(this, AddProductItems);

        // DOM
        this.mainItem = document.querySelector('.product__item-clone').children[0];
        this.parrent = document.querySelector('.feauture-product');
        this.btn = document.querySelector('.load-more-btn');

        // vars 
        this.firstLoadedItemsQty = 8;
        this.pressBtnLoadedItemsQty = 4;

        //  events
        this._firstLoadAddItems();
        this._pressBtnAddItems();
    }

    _createClass(AddProductItems, [{
        key: 'hello',
        value: function hello() {
            return 'hello';
        }
    }, {
        key: '_firstLoadAddItems',
        value: function _firstLoadAddItems() {
            var _this = this;

            this.xhr = new XMLHttpRequest();

            this.xhr.open('GET', '../db.json');

            this.xhr.responseType = "json";

            this.xhr.addEventListener('load', function () {
                _this.data = _this.xhr.response;
                _this.totalQtyItems = _this.data.length - 1;
                _this.qtyItems = _this.firstLoadedItemsQty;

                _this._addItems(_this.totalQtyItems, _this.qtyItems);
            });
            this.xhr.send();
        }
    }, {
        key: '_pressBtnAddItems',
        value: function _pressBtnAddItems() {
            var _this2 = this;

            this.nowAdded = this.firstLoadedItemsQty;

            this.btn.addEventListener('click', function () {
                _this2.xhr = new XMLHttpRequest();

                _this2.xhr.open('GET', '../db.json');

                _this2.xhr.responseType = "json";

                _this2.xhr.addEventListener('load', function () {
                    _this2.data = _this2.xhr.response;
                    _this2.totalQtyItems = _this2.data.length - 1 - _this2.nowAdded;
                    _this2.qtyItems = _this2.pressBtnLoadedItemsQty;
                    _this2._addItems(_this2.totalQtyItems, _this2.qtyItems);

                    _this2.nowAdded += _this2.pressBtnLoadedItemsQty;
                });
                _this2.xhr.send();
            });
        }
    }, {
        key: '_addItems',
        value: function _addItems(totalQty, addQty) {

            for (var i = totalQty; i > totalQty - addQty; i--) {
                if (i === 0) {
                    this.btn.style.display = 'none';
                }
                var currentItem = this.mainItem.cloneNode(true);

                var img = currentItem.querySelector('.product__img'),
                    title = currentItem.querySelector('.product__title-link'),
                    price = currentItem.querySelector('.product__price'),
                    basketBtn = currentItem.querySelector('.product__details-button--basket'),
                    zoomBtn = currentItem.querySelector('.product__details-button--zoom');

                var dataItem = this.data[i];
                for (var key in dataItem) {
                    if (key === 'src') {
                        img.setAttribute('src', 'img/' + dataItem[key]);
                        zoomBtn.dataset.src = 'img/' + 'big-' + dataItem[key];
                    } else if (key === 'title') {
                        title.textContent = dataItem[key];
                    } else if (key === 'price') {
                        price.textContent = '$' + dataItem[key];
                        basketBtn.dataset.price = dataItem[key];
                    } else if (key === 'id') {
                        currentItem.dataset.id = dataItem[key];
                    } else if (key === 'oldPrice') {
                        var oldPriceSpan = document.createElement('span');
                        oldPriceSpan.textContent = '$' + dataItem[key];
                        oldPriceSpan.classList.add('product__old-price');
                        var descrWrap = currentItem.querySelector('.product-descr');
                        descrWrap.insertBefore(oldPriceSpan, descrWrap.children[2]);
                    } else if (key === 'label') {
                        currentItem.classList.add('product__item--label-' + dataItem[key]);
                    }
                }
                this.parrent.appendChild(currentItem);
            }
        }
    }]);

    return AddProductItems;
}();

exports.default = AddProductItems;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9hZGQtcHJvZHVjdC1pdGVtcy5qcyJdLCJuYW1lcyI6WyJBZGRQcm9kdWN0SXRlbXMiLCJtYWluSXRlbSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNoaWxkcmVuIiwicGFycmVudCIsImJ0biIsImZpcnN0TG9hZGVkSXRlbXNRdHkiLCJwcmVzc0J0bkxvYWRlZEl0ZW1zUXR5IiwiX2ZpcnN0TG9hZEFkZEl0ZW1zIiwiX3ByZXNzQnRuQWRkSXRlbXMiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZGF0YSIsInJlc3BvbnNlIiwidG90YWxRdHlJdGVtcyIsImxlbmd0aCIsInF0eUl0ZW1zIiwiX2FkZEl0ZW1zIiwic2VuZCIsIm5vd0FkZGVkIiwidG90YWxRdHkiLCJhZGRRdHkiLCJpIiwic3R5bGUiLCJkaXNwbGF5IiwiY3VycmVudEl0ZW0iLCJjbG9uZU5vZGUiLCJpbWciLCJ0aXRsZSIsInByaWNlIiwiYmFza2V0QnRuIiwiem9vbUJ0biIsImRhdGFJdGVtIiwia2V5Iiwic2V0QXR0cmlidXRlIiwiZGF0YXNldCIsInNyYyIsInRleHRDb250ZW50IiwiaWQiLCJvbGRQcmljZVNwYW4iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZGVzY3JXcmFwIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLGU7QUFDbEIsK0JBQWM7QUFBQTs7QUFDVjtBQUNBLGFBQUtDLFFBQUwsR0FBZ0JDLFNBQVNDLGFBQVQsQ0FBdUIsc0JBQXZCLEVBQStDQyxRQUEvQyxDQUF3RCxDQUF4RCxDQUFoQjtBQUNBLGFBQUtDLE9BQUwsR0FBZUgsU0FBU0MsYUFBVCxDQUF1QixtQkFBdkIsQ0FBZjtBQUNBLGFBQUtHLEdBQUwsR0FBV0osU0FBU0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBWDs7QUFFQTtBQUNBLGFBQUtJLG1C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cHJvZHVjdC1pdGVtcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFkZFByb2R1Y3RJdGVtcyB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgLy8gRE9NXHJcbiAgICAgICB0aGlzLm1haW5JdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2R1Y3RfX2l0ZW0tY2xvbmUnKS5jaGlsZHJlblswXTtcclxuICAgICAgIHRoaXMucGFycmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWF1dHVyZS1wcm9kdWN0Jyk7XHJcbiAgICAgICB0aGlzLmJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkLW1vcmUtYnRuJyk7XHJcblxyXG4gICAgICAgLy8gdmFycyBcclxuICAgICAgIHRoaXMuZmlyc3RMb2FkZWRJdGVtc1F0eSA9IDg7XHJcbiAgICAgICB0aGlzLnByZXNzQnRuTG9hZGVkSXRlbXNRdHkgPSA0O1xyXG5cclxuXHJcbiAgICAgICAvLyAgZXZlbnRzXHJcbiAgICAgICB0aGlzLl9maXJzdExvYWRBZGRJdGVtcygpO1xyXG4gICAgICAgdGhpcy5fcHJlc3NCdG5BZGRJdGVtcygpO1xyXG4gICB9XHJcbiAgIGhlbGxvKCkge1xyXG4gICAgICAgcmV0dXJuICdoZWxsbyc7XHJcbiAgIH07XHJcbiAgIF9maXJzdExvYWRBZGRJdGVtcygpIHtcclxuICAgICAgIHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgICAgdGhpcy54aHIub3BlbignR0VUJywgJy4uL2RiLmpzb24nKTtcclxuXHJcbiAgICAgICB0aGlzLnhoci5yZXNwb25zZVR5cGUgPSBcImpzb25cIjtcclxuXHJcbiAgICAgICB0aGlzLnhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xyXG4gICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlO1xyXG4gICAgICAgICAgIHRoaXMudG90YWxRdHlJdGVtcyA9ICh0aGlzLmRhdGEubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgdGhpcy5xdHlJdGVtcyA9IHRoaXMuZmlyc3RMb2FkZWRJdGVtc1F0eTtcclxuXHJcbiAgICAgICB0aGlzLl9hZGRJdGVtcyh0aGlzLnRvdGFsUXR5SXRlbXMsIHRoaXMucXR5SXRlbXMpO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgfSk7XHJcbiAgICAgICB0aGlzLnhoci5zZW5kKCk7XHJcbiAgIH07XHJcblxyXG4gICBfcHJlc3NCdG5BZGRJdGVtcygpIHtcclxuICAgICAgIHRoaXMubm93QWRkZWQgPSB0aGlzLmZpcnN0TG9hZGVkSXRlbXNRdHk7XHJcblxyXG4gICAgICAgdGhpcy5idG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgdGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcbiAgICAgICAgICAgdGhpcy54aHIub3BlbignR0VUJywgJy4uL2RiLmpzb24nKTtcclxuXHJcbiAgICAgICAgICAgdGhpcy54aHIucmVzcG9uc2VUeXBlID0gXCJqc29uXCI7XHJcblxyXG4gICAgICAgICAgIHRoaXMueGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICB0aGlzLnRvdGFsUXR5SXRlbXMgPSAodGhpcy5kYXRhLmxlbmd0aCAtIDEgLSB0aGlzLm5vd0FkZGVkKTtcclxuICAgICAgICAgICAgICAgdGhpcy5xdHlJdGVtcyA9IHRoaXMucHJlc3NCdG5Mb2FkZWRJdGVtc1F0eTtcclxuICAgICAgICAgICB0aGlzLl9hZGRJdGVtcyh0aGlzLnRvdGFsUXR5SXRlbXMsIHRoaXMucXR5SXRlbXMpO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgIHRoaXMubm93QWRkZWQgKz0gdGhpcy5wcmVzc0J0bkxvYWRlZEl0ZW1zUXR5O1xyXG4gICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgIHRoaXMueGhyLnNlbmQoKTtcclxuICAgICAgIFxyXG4gICAgICAgfSk7XHJcbiAgIH07XHJcblxyXG4gICBfYWRkSXRlbXModG90YWxRdHksIGFkZFF0eSkge1xyXG5cclxuICAgICAgIGZvciAobGV0IGkgPSB0b3RhbFF0eTsgaSA+ICh0b3RhbFF0eSAtIGFkZFF0eSk7IGktLSkge1xyXG4gICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuYnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgIGxldCBjdXJyZW50SXRlbSA9IHRoaXMubWFpbkl0ZW0uY2xvbmVOb2RlKHRydWUpO1xyXG5cclxuICAgICAgICAgICBsZXQgaW1nID0gY3VycmVudEl0ZW0ucXVlcnlTZWxlY3RvcignLnByb2R1Y3RfX2ltZycpLFxyXG4gICAgICAgICAgICAgICB0aXRsZSA9IGN1cnJlbnRJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0X190aXRsZS1saW5rJyksXHJcbiAgICAgICAgICAgICAgIHByaWNlID0gY3VycmVudEl0ZW0ucXVlcnlTZWxlY3RvcignLnByb2R1Y3RfX3ByaWNlJyksXHJcbiAgICAgICAgICAgICAgIGJhc2tldEJ0biA9IGN1cnJlbnRJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0X19kZXRhaWxzLWJ1dHRvbi0tYmFza2V0JyksXHJcbiAgICAgICAgICAgICAgIHpvb21CdG4gPSBjdXJyZW50SXRlbS5xdWVyeVNlbGVjdG9yKCcucHJvZHVjdF9fZGV0YWlscy1idXR0b24tLXpvb20nKTtcclxuXHJcbiAgICAgICAgICAgbGV0IGRhdGFJdGVtID0gdGhpcy5kYXRhW2ldO1xyXG4gICAgICAgICAgIGZvciAobGV0IGtleSBpbiBkYXRhSXRlbSkge1xyXG4gICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnc3JjJykge1xyXG4gICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgKCdpbWcvJyArIGRhdGFJdGVtW2tleV0pKTtcclxuICAgICAgICAgICAgICAgICAgIHpvb21CdG4uZGF0YXNldC5zcmMgPSAoJ2ltZy8nICsgJ2JpZy0nICsgZGF0YUl0ZW1ba2V5XSk7XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndGl0bGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGRhdGFJdGVtW2tleV07XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncHJpY2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICBwcmljZS50ZXh0Q29udGVudCA9ICckJyArIGRhdGFJdGVtW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICBiYXNrZXRCdG4uZGF0YXNldC5wcmljZSA9IGRhdGFJdGVtW2tleV07XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICBjdXJyZW50SXRlbS5kYXRhc2V0LmlkID0gZGF0YUl0ZW1ba2V5XTtcclxuICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdvbGRQcmljZScpIHtcclxuICAgICAgICAgICAgICAgICAgIGxldCBvbGRQcmljZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgICAgICAgICBvbGRQcmljZVNwYW4udGV4dENvbnRlbnQgPSAnJCcgKyBkYXRhSXRlbVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgb2xkUHJpY2VTcGFuLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3RfX29sZC1wcmljZScpO1xyXG4gICAgICAgICAgICAgICAgICAgbGV0IGRlc2NyV3JhcCA9IGN1cnJlbnRJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0LWRlc2NyJyk7XHJcbiAgICAgICAgICAgICAgICAgICBkZXNjcldyYXAuaW5zZXJ0QmVmb3JlKG9sZFByaWNlU3BhbiwgZGVzY3JXcmFwLmNoaWxkcmVuWzJdKTtcclxuICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdsYWJlbCcpIHtcclxuICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3RfX2l0ZW0tLWxhYmVsLScgKyBkYXRhSXRlbVtrZXldKTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICAgdGhpcy5wYXJyZW50LmFwcGVuZENoaWxkKGN1cnJlbnRJdGVtKTtcclxuICAgICAgIH1cclxuICAgfTtcclxufTsiXX0=
},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BurgerMenu = function () {
   function BurgerMenu() {
      _classCallCheck(this, BurgerMenu);

      // DOM
      this.btn = document.querySelector('.burger-btn');
      this.navList = document.querySelector('.fixed-nav .header-nav__list');
      this.navItem = document.querySelectorAll('.fixed-nav .header-nav__item');
      this.body = document.querySelector('body');
      this.header = document.querySelector('.header');
      this.maincontent = document.querySelector('.maincontent');
      this.footer = document.querySelector('.footer');

      //  events
      this._events();
   }

   _createClass(BurgerMenu, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         this.btn.addEventListener('click', function () {
            _this.navList.classList.add('header-nav__list--burger-active');

            var timeout = 50;

            var _loop = function _loop(i) {

               setTimeout(function () {
                  _this.navItem[i].classList.add('header-nav__item--burger-active');
               }, timeout);

               timeout += 50;
            };

            for (var i = 0; i < _this.navItem.length; i++) {
               _loop(i);
            };

            _this.body.classList.add('overflow-hidden');
            _this.header.classList.add('blur');
            _this.maincontent.classList.add('blur');
            _this.footer.classList.add('blur');
         });

         this.navList.addEventListener('click', function (e) {
            if (e.target === e.currentTarget) {
               _this.navList.classList.remove('header-nav__list--burger-active');

               for (var i = 0; i < _this.navItem.length; i++) {
                  _this.navItem[i].classList.remove('header-nav__item--burger-active');
               };

               _this.body.classList.remove('overflow-hidden');
               _this.header.classList.remove('blur');
               _this.maincontent.classList.remove('blur');
               _this.footer.classList.remove('blur');
            }
         });
      }
   }]);

   return BurgerMenu;
}();

exports.default = BurgerMenu;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9idXJnZXItbWVudS5qcyJdLCJuYW1lcyI6WyJCdXJnZXJNZW51IiwiYnRuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmF2TGlzdCIsIm5hdkl0ZW0iLCJxdWVyeVNlbGVjdG9yQWxsIiwiYm9keSIsImhlYWRlciIsIm1haW5jb250ZW50IiwiZm9vdGVyIiwiX2V2ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0aW1lb3V0IiwiaSIsInNldFRpbWVvdXQiLCJsZW5ndGgiLCJlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsVTtBQUNsQix5QkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsR0FBTCxHQUFXQyxTQUFTQyxhQUFULENBQXVCLGFBQXZCLENBQVg7QUFDQSxXQUFLQyxPQUFMLEdBQWVGLFNBQVNDLGFBQVQsQ0FBdUIsOEJBQXZCLENBQWY7QUFDQSxXQUFLRSxPQUFMLEdBQWVILFNBQVNJLGdCQUFULENBQTBCLDhCQUExQixDQUFmO0FBQ0EsV0FBS0MsSUFBTCxHQUFZTCxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQVo7QUFDQSxXQUFLSyxNQUFMLEdBQWNOLFNBQVNDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBZDtBQUNBLFdBQUtNLFdBQUwsR0FBbUJQLFNBQVNDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBbkI7QUFDQSxXQUFLTyxNQUFMLEdBQWNSLFNBQVNDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBZDs7QUFFQTtBQUNBLFdBQUtRLE9BQUw7QUFDRjs7OztnQ0FFUztBQUFBOztBQUNQLGNBQUtWLEdBQUwsQ0FBU1csZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMsWUFBTTtBQUN0QyxrQkFBS1IsT0FBTCxDQUFhUyxTQUFiLENBQXVCQyxHQUF2QixDQUEyQixpQ0FBM0I7O0FBRUEsZ0JBQUlDLFVBQVUsRUFBZDs7QUFIc0MsdUNBSTdCQyxDQUo2Qjs7QUFNbkNDLDBCQUFXLFlBQU07QUFDZCx3QkFBS1osT0FBTCxDQUFhVyxDQUFiLEVBQWdCSCxTQUFoQixDQUEwQkMsR0FBMUIsQ0FBOEIsaUNBQTlCO0FBQ0YsZ0JBRkQsRUFFR0MsT0FGSDs7QUFJQUEsMEJBQVcsRUFBWDtBQVZtQzs7QUFJdEMsaUJBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLE1BQUtYLE9BQUwsQ0FBYWEsTUFBakMsRUFBeUNGLEdBQXpDLEVBQThDO0FBQUEscUJBQXJDQSxDQUFxQztBQU83Qzs7QUFFRCxrQkFBS1QsSUFBTCxDQUFVTSxTQUFWLENBQW9CQyxHQUFwQixDQUF3QixpQkFBeEI7QUFDQSxrQkFBS04sTUFBTCxDQUFZSyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNBLGtCQUFLTCxXQUFMLENBQWlCSSxTQUFqQixDQUEyQkMsR0FBM0IsQ0FBK0IsTUFBL0I7QUFDQSxrQkFBS0osTUFBTCxDQUFZRyxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjtBQUNGLFVBakJEOztBQW1CQSxjQUFLVixPQUFMLENBQWFRLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLGFBQUs7QUFDekMsZ0JBQUlPLEVBQUVDLE1BQUYsS0FBYUQsRUFBRUUsYUFBbkIsRUFBa0M7QUFDL0IscUJBQUtqQixPQUFMLENBQWFTLFNBQWIsQ0FBdUJTLE1BQXZCLENBQThCLGlDQUE5Qjs7QUFFQSxvQkFBSyxJQUFJTixJQUFJLENBQWIsRUFBZ0JBLElBQUksTUFBS1gsT0FBTCxDQUFhYSxNQUFqQyxFQUF5Q0YsR0FBekMsRUFBOEM7QUFDM0Msd0JBQUtYLE9BQUwsQ0FBYVcsQ0FBYixFQUFnQkgsU0FBaEIsQ0FBMEJTLE1BQTFCLENBQWlDLGlDQUFqQztBQUNGOztBQUVELHFCQUFLZixJQUFMLENBQVVNLFNBQVYsQ0FBb0JTLE1BQXBCLENBQTJCLGlCQUEzQjtBQUNBLHFCQUFLZCxNQUFMLENBQVlLLFNBQVosQ0FBc0JTLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0EscUJBQUtiLFdBQUwsQ0FBaUJJLFNBQWpCLENBQTJCUyxNQUEzQixDQUFrQyxNQUFsQztBQUNBLHFCQUFLWixNQUFMLENBQVlHLFNBQVosQ0FBc0JTLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0Y7QUFDSCxVQWJEO0FBY0Y7Ozs7OztrQkFqRGlCdEIsVTtBQWtEcEIiLCJmaWxlIjoiX2J1cmdlci1tZW51LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVyZ2VyTWVudSB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5idG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnVyZ2VyLWJ0bicpO1xyXG4gICAgICB0aGlzLm5hdkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2IC5oZWFkZXItbmF2X19saXN0Jyk7XHJcbiAgICAgIHRoaXMubmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maXhlZC1uYXYgLmhlYWRlci1uYXZfX2l0ZW0nKTtcclxuICAgICAgdGhpcy5ib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gICAgICB0aGlzLmhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcclxuICAgICAgdGhpcy5tYWluY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluY29udGVudCcpO1xyXG4gICAgICB0aGlzLmZvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb290ZXInKTtcclxuXHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fZXZlbnRzKCk7XHJcbiAgIH1cclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHRoaXMuYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLm5hdkxpc3QuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLW5hdl9fbGlzdC0tYnVyZ2VyLWFjdGl2ZScpO1xyXG5cclxuICAgICAgICAgbGV0IHRpbWVvdXQgPSA1MDtcclxuICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5hdkl0ZW0ubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICB0aGlzLm5hdkl0ZW1baV0uY2xhc3NMaXN0LmFkZCgnaGVhZGVyLW5hdl9faXRlbS0tYnVyZ2VyLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuXHJcbiAgICAgICAgICAgIHRpbWVvdXQgKz0gNTA7XHJcbiAgICAgICAgIH07XHJcblxyXG4gICAgICAgICB0aGlzLmJvZHkuY2xhc3NMaXN0LmFkZCgnb3ZlcmZsb3ctaGlkZGVuJyk7XHJcbiAgICAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcclxuICAgICAgICAgdGhpcy5tYWluY29udGVudC5jbGFzc0xpc3QuYWRkKCdibHVyJyk7XHJcbiAgICAgICAgIHRoaXMuZm9vdGVyLmNsYXNzTGlzdC5hZGQoJ2JsdXInKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLm5hdkxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5uYXZMaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1uYXZfX2xpc3QtLWJ1cmdlci1hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uYXZJdGVtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMubmF2SXRlbVtpXS5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXItbmF2X19pdGVtLS1idXJnZXItYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmZsb3ctaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgICAgdGhpcy5tYWluY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCdibHVyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2JsdXInKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgfVxyXG59OyJdfQ==
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FixedHeader = function () {
   function FixedHeader() {
      _classCallCheck(this, FixedHeader);

      // DOM
      this.header = document.querySelector('.bottom-header');

      // Additional Vars
      this.offset = 1000;

      //  events
      this._events();
   }

   _createClass(FixedHeader, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            if (window.pageYOffset > _this.offset) {
               _this.header.style.transform = 'translateY(0)';
               _this.header.classList.add('bottom-header--fixed');
            } else if (window.pageYOffset > _this.offset / 3 * 2) {
               _this.header.style.transform = 'translateY(-100%)';
            } else {
               _this.header.classList.remove('bottom-header--fixed');
               _this.header.style.transform = 'translateY(0)';
            }
         });
      }
   }]);

   return FixedHeader;
}();

exports.default = FixedHeader;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9maXhlZC1oZWFkZXIuanMiXSwibmFtZXMiOlsiRml4ZWRIZWFkZXIiLCJoZWFkZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJvZmZzZXQiLCJfZXZlbnRzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhZ2VZT2Zmc2V0Iiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFc7QUFDbEIsMEJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLE1BQUwsR0FBY0MsU0FBU0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBZDs7QUFFQTtBQUNBLFdBQUtDLE1BQUwsR0FBYyxJQUFkOztBQUVBO0FBQ0EsV0FBS0MsT0FBTDtBQUNGOzs7O2dDQUVTO0FBQUE7O0FBQ1BDLGdCQUFPQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxhQUFLO0FBQ3BDLGdCQUFJRCxPQUFPRSxXQUFQLEdBQXFCLE1BQUtKLE1BQTlCLEVBQXNDO0FBQ25DLHFCQUFLSCxNQUFMLENBQVlRLEtBQVosQ0FBa0JDLFNBQWxCLEdBQThCLGVBQTlCO0FBQ0EscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkMsR0FBdEIsQ0FBMEIsc0JBQTFCO0FBQ0YsYUFIRCxNQUdPLElBQUlOLE9BQU9FLFdBQVAsR0FBc0IsTUFBS0osTUFBTCxHQUFjLENBQWYsR0FBb0IsQ0FBN0MsRUFBZ0Q7QUFDcEQscUJBQUtILE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsbUJBQTlCO0FBQ0YsYUFGTSxNQUVBO0FBQ0oscUJBQUtULE1BQUwsQ0FBWVUsU0FBWixDQUFzQkUsTUFBdEIsQ0FBNkIsc0JBQTdCO0FBQ0EscUJBQUtaLE1BQUwsQ0FBWVEsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsZUFBOUI7QUFDRjtBQUNILFVBVkQ7QUFXRjs7Ozs7O2tCQXhCaUJWLFc7QUF5QnBCIiwiZmlsZSI6Il9maXhlZC1oZWFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGaXhlZEhlYWRlciB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5oZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm90dG9tLWhlYWRlcicpO1xyXG5cclxuICAgICAgLy8gQWRkaXRpb25hbCBWYXJzXHJcbiAgICAgIHRoaXMub2Zmc2V0ID0gMTAwMDtcclxuXHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fZXZlbnRzKCk7XHJcbiAgIH1cclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHtcclxuICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPiAodGhpcy5vZmZzZXQgLyAzKSAqIDIpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTEwMCUpJztcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnYm90dG9tLWhlYWRlci0tZml4ZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcbn07Il19
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProductItemsEvents = function () {
    function ProductItemsEvents() {
        _classCallCheck(this, ProductItemsEvents);

        // DOM
        this.itemsWrap = document.querySelector('.feauture-product');
        this.basketTotalPrice = document.querySelector('.user-panel__button-total-price');
        this.basketQty = document.querySelector('.user-panel__button-qty--basket');
        this.heartsQty = document.querySelector('.user-panel__button-qty--heart');
        this.imageZoomBtn = document.querySelector('.product__details-button--zoom');
        this.imgZoomWindow = document.querySelector('.img-zoom-window__img');

        // Additional Vars
        this.totalPrice = 0;
        this.totalQty = 0;
        this.totalLikes = 0;

        //  events
        this._events();
        this._loadBasketFromLocalStorege();
    }

    _createClass(ProductItemsEvents, [{
        key: '_events',
        value: function _events() {
            var _this = this;

            this.itemsWrap.addEventListener('click', function (e) {
                _this._addToBasket(e);
                _this._like(e);
                _this._zoomBtn(e);
                _this._stars(e);
            });
        }
    }, {
        key: '_addToBasket',
        value: function _addToBasket(e) {
            if (e.target.parentElement.dataset.price) {
                var itemPrice = e.target.parentElement.dataset.price;
                this.totalPrice += +itemPrice;
                this.totalQty++;

                this.basketTotalPrice.textContent = '$' + this.totalPrice;
                this.basketQty.textContent = this.totalQty;

                localStorage.setItem('basketTotalPrice', this.totalPrice);
                localStorage.setItem('basketQty', this.totalQty);
            };
        }
    }, {
        key: '_loadBasketFromLocalStorege',
        value: function _loadBasketFromLocalStorege() {
            if (localStorage.getItem('basketTotalPrice')) {
                this.totalPrice = +localStorage.getItem('basketTotalPrice');
                this.basketTotalPrice.textContent = this.totalPrice;
            }

            if (localStorage.getItem('basketQty')) {
                this.totalQty = +localStorage.getItem('basketQty');
                this.basketQty.textContent = this.totalQty;
            }
        }
    }, {
        key: '_like',
        value: function _like(e) {
            if (e.target.parentElement.classList.contains('product__details-button--heart')) {
                if (e.target.parentElement.classList.contains('product__details-button--heart-active')) {
                    e.target.parentElement.classList.remove('product__details-button--heart-active');
                    this.totalLikes--;
                    this.heartsQty.textContent = this.totalLikes;
                } else {
                    e.target.parentElement.classList.add('product__details-button--heart-active');
                    this.totalLikes++;
                    this.heartsQty.textContent = this.totalLikes;
                }
            };
        }
    }, {
        key: '_zoomBtn',
        value: function _zoomBtn(e) {
            if (e.target.parentElement.classList.contains('product__details-button--zoom')) {
                var imgSrc = e.target.parentElement.dataset.src;

                this.imgZoomWindow.setAttribute('src', imgSrc);
                this.imgZoomWindow.parentElement.classList.add('img-zoom-window--active');
            }

            this.imgZoomWindow.parentElement.addEventListener('click', function (e) {
                if (e.target) {
                    e.currentTarget.classList.remove('img-zoom-window--active');
                }
            });
        }
    }, {
        key: '_stars',
        value: function _stars(e) {
            if (e.target.parentElement.classList.contains('product__rating-button')) {
                var targetStar = e.target.parentElement;
                targetStar.classList.add('product__rating-button--active');

                if (targetStar.previousElementSibling && targetStar.previousElementSibling.classList.contains('product__rating-button--active')) {
                    this._removeClassForPreviousStars(targetStar, 'product__rating-button--active');
                };

                this._addClassForNextStars(targetStar, 'product__rating-button--active');
            }
        }
    }, {
        key: '_addClassForNextStars',
        value: function _addClassForNextStars(elem, activeClass) {
            while (elem = elem.nextElementSibling) {
                elem.classList.add(activeClass);
            };
        }
    }, {
        key: '_removeClassForPreviousStars',
        value: function _removeClassForPreviousStars(elem, activeClass) {
            do {
                elem = elem.previousElementSibling;
                elem.classList.remove(activeClass);
            } while (elem.previousElementSibling && elem.previousElementSibling.classList.contains(activeClass));
        }
    }]);

    return ProductItemsEvents;
}();

exports.default = ProductItemsEvents;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Search = function () {
   function Search() {
      _classCallCheck(this, Search);

      // DOM
      this.serchWrap = document.querySelector('.user-panel__item--search');
      this.searchBtn = document.querySelector('.user-panel__button--search');
      this.searchForm = document.querySelector('.user-panel__search-form');

      this.formActiveClass = 'user-panel__search-form--active';
      //  events
      this._events();
   }

   _createClass(Search, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         this.serchWrap.addEventListener('click', function (e) {

            if (e.target === _this.searchBtn || e.target.parentElement === _this.searchBtn) {
               _this.searchForm.classList.toggle(_this.formActiveClass);
            }
         });

         window.addEventListener('scroll', function (e) {
            if (_this.searchForm.classList.contains(_this.formActiveClass)) {
               if (e) {
                  _this.searchForm.classList.remove(_this.formActiveClass);
               }
            }
         });
      }
   }]);

   return Search;
}();

exports.default = Search;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zZWFyY2guanMiXSwibmFtZXMiOlsiU2VhcmNoIiwic2VyY2hXcmFwIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2VhcmNoQnRuIiwic2VhcmNoRm9ybSIsImZvcm1BY3RpdmVDbGFzcyIsIl9ldmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJ3aW5kb3ciLCJjb250YWlucyIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsTTtBQUNsQixxQkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQkMsU0FBU0MsYUFBVCxDQUF1QiwyQkFBdkIsQ0FBakI7QUFDQSxXQUFLQyxTQUFMLEdBQWlCRixTQUFTQyxhQUFULENBQXVCLDZCQUF2QixDQUFqQjtBQUNBLFdBQUtFLFVBQUwsR0FBa0JILFNBQVNDLGFBQVQsQ0FBdUIsMEJBQXZCLENBQWxCOztBQUVBLFdBQUtHLGVBQUwsR0FBdUIsaUNBQXZCO0FBQ0E7QUFDQSxXQUFLQyxPQUFMO0FBQ0Y7Ozs7Z0NBRVM7QUFBQTs7QUFDUCxjQUFLTixTQUFMLENBQWVPLGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDLGFBQUs7O0FBRTNDLGdCQUFJQyxFQUFFQyxNQUFGLEtBQWEsTUFBS04sU0FBbEIsSUFBK0JLLEVBQUVDLE1BQUYsQ0FBU0MsYUFBVCxLQUEyQixNQUFLUCxTQUFuRSxFQUE4RTtBQUMzRSxxQkFBS0MsVUFBTCxDQUFnQk8sU0FBaEIsQ0FBMEJDLE1BQTFCLENBQWlDLE1BQUtQLGVBQXRDO0FBQ0Y7QUFDSCxVQUxEOztBQU9BUSxnQkFBT04sZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsYUFBSztBQUNwQyxnQkFBSSxNQUFLSCxVQUFMLENBQWdCTyxTQUFoQixDQUEwQkcsUUFBMUIsQ0FBbUMsTUFBS1QsZUFBeEMsQ0FBSixFQUE4RDtBQUMzRCxtQkFBSUcsQ0FBSixFQUFPO0FBQ0osd0JBQUtKLFVBQUwsQ0FBZ0JPLFNBQWhCLENBQTBCSSxNQUExQixDQUFpQyxNQUFLVixlQUF0QztBQUNGO0FBQ0g7QUFDSCxVQU5EO0FBT0Y7Ozs7OztrQkEzQmlCTixNO0FBNEJwQiIsImZpbGUiOiJfc2VhcmNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoIHtcclxuICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIERPTVxyXG4gICAgICB0aGlzLnNlcmNoV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VyLXBhbmVsX19pdGVtLS1zZWFyY2gnKTtcclxuICAgICAgdGhpcy5zZWFyY2hCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYW5lbF9fYnV0dG9uLS1zZWFyY2gnKTtcclxuICAgICAgdGhpcy5zZWFyY2hGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXItcGFuZWxfX3NlYXJjaC1mb3JtJyk7XHJcblxyXG4gICAgICB0aGlzLmZvcm1BY3RpdmVDbGFzcyA9ICd1c2VyLXBhbmVsX19zZWFyY2gtZm9ybS0tYWN0aXZlJztcclxuICAgICAgLy8gIGV2ZW50c1xyXG4gICAgICB0aGlzLl9ldmVudHMoKTtcclxuICAgfTtcclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHRoaXMuc2VyY2hXcmFwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMuc2VhcmNoQnRuIHx8IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQgPT09IHRoaXMuc2VhcmNoQnRuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoRm9ybS5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuZm9ybUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHtcclxuICAgICAgICAgaWYgKHRoaXMuc2VhcmNoRm9ybS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5mb3JtQWN0aXZlQ2xhc3MpKSB7XHJcbiAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoRm9ybS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuZm9ybUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG59OyJdfQ==
},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Subscribe = function () {
   function Subscribe() {
      _classCallCheck(this, Subscribe);

      // DOM
      this.subscribeForm = document.querySelector('.subscribe__form');
      this.subscribeBtn = this.subscribeForm.querySelector('.subscribe__form-btn');

      //  Event
      this._event();
      this._btnTargetAnimation();
   }

   _createClass(Subscribe, [{
      key: '_event',
      value: function _event() {
         this.subscribeForm.addEventListener('submit', function (e) {
            event.preventDefault();

            var email = event.target.email.value;

            email = JSON.stringify(email);

            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'https://maxs-4ebe4.firebaseio.com/clients.json');
            xhr.send(email);

            setTimeout(function () {
               if (xhr.readyState == 4) {
                  console.log('Отправленно!');
               }
            }, 1000);

            event.target.email.value = '';
         });
      }
   }, {
      key: '_btnTargetAnimation',
      value: function _btnTargetAnimation() {
         var _this = this;

         this.subscribeBtn.addEventListener('click', function (e) {
            var posX = e.offsetX + 'px',
                posY = e.offsetY + 'px';

            var targetAnimation = document.createElement('div');
            targetAnimation.classList.add('button-bubble__form-btn-terget-animation');
            targetAnimation.style.left = posX;
            targetAnimation.style.top = posY;
            _this.subscribeBtn.appendChild(targetAnimation);

            setTimeout(function () {
               var delEl = _this.subscribeBtn.children[0];
               _this.subscribeBtn.removeChild(delEl);
            }, 400);
         });
      }
   }]);

   return Subscribe;
}();

exports.default = Subscribe;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdWJzY3JpYmUuanMiXSwibmFtZXMiOlsiU3Vic2NyaWJlIiwic3Vic2NyaWJlRm9ybSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN1YnNjcmliZUJ0biIsIl9ldmVudCIsIl9idG5UYXJnZXRBbmltYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImVtYWlsIiwidGFyZ2V0IiwidmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInNldFRpbWVvdXQiLCJyZWFkeVN0YXRlIiwiY29uc29sZSIsImxvZyIsInBvc1giLCJlIiwib2Zmc2V0WCIsInBvc1kiLCJvZmZzZXRZIiwidGFyZ2V0QW5pbWF0aW9uIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInN0eWxlIiwibGVmdCIsInRvcCIsImFwcGVuZENoaWxkIiwiZGVsRWwiLCJjaGlsZHJlbiIsInJlbW92ZUNoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCQSxTO0FBQ2xCLHdCQUFjO0FBQUE7O0FBQ1g7QUFDQSxXQUFLQyxhQUFMLEdBQXFCQyxTQUFTQyxhQUFULENBQXVCLGtCQUF2QixDQUFyQjtBQUNBLFdBQUtDLFlBQUwsR0FBb0IsS0FBS0gsYUFBTCxDQUFtQkUsYUFBbkIsQ0FBaUMsc0JBQWpDLENBQXBCOztBQUVBO0FBQ0EsV0FBS0UsTUFBTDtBQUNBLFdBQUtDLG1CQUFMO0FBQ0Y7Ozs7K0JBRVE7QUFDTixjQUFLTCxhQUFMLENBQW1CTSxnQkFBbkIsQ0FBb0MsUUFBcEMsRUFBOEMsYUFBSztBQUNoREMsa0JBQU1DLGNBQU47O0FBRUEsZ0JBQUlDLFFBQVFGLE1BQU1HLE1BQU4sQ0FBYUQsS0FBYixDQUFtQkUsS0FBL0I7O0FBRUFGLG9CQUFRRyxLQUFLQyxTQUFMLENBQWVKLEtBQWYsQ0FBUjs7QUFFQSxnQkFBSUssTUFBTSxJQUFJQyxjQUFKLEVBQVY7QUFDQUQsZ0JBQUlFLElBQUosQ0FBUyxNQUFULEVBQWlCLGdEQUFqQjtBQUNBRixnQkFBSUcsSUFBSixDQUFTUixLQUFUOztBQUVBUyx1QkFBVyxZQUFNO0FBQ2QsbUJBQUlKLElBQUlLLFVBQUosSUFBa0IsQ0FBdEIsRUFBeUI7QUFDdEJDLDBCQUFRQyxHQUFSLENBQVksY0FBWjtBQUNGO0FBQ0gsYUFKRCxFQUlHLElBSkg7O0FBTUFkLGtCQUFNRyxNQUFOLENBQWFELEtBQWIsQ0FBbUJFLEtBQW5CLEdBQTJCLEVBQTNCO0FBQ0YsVUFsQkQ7QUFtQkY7Ozs0Q0FFcUI7QUFBQTs7QUFDbkIsY0FBS1IsWUFBTCxDQUFrQkcsZ0JBQWxCLENBQW1DLE9BQW5DLEVBQTRDLGFBQUs7QUFDOUMsZ0JBQUlnQixPQUFPQyxFQUFFQyxPQUFGLEdBQVksSUFBdkI7QUFBQSxnQkFDSUMsT0FBT0YsRUFBRUcsT0FBRixHQUFZLElBRHZCOztBQUdBLGdCQUFJQyxrQkFBa0IxQixTQUFTMkIsYUFBVCxDQUF1QixLQUF2QixDQUF0QjtBQUNBRCw0QkFBZ0JFLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QiwwQ0FBOUI7QUFDQUgsNEJBQWdCSSxLQUFoQixDQUFzQkMsSUFBdEIsR0FBNkJWLElBQTdCO0FBQ0FLLDRCQUFnQkksS0FBaEIsQ0FBc0JFLEdBQXRCLEdBQTRCUixJQUE1QjtBQUNBLGtCQUFLdEIsWUFBTCxDQUFrQitCLFdBQWxCLENBQThCUCxlQUE5Qjs7QUFFQVQsdUJBQVcsWUFBTTtBQUNkLG1CQUFJaUIsUUFBUSxNQUFLaEMsWUFBTCxDQUFrQmlDLFFBQWxCLENBQTJCLENBQTNCLENBQVo7QUFDQSxxQkFBS2pDLFlBQUwsQ0FBa0JrQyxXQUFsQixDQUE4QkYsS0FBOUI7QUFDRixhQUhELEVBR0csR0FISDtBQUlGLFVBZEQ7QUFlRjs7Ozs7O2tCQWpEaUJwQyxTO0FBa0RwQiIsImZpbGUiOiJfc3Vic2NyaWJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3Vic2NyaWJlIHtcclxuICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIERPTVxyXG4gICAgICB0aGlzLnN1YnNjcmliZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaWJlX19mb3JtJyk7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlQnRuID0gdGhpcy5zdWJzY3JpYmVGb3JtLnF1ZXJ5U2VsZWN0b3IoJy5zdWJzY3JpYmVfX2Zvcm0tYnRuJyk7XHJcblxyXG4gICAgICAvLyAgRXZlbnRcclxuICAgICAgdGhpcy5fZXZlbnQoKTtcclxuICAgICAgdGhpcy5fYnRuVGFyZ2V0QW5pbWF0aW9uKCk7XHJcbiAgIH07XHJcblxyXG4gICBfZXZlbnQoKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBlID0+IHtcclxuICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGxldCBlbWFpbCA9IGV2ZW50LnRhcmdldC5lbWFpbC52YWx1ZTtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGVtYWlsID0gSlNPTi5zdHJpbmdpZnkoZW1haWwpO1xyXG5cclxuICAgICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICB4aHIub3BlbignUE9TVCcsICdodHRwczovL21heHMtNGViZTQuZmlyZWJhc2Vpby5jb20vY2xpZW50cy5qc29uJyk7XHJcbiAgICAgICAgIHhoci5zZW5kKGVtYWlsKTtcclxuXHJcbiAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCkge1xyXG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZygn0J7RgtC/0YDQsNCy0LvQtdC90L3QviEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGV2ZW50LnRhcmdldC5lbWFpbC52YWx1ZSA9ICcnO1xyXG4gICAgICB9KTtcclxuICAgfTtcclxuXHJcbiAgIF9idG5UYXJnZXRBbmltYXRpb24oKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgIGxldCBwb3NYID0gZS5vZmZzZXRYICsgJ3B4JyxcclxuICAgICAgICAgICAgIHBvc1kgPSBlLm9mZnNldFkgKyAncHgnO1xyXG5cclxuICAgICAgICAgbGV0IHRhcmdldEFuaW1hdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICB0YXJnZXRBbmltYXRpb24uY2xhc3NMaXN0LmFkZCgnYnV0dG9uLWJ1YmJsZV9fZm9ybS1idG4tdGVyZ2V0LWFuaW1hdGlvbicpO1xyXG4gICAgICAgICB0YXJnZXRBbmltYXRpb24uc3R5bGUubGVmdCA9IHBvc1g7XHJcbiAgICAgICAgIHRhcmdldEFuaW1hdGlvbi5zdHlsZS50b3AgPSBwb3NZO1xyXG4gICAgICAgICB0aGlzLnN1YnNjcmliZUJ0bi5hcHBlbmRDaGlsZCh0YXJnZXRBbmltYXRpb24pO1xyXG5cclxuICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBkZWxFbCA9IHRoaXMuc3Vic2NyaWJlQnRuLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZUJ0bi5yZW1vdmVDaGlsZChkZWxFbCk7XHJcbiAgICAgICAgIH0sIDQwMCk7XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG59OyJdfQ==
},{}],7:[function(require,module,exports){
'use strict';

var _addProductItems = require('./_add-product-items');

var _addProductItems2 = _interopRequireDefault(_addProductItems);

var _burgerMenu = require('./_burger-menu');

var _burgerMenu2 = _interopRequireDefault(_burgerMenu);

var _fixedHeader = require('./_fixed-header');

var _fixedHeader2 = _interopRequireDefault(_fixedHeader);

var _search = require('./_search');

var _search2 = _interopRequireDefault(_search);

var _productItemsEvents = require('./_product-items-events');

var _productItemsEvents2 = _interopRequireDefault(_productItemsEvents);

var _subscribe = require('./_subscribe');

var _subscribe2 = _interopRequireDefault(_subscribe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('DOMContentLoaded', init);

function init() {

    // Clone navigation
    function cloneNav() {
        var nav = document.querySelector('.header-nav__list').cloneNode(true);
        var cloneNavParrent = document.querySelector('.fixed-nav');

        cloneNavParrent.insertBefore(nav, cloneNavParrent[0]);
    };
    cloneNav();

    // Set margin top for top section
    function setMargin() {
        var header = document.querySelector('.header'),
            topSection = document.querySelector('.top-section');

        topSection.style.marginTop = header.offsetHeight + 'px';
    };
    setMargin();

    var addProductItems = new _addProductItems2.default();
    var burgerMenu = new _burgerMenu2.default();
    var fixedHeader = new _fixedHeader2.default();
    var search = new _search2.default();
    var productItemsEvents = new _productItemsEvents2.default();
    var subscribe = new _subscribe2.default();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfODYwMGM4YjQuanMiXSwibmFtZXMiOlsid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXQiLCJjbG9uZU5hdiIsIm5hdiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lTm9kZSIsImNsb25lTmF2UGFycmVudCIsImluc2VydEJlZm9yZSIsInNldE1hcmdpbiIsImhlYWRlciIsInRvcFNlY3Rpb24iLCJzdHlsZSIsIm1hcmdpblRvcCIsIm9mZnNldEhlaWdodCIsImFkZFByb2R1Y3RJdGVtcyIsImJ1cmdlck1lbnUiLCJmaXhlZEhlYWRlciIsInNlYXJjaCIsInByb2R1Y3RJdGVtc0V2ZW50cyIsInN1YnNjcmliZSJdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQVBBQSxPQUFPQyxnQkFBUCxDQUF3QixrQkFBeEIsRUFBNENDLElBQTVDOztBQVNBLFNBQVNBLElBQVQsR0FBZ0I7O0FBRVo7QUFDQSxhQUFTQyxRQUFULEdBQW9CO0FBQ2hCLFlBQUlDLE1BQU1DLFNBQVNDLGFBQVQsQ0FBdUIsbUJBQXZCLEVBQTRDQyxTQUE1QyxDQUFzRCxJQUF0RCxDQUFWO0FBQ0EsWUFBSUMsa0JBQWtCSCxTQUFTQyxhQUFULENBQXVCLFlBQXZCLENBQXRCOztBQUVBRSx3QkFBZ0JDLFlBQWhCLENBQTZCTCxHQUE3QixFQUFrQ0ksZ0JBQWdCLENBQWhCLENBQWxDO0FBQ0g7QUFDREw7O0FBRUE7QUFDQSxhQUFTTyxTQUFULEdBQXFCO0FBQ2pCLFlBQUlDLFNBQVNOLFNBQVNDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBYjtBQUFBLFlBQ0lNLGFBQWFQLFNBQVNDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FEakI7O0FBR0FNLG1CQUFXQyxLQUFYLENBQWlCQyxTQUFqQixHQUE2QkgsT0FBT0ksWUFBUCxHQUFzQixJQUFuRDtBQUNIO0FBQ0RMOztBQUVBLFFBQU1NLGtCQUFrQiwrQkFBeEI7QUFDQSxRQUFNQyxhQUFhLDBCQUFuQjtBQUNBLFFBQU1DLGNBQWMsMkJBQXBCO0FBQ0EsUUFBTUMsU0FBUyxzQkFBZjtBQUNBLFFBQU1DLHFCQUFxQixrQ0FBM0I7QUFDQSxRQUFNQyxZQUFZLHlCQUFsQjtBQUNIIiwiZmlsZSI6ImZha2VfODYwMGM4YjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXQpO1xyXG5cclxuaW1wb3J0IEFkZFByb2R1Y3RJdGVtcyBmcm9tICcuL19hZGQtcHJvZHVjdC1pdGVtcyc7XHJcbmltcG9ydCBCdXJnZXJNZW51IGZyb20gJy4vX2J1cmdlci1tZW51JztcclxuaW1wb3J0IEZpeGVkSGVhZGVyIGZyb20gJy4vX2ZpeGVkLWhlYWRlcic7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSAnLi9fc2VhcmNoJztcclxuaW1wb3J0IFByb2R1Y3RJdGVtc0V2ZW50cyBmcm9tICcuL19wcm9kdWN0LWl0ZW1zLWV2ZW50cyc7XHJcbmltcG9ydCBTdWJzY3JpYmUgZnJvbSAnLi9fc3Vic2NyaWJlJztcclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgIFxyXG4gICAgLy8gQ2xvbmUgbmF2aWdhdGlvblxyXG4gICAgZnVuY3Rpb24gY2xvbmVOYXYoKSB7XHJcbiAgICAgICAgbGV0IG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItbmF2X19saXN0JykuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgIGxldCBjbG9uZU5hdlBhcnJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZml4ZWQtbmF2Jyk7XHJcblxyXG4gICAgICAgIGNsb25lTmF2UGFycmVudC5pbnNlcnRCZWZvcmUobmF2LCBjbG9uZU5hdlBhcnJlbnRbMF0pO1xyXG4gICAgfTtcclxuICAgIGNsb25lTmF2KCk7XHJcblxyXG4gICAgLy8gU2V0IG1hcmdpbiB0b3AgZm9yIHRvcCBzZWN0aW9uXHJcbiAgICBmdW5jdGlvbiBzZXRNYXJnaW4oKSB7XHJcbiAgICAgICAgbGV0IGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKSxcclxuICAgICAgICAgICAgdG9wU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b3Atc2VjdGlvbicpO1xyXG5cclxuICAgICAgICB0b3BTZWN0aW9uLnN0eWxlLm1hcmdpblRvcCA9IGhlYWRlci5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgfTtcclxuICAgIHNldE1hcmdpbigpXHJcblxyXG4gICAgY29uc3QgYWRkUHJvZHVjdEl0ZW1zID0gbmV3IEFkZFByb2R1Y3RJdGVtcztcclxuICAgIGNvbnN0IGJ1cmdlck1lbnUgPSBuZXcgQnVyZ2VyTWVudTtcclxuICAgIGNvbnN0IGZpeGVkSGVhZGVyID0gbmV3IEZpeGVkSGVhZGVyO1xyXG4gICAgY29uc3Qgc2VhcmNoID0gbmV3IFNlYXJjaDtcclxuICAgIGNvbnN0IHByb2R1Y3RJdGVtc0V2ZW50cyA9IG5ldyBQcm9kdWN0SXRlbXNFdmVudHM7XHJcbiAgICBjb25zdCBzdWJzY3JpYmUgPSBuZXcgU3Vic2NyaWJlO1xyXG59OyJdfQ==
},{"./_add-product-items":1,"./_burger-menu":2,"./_fixed-header":3,"./_product-items-events":4,"./_search":5,"./_subscribe":6}]},{},[7])
//# sourceMappingURL=data:application/json;base64,
