(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AnimateNumber = function () {
    function AnimateNumber() {
        _classCallCheck(this, AnimateNumber);

        // DOM
        this.numbersWrap = document.querySelectorAll('.stats__number');
        this.stats = document.querySelector('.stats');

        this.complete = false;

        this._windowEvent();
    }

    _createClass(AnimateNumber, [{
        key: '_counter',
        value: function _counter(numberWrap) {
            if (this.complete === false) {
                var _loop = function _loop(i) {
                    var finiteNumber = parseInt(numberWrap[i].textContent),
                        startNumber = Math.round(finiteNumber / 3 * 2),
                        numbersDifference = finiteNumber - startNumber,
                        time = 2000 / numbersDifference;

                    var _loop2 = function _loop2(n) {
                        setTimeout(function () {

                            if (numberWrap[i].dataset.suffix) {
                                numberWrap[i].textContent = n + startNumber + ' ' + numberWrap[i].dataset.suffix;
                            } else {
                                numberWrap[i].textContent = n + startNumber;
                            }
                        }, time * n);
                    };

                    for (var n = 0; n <= numbersDifference; n++) {
                        _loop2(n);
                    };
                };

                for (var i = 0; i < numberWrap.length; i++) {
                    _loop(i);
                };
                this.complete = true;
            }
        }
    }, {
        key: '_windowEvent',
        value: function _windowEvent() {
            var _this = this;

            window.addEventListener('scroll', function () {
                if (_this.stats.getBoundingClientRect().top <= window.innerHeight) {
                    _this._counter(_this.numbersWrap);
                };
            });
        }
    }]);

    return AnimateNumber;
}();

exports.default = AnimateNumber;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9hbmltYXRlLW51bWJlci5qcyJdLCJuYW1lcyI6WyJBbmltYXRlTnVtYmVyIiwibnVtYmVyc1dyYXAiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzdGF0cyIsInF1ZXJ5U2VsZWN0b3IiLCJjb21wbGV0ZSIsIl93aW5kb3dFdmVudCIsIm51bWJlcldyYXAiLCJpIiwiZmluaXRlTnVtYmVyIiwicGFyc2VJbnQiLCJ0ZXh0Q29udGVudCIsInN0YXJ0TnVtYmVyIiwiTWF0aCIsInJvdW5kIiwibnVtYmVyc0RpZmZlcmVuY2UiLCJ0aW1lIiwibiIsInNldFRpbWVvdXQiLCJkYXRhc2V0Iiwic3VmZml4IiwibGVuZ3RoIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsImlubmVySGVpZ2h0IiwiX2NvdW50ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLGE7QUFDakIsNkJBQWM7QUFBQTs7QUFDVjtBQUNBLGFBQUtDLFdBQUwsR0FBbUJDLFNBQVNDLGdCQUFULENBQTBCLGdCQUExQixDQUFuQjtBQUNBLGFBQUtDLEtBQUwsR0FBYUYsU0FBU0csYUFBVCxDQUF1QixRQUF2QixDQUFiOztBQUVBLGFBQUtDLFFBQUwsR0FBZ0IsS0FBaEI7O0FBRUEsYUFBS0MsWUFBTDtBQUNIOzs7O2lDQUNRQyxVLEVBQVk7QUFDakIsZ0JBQUksS0FBS0YsUUFBTCxLQUFrQixLQUF0QixFQUE2QjtBQUFBLDJDQUNoQkcsQ0FEZ0I7QUFFckIsd0JBQUlDLGVBQWVDLFNBQVNILFdBQVdDLENBQVgsRUFBY0csV0FBdkIsQ0FBbkI7QUFBQSx3QkFDSUMsY0FBY0MsS0FBS0MsS0FBTCxDQUFZTCxlQUFlLENBQWhCLEdBQXFCLENBQWhDLENBRGxCO0FBQUEsd0JBRUlNLG9CQUFvQk4sZUFBZUcsV0FGdkM7QUFBQSx3QkFHSUksT0FBTyxPQUFPRCxpQkFIbEI7O0FBRnFCLGlEQU9aRSxDQVBZO0FBUWpCQyxtQ0FBVyxZQUFNOztBQUViLGdDQUFJWCxXQUFXQyxDQUFYLEVBQWNXLE9BQWQsQ0FBc0JDLE1BQTFCLEVBQWtDO0FBQzlCYiwyQ0FBV0MsQ0FBWCxFQUFjRyxXQUFkLEdBQTRCTSxJQUFJTCxXQUFKLEdBQWtCLEdBQWxCLEdBQXdCTCxXQUFXQyxDQUFYLEVBQWNXLE9BQWQsQ0FBc0JDLE1BQTFFO0FBQ0gsNkJBRkQsTUFFTztBQUNIYiwyQ0FBV0MsQ0FBWCxFQUFjRyxXQUFkLEdBQTRCTSxJQUFJTCxXQUFoQztBQUNIO0FBQ0oseUJBUEQsRUFPR0ksT0FBT0MsQ0FQVjtBQVJpQjs7QUFPckIseUJBQUssSUFBSUEsSUFBSSxDQUFiLEVBQWdCQSxLQUFLRixpQkFBckIsRUFBd0NFLEdBQXhDLEVBQTZDO0FBQUEsK0JBQXBDQSxDQUFvQztBQVM1QztBQWhCb0I7O0FBQ3pCLHFCQUFLLElBQUlULElBQUksQ0FBYixFQUFnQkEsSUFBSUQsV0FBV2MsTUFBL0IsRUFBdUNiLEdBQXZDLEVBQTRDO0FBQUEsMEJBQW5DQSxDQUFtQztBQWdCM0M7QUFDRCxxQkFBS0gsUUFBTCxHQUFnQixJQUFoQjtBQUNIO0FBQ0o7Ozt1Q0FFYztBQUFBOztBQUNYaUIsbUJBQU9DLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFlBQU07QUFDcEMsb0JBQUksTUFBS3BCLEtBQUwsQ0FBV3FCLHFCQUFYLEdBQW1DQyxHQUFuQyxJQUEwQ0gsT0FBT0ksV0FBckQsRUFBa0U7QUFDOUQsMEJBQUtDLFFBQUwsQ0FBYyxNQUFLM0IsV0FBbkI7QUFDSDtBQUNKLGFBSkQ7QUFLSDs7Ozs7O2tCQXZDZ0JELGE7QUF3Q3BCIiwiZmlsZSI6Il9hbmltYXRlLW51bWJlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGVOdW1iZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8gRE9NXHJcbiAgICAgICAgdGhpcy5udW1iZXJzV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdGF0c19fbnVtYmVyJyk7XHJcbiAgICAgICAgdGhpcy5zdGF0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGF0cycpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fd2luZG93RXZlbnQoKTtcclxuICAgIH07XHJcbiAgICBfY291bnRlcihudW1iZXJXcmFwKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcGxldGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyV3JhcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbml0ZU51bWJlciA9IHBhcnNlSW50KG51bWJlcldyYXBbaV0udGV4dENvbnRlbnQpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TnVtYmVyID0gTWF0aC5yb3VuZCgoZmluaXRlTnVtYmVyIC8gMykgKiAyKSxcclxuICAgICAgICAgICAgICAgICAgICBudW1iZXJzRGlmZmVyZW5jZSA9IGZpbml0ZU51bWJlciAtIHN0YXJ0TnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWUgPSAyMDAwIC8gbnVtYmVyc0RpZmZlcmVuY2U7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDw9IG51bWJlcnNEaWZmZXJlbmNlOyBuKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlcldyYXBbaV0uZGF0YXNldC5zdWZmaXgpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJXcmFwW2ldLnRleHRDb250ZW50ID0gbiArIHN0YXJ0TnVtYmVyICsgJyAnICsgbnVtYmVyV3JhcFtpXS5kYXRhc2V0LnN1ZmZpeDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlcldyYXBbaV0udGV4dENvbnRlbnQgPSBuICsgc3RhcnROdW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCB0aW1lICogbik7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIF93aW5kb3dFdmVudCgpIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0cy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPD0gd2luZG93LmlubmVySGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb3VudGVyKHRoaXMubnVtYmVyc1dyYXApO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufTsiXX0=
},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BurgerMenu = function () {
   function BurgerMenu() {
      _classCallCheck(this, BurgerMenu);

      // DOM
      this.btn = document.querySelector('.burger-btn');
      this.navList = document.querySelector('.nav');
      this.header = document.querySelector('.header');
      this.maincontent = document.querySelector('.maincontent');
      this.footer = document.querySelector('.footer');

      //  events
      this._events();
   }

   _createClass(BurgerMenu, [{
      key: '_events',
      value: function _events() {
         var _this = this;

         this.btn.addEventListener('click', function () {
            _this.navList.classList.add('nav--active');
            document.body.classList.add('overflow-hidden');
         });

         this.navList.addEventListener('click', function (e) {
            if (e.target) {
               _this.navList.classList.remove('nav--active');
               document.body.classList.remove('overflow-hidden');
            }
         });
      }
   }]);

   return BurgerMenu;
}();

exports.default = BurgerMenu;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9idXJnZXItbWVudS5qcyJdLCJuYW1lcyI6WyJCdXJnZXJNZW51IiwiYnRuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmF2TGlzdCIsImhlYWRlciIsIm1haW5jb250ZW50IiwiZm9vdGVyIiwiX2V2ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJib2R5IiwiZSIsInRhcmdldCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsVTtBQUNsQix5QkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsR0FBTCxHQUFXQyxTQUFTQyxhQUFULENBQXVCLGFBQXZCLENBQVg7QUFDQSxXQUFLQyxPQUFMLEdBQWVGLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBZjtBQUNBLFdBQUtFLE1BQUwsR0FBY0gsU0FBU0MsYUFBVCxDQUF1QixTQUF2QixDQUFkO0FBQ0EsV0FBS0csV0FBTCxHQUFtQkosU0FBU0MsYUFBVCxDQUF1QixjQUF2QixDQUFuQjtBQUNBLFdBQUtJLE1BQUwsR0FBY0wsU0FBU0MsYUFBVCxDQUF1QixTQUF2QixDQUFkOztBQUVBO0FBQ0EsV0FBS0ssT0FBTDtBQUNGOzs7O2dDQUVTO0FBQUE7O0FBQ1AsY0FBS1AsR0FBTCxDQUFTUSxnQkFBVCxDQUEwQixPQUExQixFQUFtQyxZQUFNO0FBQ3RDLGtCQUFLTCxPQUFMLENBQWFNLFNBQWIsQ0FBdUJDLEdBQXZCLENBQTJCLGFBQTNCO0FBQ0FULHFCQUFTVSxJQUFULENBQWNGLFNBQWQsQ0FBd0JDLEdBQXhCLENBQTRCLGlCQUE1QjtBQUNGLFVBSEQ7O0FBS0EsY0FBS1AsT0FBTCxDQUFhSyxnQkFBYixDQUE4QixPQUE5QixFQUF1QyxhQUFLO0FBQ3pDLGdCQUFJSSxFQUFFQyxNQUFOLEVBQWM7QUFDWCxxQkFBS1YsT0FBTCxDQUFhTSxTQUFiLENBQXVCSyxNQUF2QixDQUE4QixhQUE5QjtBQUNBYix3QkFBU1UsSUFBVCxDQUFjRixTQUFkLENBQXdCSyxNQUF4QixDQUErQixpQkFBL0I7QUFDRjtBQUNILFVBTEQ7QUFNRjs7Ozs7O2tCQXpCaUJmLFU7QUEwQnBCIiwiZmlsZSI6Il9idXJnZXItbWVudS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1cmdlck1lbnUge1xyXG4gICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgLy8gRE9NXHJcbiAgICAgIHRoaXMuYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1cmdlci1idG4nKTtcclxuICAgICAgdGhpcy5uYXZMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdicpO1xyXG4gICAgICB0aGlzLmhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcclxuICAgICAgdGhpcy5tYWluY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluY29udGVudCcpO1xyXG4gICAgICB0aGlzLmZvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb290ZXInKTtcclxuXHJcbiAgICAgIC8vICBldmVudHNcclxuICAgICAgdGhpcy5fZXZlbnRzKCk7XHJcbiAgIH1cclxuXHJcbiAgIF9ldmVudHMoKSB7XHJcbiAgICAgIHRoaXMuYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICB0aGlzLm5hdkxpc3QuY2xhc3NMaXN0LmFkZCgnbmF2LS1hY3RpdmUnKTtcclxuICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdvdmVyZmxvdy1oaWRkZW4nKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLm5hdkxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgaWYgKGUudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMubmF2TGlzdC5jbGFzc0xpc3QucmVtb3ZlKCduYXYtLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ292ZXJmbG93LWhpZGRlbicpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9XHJcbn07Il19
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CaseStudySlider = function () {
   function CaseStudySlider() {
      _classCallCheck(this, CaseStudySlider);

      // DOM
      this.itemsWrap = document.querySelector('.case-study__list');
      this.items = this.itemsWrap.querySelectorAll('.case-study__item');
      this.controlsWrap = document.querySelector('.case-study__btns-wrap');

      this.currentSlide = 0;

      this._addControls();
      this._controlsEvents();
   }

   _createClass(CaseStudySlider, [{
      key: '_addControls',
      value: function _addControls() {
         var itemsQty = this.items.length;

         if (itemsQty > 1) {
            for (var i = 0; i < itemsQty; i++) {
               var control = document.createElement('button');
               control.classList.add('case-study__btn');

               if (i === 0) {
                  control.classList.add('case-study__btn--active');
               }
               control.dataset.id = i;
               this.controlsWrap.appendChild(control);
            }
         }
      }
   }, {
      key: '_controlsEvents',
      value: function _controlsEvents() {
         var _this = this;

         var controlActiveClass = 'case-study__btn--active';

         this.controlsWrap.addEventListener('click', function (e) {
            if (e.target.dataset.id) {

               if (e.target.dataset.id === _this.currentSlide) {
                  return;
               }

               _this.controlsWrap.children[_this.currentSlide].classList.remove(controlActiveClass);
               e.target.classList.add(controlActiveClass);

               _this._activeItemChanger(e.target.dataset.id);
            }
         });
      }
   }, {
      key: '_activeItemChanger',
      value: function _activeItemChanger(id) {
         var itemActiveClass = 'case-study__item--active';

         this.items[this.currentSlide].classList.remove(itemActiveClass);

         this.items[id].classList.add(itemActiveClass);

         this.currentSlide = id;
      }
   }]);

   return CaseStudySlider;
}();

exports.default = CaseStudySlider;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jYXNlLXN0dWR5LXNsaWRlci5qcyJdLCJuYW1lcyI6WyJDYXNlU3R1ZHlTbGlkZXIiLCJpdGVtc1dyYXAiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpdGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb250cm9sc1dyYXAiLCJjdXJyZW50U2xpZGUiLCJfYWRkQ29udHJvbHMiLCJfY29udHJvbHNFdmVudHMiLCJpdGVtc1F0eSIsImxlbmd0aCIsImkiLCJjb250cm9sIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImRhdGFzZXQiLCJpZCIsImFwcGVuZENoaWxkIiwiY29udHJvbEFjdGl2ZUNsYXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJjaGlsZHJlbiIsInJlbW92ZSIsIl9hY3RpdmVJdGVtQ2hhbmdlciIsIml0ZW1BY3RpdmVDbGFzcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsZTtBQUNsQiw4QkFBYztBQUFBOztBQUNYO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQkMsU0FBU0MsYUFBVCxDQUF1QixtQkFBdkIsQ0FBakI7QUFDQSxXQUFLQyxLQUFMLEdBQWEsS0FBS0gsU0FBTCxDQUFlSSxnQkFBZixDQUFnQyxtQkFBaEMsQ0FBYjtBQUNBLFdBQUtDLFlBQUwsR0FBb0JKLFNBQVNDLGFBQVQsQ0FBdUIsd0JBQXZCLENBQXBCOztBQUVBLFdBQUtJLFlBQUwsR0FBb0IsQ0FBcEI7O0FBRUEsV0FBS0MsWUFBTDtBQUNBLFdBQUtDLGVBQUw7QUFDRjs7OztxQ0FFYztBQUNaLGFBQUlDLFdBQVcsS0FBS04sS0FBTCxDQUFXTyxNQUExQjs7QUFFQSxhQUFJRCxXQUFXLENBQWYsRUFBa0I7QUFDZixpQkFBSyxJQUFJRSxJQUFJLENBQWIsRUFBZ0JBLElBQUlGLFFBQXBCLEVBQThCRSxHQUE5QixFQUFtQztBQUNoQyxtQkFBSUMsVUFBVVgsU0FBU1ksYUFBVCxDQUF1QixRQUF2QixDQUFkO0FBQ0FELHVCQUFRRSxTQUFSLENBQWtCQyxHQUFsQixDQUFzQixpQkFBdEI7O0FBRUEsbUJBQUlKLE1BQU0sQ0FBVixFQUFhO0FBQ1ZDLDBCQUFRRSxTQUFSLENBQWtCQyxHQUFsQixDQUFzQix5QkFBdEI7QUFDRjtBQUNESCx1QkFBUUksT0FBUixDQUFnQkMsRUFBaEIsR0FBcUJOLENBQXJCO0FBQ0Esb0JBQUtOLFlBQUwsQ0FBa0JhLFdBQWxCLENBQThCTixPQUE5QjtBQUNGO0FBQ0g7QUFDSDs7O3dDQUVpQjtBQUFBOztBQUVmLGFBQUlPLHFCQUFxQix5QkFBekI7O0FBRUEsY0FBS2QsWUFBTCxDQUFrQmUsZ0JBQWxCLENBQW1DLE9BQW5DLEVBQTRDLGFBQUs7QUFDOUMsZ0JBQUlDLEVBQUVDLE1BQUYsQ0FBU04sT0FBVCxDQUFpQkMsRUFBckIsRUFBeUI7O0FBRXRCLG1CQUFJSSxFQUFFQyxNQUFGLENBQVNOLE9BQVQsQ0FBaUJDLEVBQWpCLEtBQXdCLE1BQUtYLFlBQWpDLEVBQStDO0FBQzVDO0FBQ0Y7O0FBRUQscUJBQUtELFlBQUwsQ0FBa0JrQixRQUFsQixDQUEyQixNQUFLakIsWUFBaEMsRUFBOENRLFNBQTlDLENBQXdEVSxNQUF4RCxDQUErREwsa0JBQS9EO0FBQ0FFLGlCQUFFQyxNQUFGLENBQVNSLFNBQVQsQ0FBbUJDLEdBQW5CLENBQXVCSSxrQkFBdkI7O0FBRUEscUJBQUtNLGtCQUFMLENBQXdCSixFQUFFQyxNQUFGLENBQVNOLE9BQVQsQ0FBaUJDLEVBQXpDO0FBQ0Y7QUFDSCxVQVpEO0FBYUY7Ozt5Q0FFa0JBLEUsRUFBSTtBQUNwQixhQUFJUyxrQkFBa0IsMEJBQXRCOztBQUVBLGNBQUt2QixLQUFMLENBQVcsS0FBS0csWUFBaEIsRUFBOEJRLFNBQTlCLENBQXdDVSxNQUF4QyxDQUErQ0UsZUFBL0M7O0FBRUEsY0FBS3ZCLEtBQUwsQ0FBV2MsRUFBWCxFQUFlSCxTQUFmLENBQXlCQyxHQUF6QixDQUE2QlcsZUFBN0I7O0FBRUEsY0FBS3BCLFlBQUwsR0FBb0JXLEVBQXBCO0FBQ0Y7Ozs7OztrQkF6RGlCbEIsZTtBQTBEcEIiLCJmaWxlIjoiX2Nhc2Utc3R1ZHktc2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FzZVN0dWR5U2xpZGVyIHtcclxuICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIERPTVxyXG4gICAgICB0aGlzLml0ZW1zV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXNlLXN0dWR5X19saXN0Jyk7XHJcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zV3JhcC5xdWVyeVNlbGVjdG9yQWxsKCcuY2FzZS1zdHVkeV9faXRlbScpO1xyXG4gICAgICB0aGlzLmNvbnRyb2xzV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXNlLXN0dWR5X19idG5zLXdyYXAnKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMuY3VycmVudFNsaWRlID0gMDtcclxuXHJcbiAgICAgIHRoaXMuX2FkZENvbnRyb2xzKCk7XHJcbiAgICAgIHRoaXMuX2NvbnRyb2xzRXZlbnRzKCk7XHJcbiAgIH07XHJcblxyXG4gICBfYWRkQ29udHJvbHMoKSB7XHJcbiAgICAgIGxldCBpdGVtc1F0eSA9IHRoaXMuaXRlbXMubGVuZ3RoO1xyXG5cclxuICAgICAgaWYgKGl0ZW1zUXR5ID4gMSkge1xyXG4gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zUXR5OyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgY29udHJvbC5jbGFzc0xpc3QuYWRkKCdjYXNlLXN0dWR5X19idG4nKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgIGNvbnRyb2wuY2xhc3NMaXN0LmFkZCgnY2FzZS1zdHVkeV9fYnRuLS1hY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250cm9sLmRhdGFzZXQuaWQgPSBpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzV3JhcC5hcHBlbmRDaGlsZChjb250cm9sKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH07XHJcblxyXG4gICBfY29udHJvbHNFdmVudHMoKSB7XHJcblxyXG4gICAgICBsZXQgY29udHJvbEFjdGl2ZUNsYXNzID0gJ2Nhc2Utc3R1ZHlfX2J0bi0tYWN0aXZlJztcclxuXHJcbiAgICAgIHRoaXMuY29udHJvbHNXcmFwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgIGlmIChlLnRhcmdldC5kYXRhc2V0LmlkKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuZGF0YXNldC5pZCA9PT0gdGhpcy5jdXJyZW50U2xpZGUpIHtcclxuICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzV3JhcC5jaGlsZHJlblt0aGlzLmN1cnJlbnRTbGlkZV0uY2xhc3NMaXN0LnJlbW92ZShjb250cm9sQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKGNvbnRyb2xBY3RpdmVDbGFzcylcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUl0ZW1DaGFuZ2VyKGUudGFyZ2V0LmRhdGFzZXQuaWQpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG5cclxuICAgX2FjdGl2ZUl0ZW1DaGFuZ2VyKGlkKSB7XHJcbiAgICAgIGxldCBpdGVtQWN0aXZlQ2xhc3MgPSAnY2FzZS1zdHVkeV9faXRlbS0tYWN0aXZlJztcclxuXHJcbiAgICAgIHRoaXMuaXRlbXNbdGhpcy5jdXJyZW50U2xpZGVdLmNsYXNzTGlzdC5yZW1vdmUoaXRlbUFjdGl2ZUNsYXNzKTtcclxuXHJcbiAgICAgIHRoaXMuaXRlbXNbaWRdLmNsYXNzTGlzdC5hZGQoaXRlbUFjdGl2ZUNsYXNzKTtcclxuXHJcbiAgICAgIHRoaXMuY3VycmVudFNsaWRlID0gaWQ7XHJcbiAgIH07XHJcbn07Il19
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FixedHeader = function () {
   function FixedHeader() {
      _classCallCheck(this, FixedHeader);

      // DOM
      this.header = document.querySelector('.header');
      this.topSection = document.querySelector('.top-section');
      this.sections = document.querySelectorAll('section');
      this.sectionsWithAnkers = [];
      this.navButtons = this.header.querySelectorAll('.nav__btn');

      // Additional Vars
      this.activeHeaderOffset = this.topSection.offsetHeight - (this.header.offsetHeight + 20);

      //  events
      this._findAnkers();
      this._scrollEvent();
   }

   _createClass(FixedHeader, [{
      key: '_scrollEvent',
      value: function _scrollEvent() {
         var _this = this;

         window.addEventListener('scroll', function (e) {
            _this._fixHeader(e);
            _this._currentSection(e);
         });
      }
   }, {
      key: '_fixHeader',
      value: function _fixHeader(e) {
         if (window.pageYOffset > this.activeHeaderOffset) {
            this.header.style.transform = 'translateY(0)';
            this.header.classList.add('header--fixed');
         } else if (window.pageYOffset > this.activeHeaderOffset / 3 * 2) {
            this.header.style.transform = 'translateY(-100%)';
         } else {
            this.header.classList.remove('header--fixed');
            this.header.style.transform = 'translateY(0)';
         }
      }
   }, {
      key: '_currentSection',
      value: function _currentSection(e) {
         var _this2 = this;

         var navBtnActiveClass = 'nav__btn--active';

         this.sectionsWithAnkers.forEach(function (section) {
            if (section.getBoundingClientRect().top - 1 <= _this2.header.offsetHeight && section.getBoundingClientRect().top + section.offsetHeight > _this2.header.offsetHeight) {

               _this2.navButtons.forEach(function (navBtn) {

                  if (navBtn.dataset.anker === section.getAttribute('id')) {
                     if (!navBtn.classList.contains(navBtnActiveClass)) {

                        _this2.navButtons.forEach(function (navBtn) {
                           navBtn.classList.remove(navBtnActiveClass);
                        });

                        navBtn.classList.add(navBtnActiveClass);
                     }
                  }
               });
            }
         });
      }
   }, {
      key: '_findAnkers',
      value: function _findAnkers() {
         var _this3 = this;

         this.sections.forEach(function (section) {
            if (section.hasAttribute('id')) {
               _this3.sectionsWithAnkers.push(section);
            }
         });
      }
   }]);

   return FixedHeader;
}();

exports.default = FixedHeader;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9maXhlZC1oZWFkZXIuanMiXSwibmFtZXMiOlsiRml4ZWRIZWFkZXIiLCJoZWFkZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0b3BTZWN0aW9uIiwic2VjdGlvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2VjdGlvbnNXaXRoQW5rZXJzIiwibmF2QnV0dG9ucyIsImFjdGl2ZUhlYWRlck9mZnNldCIsIm9mZnNldEhlaWdodCIsIl9maW5kQW5rZXJzIiwiX3Njcm9sbEV2ZW50Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9maXhIZWFkZXIiLCJlIiwiX2N1cnJlbnRTZWN0aW9uIiwicGFnZVlPZmZzZXQiLCJzdHlsZSIsInRyYW5zZm9ybSIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsIm5hdkJ0bkFjdGl2ZUNsYXNzIiwiZm9yRWFjaCIsInNlY3Rpb24iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJuYXZCdG4iLCJkYXRhc2V0IiwiYW5rZXIiLCJnZXRBdHRyaWJ1dGUiLCJjb250YWlucyIsImhhc0F0dHJpYnV0ZSIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFc7QUFDbEIsMEJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLE1BQUwsR0FBY0MsU0FBU0MsYUFBVCxDQUF1QixTQUF2QixDQUFkO0FBQ0EsV0FBS0MsVUFBTCxHQUFrQkYsU0FBU0MsYUFBVCxDQUF1QixjQUF2QixDQUFsQjtBQUNBLFdBQUtFLFFBQUwsR0FBZ0JILFNBQVNJLGdCQUFULENBQTBCLFNBQTFCLENBQWhCO0FBQ0EsV0FBS0Msa0JBQUwsR0FBMEIsRUFBMUI7QUFDQSxXQUFLQyxVQUFMLEdBQWtCLEtBQUtQLE1BQUwsQ0FBWUssZ0JBQVosQ0FBNkIsV0FBN0IsQ0FBbEI7O0FBRUE7QUFDQSxXQUFLRyxrQkFBTCxHQUEwQixLQUFLTCxVQUFMLENBQWdCTSxZQUFoQixJQUFnQyxLQUFLVCxNQUFMLENBQVlTLFlBQVosR0FBMkIsRUFBM0QsQ0FBMUI7O0FBRUE7QUFDQSxXQUFLQyxXQUFMO0FBQ0EsV0FBS0MsWUFBTDtBQUNGOzs7O3FDQUNjO0FBQUE7O0FBQ1pDLGdCQUFPQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxhQUFLO0FBQ3BDLGtCQUFLQyxVQUFMLENBQWdCQyxDQUFoQjtBQUNBLGtCQUFLQyxlQUFMLENBQXFCRCxDQUFyQjtBQUNGLFVBSEQ7QUFJRjs7O2lDQUVVQSxDLEVBQUc7QUFDWCxhQUFJSCxPQUFPSyxXQUFQLEdBQXFCLEtBQUtULGtCQUE5QixFQUFrRDtBQUMvQyxpQkFBS1IsTUFBTCxDQUFZa0IsS0FBWixDQUFrQkMsU0FBbEIsR0FBOEIsZUFBOUI7QUFDQSxpQkFBS25CLE1BQUwsQ0FBWW9CLFNBQVosQ0FBc0JDLEdBQXRCLENBQTBCLGVBQTFCO0FBQ0YsVUFIRCxNQUdPLElBQUlULE9BQU9LLFdBQVAsR0FBc0IsS0FBS1Qsa0JBQUwsR0FBMEIsQ0FBM0IsR0FBZ0MsQ0FBekQsRUFBNEQ7QUFDaEUsaUJBQUtSLE1BQUwsQ0FBWWtCLEtBQVosQ0FBa0JDLFNBQWxCLEdBQThCLG1CQUE5QjtBQUNGLFVBRk0sTUFFQTtBQUNKLGlCQUFLbkIsTUFBTCxDQUFZb0IsU0FBWixDQUFzQkUsTUFBdEIsQ0FBNkIsZUFBN0I7QUFDQSxpQkFBS3RCLE1BQUwsQ0FBWWtCLEtBQVosQ0FBa0JDLFNBQWxCLEdBQThCLGVBQTlCO0FBQ0Y7QUFDSDs7O3NDQUVlSixDLEVBQUc7QUFBQTs7QUFDaEIsYUFBSVEsb0JBQW9CLGtCQUF4Qjs7QUFFQSxjQUFLakIsa0JBQUwsQ0FBd0JrQixPQUF4QixDQUFnQyxtQkFBVztBQUN4QyxnQkFBSUMsUUFBUUMscUJBQVIsR0FBZ0NDLEdBQWhDLEdBQXNDLENBQXRDLElBQTJDLE9BQUszQixNQUFMLENBQVlTLFlBQXZELElBQ0VnQixRQUFRQyxxQkFBUixHQUFnQ0MsR0FBaEMsR0FBc0NGLFFBQVFoQixZQUE5QyxHQUE2RCxPQUFLVCxNQUFMLENBQVlTLFlBRC9FLEVBQzZGOztBQUUxRixzQkFBS0YsVUFBTCxDQUFnQmlCLE9BQWhCLENBQXdCLGtCQUFVOztBQUUvQixzQkFBSUksT0FBT0MsT0FBUCxDQUFlQyxLQUFmLEtBQXlCTCxRQUFRTSxZQUFSLENBQXFCLElBQXJCLENBQTdCLEVBQXlEO0FBQ3RELHlCQUFJLENBQUNILE9BQU9SLFNBQVAsQ0FBaUJZLFFBQWpCLENBQTBCVCxpQkFBMUIsQ0FBTCxFQUFtRDs7QUFFaEQsK0JBQUtoQixVQUFMLENBQWdCaUIsT0FBaEIsQ0FBd0Isa0JBQVU7QUFDL0JJLGtDQUFPUixTQUFQLENBQWlCRSxNQUFqQixDQUF3QkMsaUJBQXhCO0FBQ0YseUJBRkQ7O0FBSUFLLCtCQUFPUixTQUFQLENBQWlCQyxHQUFqQixDQUFxQkUsaUJBQXJCO0FBQ0Y7QUFDSDtBQUNILGdCQVpEO0FBYUY7QUFDSCxVQWxCRDtBQW1CRjs7O29DQUVhO0FBQUE7O0FBQ1gsY0FBS25CLFFBQUwsQ0FBY29CLE9BQWQsQ0FBc0IsbUJBQVc7QUFDOUIsZ0JBQUlDLFFBQVFRLFlBQVIsQ0FBcUIsSUFBckIsQ0FBSixFQUFnQztBQUM3QixzQkFBSzNCLGtCQUFMLENBQXdCNEIsSUFBeEIsQ0FBNkJULE9BQTdCO0FBQ0Y7QUFDSCxVQUpEO0FBS0Y7Ozs7OztrQkFqRWlCMUIsVztBQWtFcEIiLCJmaWxlIjoiX2ZpeGVkLWhlYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpeGVkSGVhZGVyIHtcclxuICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIERPTVxyXG4gICAgICB0aGlzLmhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcclxuICAgICAgdGhpcy50b3BTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvcC1zZWN0aW9uJyk7XHJcbiAgICAgIHRoaXMuc2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzZWN0aW9uJyk7XHJcbiAgICAgIHRoaXMuc2VjdGlvbnNXaXRoQW5rZXJzID0gW107XHJcbiAgICAgIHRoaXMubmF2QnV0dG9ucyA9IHRoaXMuaGVhZGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXZfX2J0bicpO1xyXG5cclxuICAgICAgLy8gQWRkaXRpb25hbCBWYXJzXHJcbiAgICAgIHRoaXMuYWN0aXZlSGVhZGVyT2Zmc2V0ID0gdGhpcy50b3BTZWN0aW9uLm9mZnNldEhlaWdodCAtICh0aGlzLmhlYWRlci5vZmZzZXRIZWlnaHQgKyAyMCk7XHJcblxyXG4gICAgICAvLyAgZXZlbnRzXHJcbiAgICAgIHRoaXMuX2ZpbmRBbmtlcnMoKTtcclxuICAgICAgdGhpcy5fc2Nyb2xsRXZlbnQoKTtcclxuICAgfVxyXG4gICBfc2Nyb2xsRXZlbnQoKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHtcclxuICAgICAgICAgdGhpcy5fZml4SGVhZGVyKGUpO1xyXG4gICAgICAgICB0aGlzLl9jdXJyZW50U2VjdGlvbihlKTtcclxuICAgICAgfSk7XHJcbiAgIH07XHJcblxyXG4gICBfZml4SGVhZGVyKGUpIHtcclxuICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMuYWN0aXZlSGVhZGVyT2Zmc2V0KSB7XHJcbiAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcclxuICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLS1maXhlZCcpO1xyXG4gICAgICB9IGVsc2UgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+ICh0aGlzLmFjdGl2ZUhlYWRlck9mZnNldCAvIDMpICogMikge1xyXG4gICAgICAgICB0aGlzLmhlYWRlci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgtMTAwJSknO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICB0aGlzLmhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXItLWZpeGVkJyk7XHJcbiAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcclxuICAgICAgfVxyXG4gICB9O1xyXG5cclxuICAgX2N1cnJlbnRTZWN0aW9uKGUpIHtcclxuICAgICAgbGV0IG5hdkJ0bkFjdGl2ZUNsYXNzID0gJ25hdl9fYnRuLS1hY3RpdmUnO1xyXG5cclxuICAgICAgdGhpcy5zZWN0aW9uc1dpdGhBbmtlcnMuZm9yRWFjaChzZWN0aW9uID0+IHtcclxuICAgICAgICAgaWYgKHNlY3Rpb24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gMSA8PSB0aGlzLmhlYWRlci5vZmZzZXRIZWlnaHRcclxuICAgICAgICAgICAgJiYgc2VjdGlvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBzZWN0aW9uLm9mZnNldEhlaWdodCA+IHRoaXMuaGVhZGVyLm9mZnNldEhlaWdodCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uYXZCdXR0b25zLmZvckVhY2gobmF2QnRuID0+IHtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgIGlmIChuYXZCdG4uZGF0YXNldC5hbmtlciA9PT0gc2VjdGlvbi5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKCFuYXZCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKG5hdkJ0bkFjdGl2ZUNsYXNzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZCdXR0b25zLmZvckVhY2gobmF2QnRuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2QnRuLmNsYXNzTGlzdC5yZW1vdmUobmF2QnRuQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgIG5hdkJ0bi5jbGFzc0xpc3QuYWRkKG5hdkJ0bkFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG5cclxuICAgX2ZpbmRBbmtlcnMoKSB7XHJcbiAgICAgIHRoaXMuc2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IHtcclxuICAgICAgICAgaWYgKHNlY3Rpb24uaGFzQXR0cmlidXRlKCdpZCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvbnNXaXRoQW5rZXJzLnB1c2goc2VjdGlvbik7XHJcbiAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgIH07XHJcbn07Il19
},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Form = function () {
   function Form() {
      _classCallCheck(this, Form);

      // DOM
      this.form = document.querySelector('.contacts__form');
      this.input = this.form.querySelectorAll('.contacts__form-input');

      this.preloaderIcon = this.form.querySelector('.contacts__form-btn--preloader');
      this.sentIcon = this.form.querySelector('.contacts__form-btn--sent');

      this._inputFocusClass(this.input);
      this._submitForm(this.form);
   }

   _createClass(Form, [{
      key: '_inputFocusClass',
      value: function _inputFocusClass(input) {
         input.forEach(function (btn) {
            btn.addEventListener('keyup', function () {
               if (btn.value) {
                  btn.nextElementSibling.classList.add('contacts__form-label--active');
               } else {
                  btn.nextElementSibling.classList.remove('contacts__form-label--active');
               }
            });
         });
      }
   }, {
      key: '_submitForm',
      value: function _submitForm(form) {
         var _this = this;

         form.addEventListener('submit', function (e) {
            e.preventDefault();

            _this.preloaderIcon.style.display = 'flex';

            var formData = {
               name: e.target.name.value,
               email: e.target.email.value,
               subject: e.target.subject.value,
               message: e.target.message.value
            };

            var options = {
               method: 'POST',
               body: JSON.stringify(formData)
            };
            var preloader = _this.preloaderIcon;
            var sentIcon = _this.sentIcon;

            fetch('https://maxs-4ebe4.firebaseio.com/clients.json', options).then(function (response) {
               if (response.status === 200) {

                  preloader.style.display = 'none';
                  sentIcon.style.display = 'flex';

                  setTimeout(function () {
                     sentIcon.style.display = 'none';
                  }, 2000);

                  e.target.name.value = '';
                  e.target.email.value = '';
                  e.target.subject.value = '';
                  e.target.message.value = '';
               };
            });
         });
      }
   }]);

   return Form;
}();

exports.default = Form;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9mb3JtLmpzIl0sIm5hbWVzIjpbIkZvcm0iLCJmb3JtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5wdXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicHJlbG9hZGVySWNvbiIsInNlbnRJY29uIiwiX2lucHV0Rm9jdXNDbGFzcyIsIl9zdWJtaXRGb3JtIiwiZm9yRWFjaCIsImJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsIm5leHRFbGVtZW50U2libGluZyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0eWxlIiwiZGlzcGxheSIsImZvcm1EYXRhIiwibmFtZSIsInRhcmdldCIsImVtYWlsIiwic3ViamVjdCIsIm1lc3NhZ2UiLCJvcHRpb25zIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwcmVsb2FkZXIiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInN0YXR1cyIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLEk7QUFDbEIsbUJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLElBQUwsR0FBWUMsU0FBU0MsYUFBVCxDQUF1QixpQkFBdkIsQ0FBWjtBQUNBLFdBQUtDLEtBQUwsR0FBYSxLQUFLSCxJQUFMLENBQVVJLGdCQUFWLENBQTJCLHVCQUEzQixDQUFiOztBQUVBLFdBQUtDLGFBQUwsR0FBcUIsS0FBS0wsSUFBTCxDQUFVRSxhQUFWLENBQXdCLGdDQUF4QixDQUFyQjtBQUNBLFdBQUtJLFFBQUwsR0FBZ0IsS0FBS04sSUFBTCxDQUFVRSxhQUFWLENBQXdCLDJCQUF4QixDQUFoQjs7QUFFQSxXQUFLSyxnQkFBTCxDQUFzQixLQUFLSixLQUEzQjtBQUNBLFdBQUtLLFdBQUwsQ0FBaUIsS0FBS1IsSUFBdEI7QUFDRjs7Ozt1Q0FFZ0JHLEssRUFBTztBQUNyQkEsZUFBTU0sT0FBTixDQUFjLGVBQU87QUFDbEJDLGdCQUFJQyxnQkFBSixDQUFxQixPQUFyQixFQUE4QixZQUFNO0FBQ2pDLG1CQUFJRCxJQUFJRSxLQUFSLEVBQWU7QUFDWkYsc0JBQUlHLGtCQUFKLENBQXVCQyxTQUF2QixDQUFpQ0MsR0FBakMsQ0FBcUMsOEJBQXJDO0FBQ0YsZ0JBRkQsTUFFTztBQUNKTCxzQkFBSUcsa0JBQUosQ0FBdUJDLFNBQXZCLENBQWlDRSxNQUFqQyxDQUF3Qyw4QkFBeEM7QUFDRjtBQUNILGFBTkQ7QUFPRixVQVJEO0FBU0Y7OztrQ0FFV2hCLEksRUFBTTtBQUFBOztBQUNmQSxjQUFLVyxnQkFBTCxDQUFzQixRQUF0QixFQUFnQyxhQUFLO0FBQ2xDTSxjQUFFQyxjQUFGOztBQUVBLGtCQUFLYixhQUFMLENBQW1CYyxLQUFuQixDQUF5QkMsT0FBekIsR0FBbUMsTUFBbkM7O0FBRUEsZ0JBQUlDLFdBQVc7QUFDWkMscUJBQU1MLEVBQUVNLE1BQUYsQ0FBU0QsSUFBVCxDQUFjVixLQURSO0FBRVpZLHNCQUFPUCxFQUFFTSxNQUFGLENBQVNDLEtBQVQsQ0FBZVosS0FGVjtBQUdaYSx3QkFBU1IsRUFBRU0sTUFBRixDQUFTRSxPQUFULENBQWlCYixLQUhkO0FBSVpjLHdCQUFTVCxFQUFFTSxNQUFGLENBQVNHLE9BQVQsQ0FBaUJkO0FBSmQsYUFBZjs7QUFPQSxnQkFBSWUsVUFBVTtBQUNYQyx1QkFBUSxNQURHO0FBRVhDLHFCQUFNQyxLQUFLQyxTQUFMLENBQWVWLFFBQWY7QUFGSyxhQUFkO0FBSUEsZ0JBQUlXLFlBQVksTUFBSzNCLGFBQXJCO0FBQ0EsZ0JBQUlDLFdBQVcsTUFBS0EsUUFBcEI7O0FBRUEyQixrQkFBTSxnREFBTixFQUF3RE4sT0FBeEQsRUFDSU8sSUFESixDQUNTLFVBQVVDLFFBQVYsRUFBb0I7QUFDdkIsbUJBQUlBLFNBQVNDLE1BQVQsS0FBb0IsR0FBeEIsRUFBNkI7O0FBRTFCSiw0QkFBVWIsS0FBVixDQUFnQkMsT0FBaEIsR0FBMEIsTUFBMUI7QUFDQWQsMkJBQVNhLEtBQVQsQ0FBZUMsT0FBZixHQUF5QixNQUF6Qjs7QUFFQWlCLDZCQUFXLFlBQU07QUFDZC9CLDhCQUFTYSxLQUFULENBQWVDLE9BQWYsR0FBeUIsTUFBekI7QUFDRixtQkFGRCxFQUVHLElBRkg7O0FBSUFILG9CQUFFTSxNQUFGLENBQVNELElBQVQsQ0FBY1YsS0FBZCxHQUFzQixFQUF0QjtBQUNBSyxvQkFBRU0sTUFBRixDQUFTQyxLQUFULENBQWVaLEtBQWYsR0FBdUIsRUFBdkI7QUFDQUssb0JBQUVNLE1BQUYsQ0FBU0UsT0FBVCxDQUFpQmIsS0FBakIsR0FBeUIsRUFBekI7QUFDQUssb0JBQUVNLE1BQUYsQ0FBU0csT0FBVCxDQUFpQmQsS0FBakIsR0FBeUIsRUFBekI7QUFDQztBQUNOLGFBaEJKO0FBa0JGLFVBckNEO0FBc0NGOzs7Ozs7a0JBaEVpQmIsSTtBQWlFcEIiLCJmaWxlIjoiX2Zvcm0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtIHtcclxuICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIERPTVxyXG4gICAgICB0aGlzLmZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFjdHNfX2Zvcm0nKTtcclxuICAgICAgdGhpcy5pbnB1dCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuY29udGFjdHNfX2Zvcm0taW5wdXQnKTtcclxuXHJcbiAgICAgIHRoaXMucHJlbG9hZGVySWNvbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKCcuY29udGFjdHNfX2Zvcm0tYnRuLS1wcmVsb2FkZXInKTtcclxuICAgICAgdGhpcy5zZW50SWNvbiA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKCcuY29udGFjdHNfX2Zvcm0tYnRuLS1zZW50Jyk7XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLl9pbnB1dEZvY3VzQ2xhc3ModGhpcy5pbnB1dCk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEZvcm0odGhpcy5mb3JtKTtcclxuICAgfTtcclxuXHJcbiAgIF9pbnB1dEZvY3VzQ2xhc3MoaW5wdXQpIHtcclxuICAgICAgaW5wdXQuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChidG4udmFsdWUpIHtcclxuICAgICAgICAgICAgICAgYnRuLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QuYWRkKCdjb250YWN0c19fZm9ybS1sYWJlbC0tYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgIGJ0bi5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnY29udGFjdHNfX2Zvcm0tbGFiZWwtLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgfTtcclxuXHJcbiAgIF9zdWJtaXRGb3JtKGZvcm0pIHtcclxuICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBlID0+IHtcclxuICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgdGhpcy5wcmVsb2FkZXJJY29uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICBsZXQgZm9ybURhdGEgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGUudGFyZ2V0Lm5hbWUudmFsdWUsXHJcbiAgICAgICAgICAgIGVtYWlsOiBlLnRhcmdldC5lbWFpbC52YWx1ZSxcclxuICAgICAgICAgICAgc3ViamVjdDogZS50YXJnZXQuc3ViamVjdC52YWx1ZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogZS50YXJnZXQubWVzc2FnZS52YWx1ZVxyXG4gICAgICAgICB9O1xyXG5cclxuICAgICAgICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSlcclxuICAgICAgICAgfTtcclxuICAgICAgICAgbGV0IHByZWxvYWRlciA9IHRoaXMucHJlbG9hZGVySWNvbjtcclxuICAgICAgICAgbGV0IHNlbnRJY29uID0gdGhpcy5zZW50SWNvbjtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGZldGNoKCdodHRwczovL21heHMtNGViZTQuZmlyZWJhc2Vpby5jb20vY2xpZW50cy5qc29uJywgb3B0aW9ucylcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgcHJlbG9hZGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgIHNlbnRJY29uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgc2VudEljb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICBlLnRhcmdldC5uYW1lLnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmVtYWlsLnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnN1YmplY3QudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgZS50YXJnZXQubWVzc2FnZS52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG59OyJdfQ==
},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Name = function () {
    function Name() {
        _classCallCheck(this, Name);

        // DOM
        this.btns = document.querySelectorAll('button');
        this.ankerButtons = [];
        this.sections = document.querySelectorAll('section');

        this._checkAnkers();
        this._btnEvent();
    }

    _createClass(Name, [{
        key: '_checkAnkers',
        value: function _checkAnkers() {
            for (var i = 0; i < this.btns.length; i++) {
                if (this.btns[i].dataset.anker) {
                    this.ankerButtons.push(this.btns[i]);
                };
            };
        }
    }, {
        key: '_btnEvent',
        value: function _btnEvent() {
            var _this = this;

            var _loop = function _loop(i) {
                var btn = _this.ankerButtons[i];
                btn.addEventListener('click', function (e) {
                    e.preventDefault();
                    var anker = btn.dataset.anker,
                        element = document.getElementById(anker);

                    _this._scrollTo(element);
                });
            };

            for (var i = 0; i < this.ankerButtons.length; i++) {
                _loop(i);
            }
        }
    }, {
        key: '_scrollTo',
        value: function _scrollTo(destination) {
            var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;

            var start = window.pageYOffset;
            var startTime = 'now' in window.performance ? performance.now() : new Date().getTime();

            var documentHeight = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);
            var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;
            var headerHeight = document.querySelector('.header').offsetHeight;
            var destinationOffset = typeof destination === 'number' ? destination : destination.offsetTop - headerHeight;

            if (destinationOffset < 0) {
                destinationOffset = 0;
            }

            var destinationOffsetToScroll = Math.round(documentHeight - destinationOffset < windowHeight ? documentHeight - windowHeight : destinationOffset);

            if ('requestAnimationFrame' in window === false) {
                window.scroll(0, destinationOffsetToScroll);
                return;
            }

            function scroll() {
                var now = 'now' in window.performance ? performance.now() : new Date().getTime();
                var time = Math.min(1, (now - startTime) / duration);
                var timeFunction = time;
                window.scroll(0, Math.ceil(timeFunction * (destinationOffsetToScroll - start) + start));

                if (window.pageYOffset === destinationOffsetToScroll) {
                    return;
                }

                requestAnimationFrame(scroll);
            }

            scroll();
        }
    }]);

    return Name;
}();

exports.default = Name;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9vZmZzZXQtc2Nyb2xsLmpzIl0sIm5hbWVzIjpbIk5hbWUiLCJidG5zIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYW5rZXJCdXR0b25zIiwic2VjdGlvbnMiLCJfY2hlY2tBbmtlcnMiLCJfYnRuRXZlbnQiLCJpIiwibGVuZ3RoIiwiZGF0YXNldCIsImFua2VyIiwicHVzaCIsImJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicHJldmVudERlZmF1bHQiLCJlbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJfc2Nyb2xsVG8iLCJkZXN0aW5hdGlvbiIsImR1cmF0aW9uIiwic3RhcnQiLCJ3aW5kb3ciLCJwYWdlWU9mZnNldCIsInN0YXJ0VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSIsImdldFRpbWUiLCJkb2N1bWVudEhlaWdodCIsIk1hdGgiLCJtYXgiLCJib2R5Iiwic2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50SGVpZ2h0Iiwid2luZG93SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhlYWRlckhlaWdodCIsInF1ZXJ5U2VsZWN0b3IiLCJkZXN0aW5hdGlvbk9mZnNldCIsIm9mZnNldFRvcCIsImRlc3RpbmF0aW9uT2Zmc2V0VG9TY3JvbGwiLCJyb3VuZCIsInNjcm9sbCIsInRpbWUiLCJtaW4iLCJ0aW1lRnVuY3Rpb24iLCJjZWlsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCQSxJO0FBQ2pCLG9CQUFjO0FBQUE7O0FBQ1Y7QUFDQSxhQUFLQyxJQUFMLEdBQVlDLFNBQVNDLGdCQUFULENBQTBCLFFBQTFCLENBQVo7QUFDQSxhQUFLQyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsYUFBS0MsUUFBTCxHQUFnQkgsU0FBU0MsZ0JBQVQsQ0FBMEIsU0FBMUIsQ0FBaEI7O0FBR0EsYUFBS0csWUFBTDtBQUNBLGFBQUtDLFNBQUw7QUFDSDs7Ozt1Q0FFYztBQUNYLGlCQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLUCxJQUFMLENBQVVRLE1BQTlCLEVBQXNDRCxHQUF0QyxFQUEyQztBQUN2QyxvQkFBSSxLQUFLUCxJQUFMLENBQVVPLENBQVYsRUFBYUUsT0FBYixDQUFxQkMsS0FBekIsRUFBZ0M7QUFDNUIseUJBQUtQLFlBQUwsQ0FBa0JRLElBQWxCLENBQXVCLEtBQUtYLElBQUwsQ0FBVU8sQ0FBVixDQUF2QjtBQUNIO0FBQ0o7QUFDSjs7O29DQUVXO0FBQUE7O0FBQUEsdUNBQ0NBLENBREQ7QUFFSixvQkFBSUssTUFBTSxNQUFLVCxZQUFMLENBQWtCSSxDQUFsQixDQUFWO0FBQ0FLLG9CQUFJQyxnQkFBSixDQUFxQixPQUFyQixFQUE4QixhQUFLO0FBQy9CQyxzQkFBRUMsY0FBRjtBQUNBLHdCQUFJTCxRQUFRRSxJQUFJSCxPQUFKLENBQVlDLEtBQXhCO0FBQUEsd0JBQ0lNLFVBQVVmLFNBQVNnQixjQUFULENBQXdCUCxLQUF4QixDQURkOztBQUdJLDBCQUFLUSxTQUFMLENBQWVGLE9BQWY7QUFFUCxpQkFQRDtBQUhJOztBQUNSLGlCQUFLLElBQUlULElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLSixZQUFMLENBQWtCSyxNQUF0QyxFQUE4Q0QsR0FBOUMsRUFBbUQ7QUFBQSxzQkFBMUNBLENBQTBDO0FBVWxEO0FBQ0o7OztrQ0FFUVksVyxFQUE2QjtBQUFBLGdCQUFoQkMsUUFBZ0IsdUVBQUwsR0FBSzs7QUFDbEMsZ0JBQU1DLFFBQVFDLE9BQU9DLFdBQXJCO0FBQ0EsZ0JBQU1DLFlBQVksU0FBU0YsT0FBT0csV0FBaEIsR0FBOEJBLFlBQVlDLEdBQVosRUFBOUIsR0FBa0QsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQXBFOztBQUVBLGdCQUFNQyxpQkFBaUJDLEtBQUtDLEdBQUwsQ0FBUzlCLFNBQVMrQixJQUFULENBQWNDLFlBQXZCLEVBQXFDaEMsU0FBUytCLElBQVQsQ0FBY0UsWUFBbkQsRUFBaUVqQyxTQUFTa0MsZUFBVCxDQUF5QkMsWUFBMUYsRUFBd0duQyxTQUFTa0MsZUFBVCxDQUF5QkYsWUFBakksRUFBK0loQyxTQUFTa0MsZUFBVCxDQUF5QkQsWUFBeEssQ0FBdkI7QUFDQSxnQkFBTUcsZUFBZWYsT0FBT2dCLFdBQVAsSUFBc0JyQyxTQUFTa0MsZUFBVCxDQUF5QkMsWUFBL0MsSUFBK0RuQyxTQUFTc0Msb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsRUFBeUNILFlBQTdIO0FBQ0EsZ0JBQU1JLGVBQWV2QyxTQUFTd0MsYUFBVCxDQUF1QixTQUF2QixFQUFrQ1AsWUFBdkQ7QUFDQSxnQkFBSVEsb0JBQW9CLE9BQU92QixXQUFQLEtBQXVCLFFBQXZCLEdBQWtDQSxXQUFsQyxHQUFpREEsWUFBWXdCLFNBQVosR0FBd0JILFlBQWpHOztBQUVBLGdCQUFJRSxvQkFBb0IsQ0FBeEIsRUFBMkI7QUFDdkJBLG9DQUFvQixDQUFwQjtBQUNIOztBQUVELGdCQUFNRSw0QkFBNEJkLEtBQUtlLEtBQUwsQ0FBV2hCLGlCQUFpQmEsaUJBQWpCLEdBQXFDTCxZQUFyQyxHQUFvRFIsaUJBQWlCUSxZQUFyRSxHQUFvRkssaUJBQS9GLENBQWxDOztBQUVBLGdCQUFJLDJCQUEyQnBCLE1BQTNCLEtBQXNDLEtBQTFDLEVBQWlEO0FBQzdDQSx1QkFBT3dCLE1BQVAsQ0FBYyxDQUFkLEVBQWlCRix5QkFBakI7QUFDQTtBQUNIOztBQUVELHFCQUFTRSxNQUFULEdBQWtCO0FBQ2Qsb0JBQU1wQixNQUFNLFNBQVNKLE9BQU9HLFdBQWhCLEdBQThCQSxZQUFZQyxHQUFaLEVBQTlCLEdBQWtELElBQUlDLElBQUosR0FBV0MsT0FBWCxFQUE5RDtBQUNBLG9CQUFNbUIsT0FBT2pCLEtBQUtrQixHQUFMLENBQVMsQ0FBVCxFQUFhLENBQUN0QixNQUFNRixTQUFQLElBQW9CSixRQUFqQyxDQUFiO0FBQ0Esb0JBQU02QixlQUFlRixJQUFyQjtBQUNBekIsdUJBQU93QixNQUFQLENBQWMsQ0FBZCxFQUFpQmhCLEtBQUtvQixJQUFMLENBQVdELGdCQUFnQkwsNEJBQTRCdkIsS0FBNUMsQ0FBRCxHQUF1REEsS0FBakUsQ0FBakI7O0FBRUEsb0JBQUlDLE9BQU9DLFdBQVAsS0FBdUJxQix5QkFBM0IsRUFBc0Q7QUFDbEQ7QUFDSDs7QUFFRE8sc0NBQXNCTCxNQUF0QjtBQUNIOztBQUVEQTtBQUNIOzs7Ozs7a0JBcEVnQi9DLEk7QUFxRXBCIiwiZmlsZSI6Il9vZmZzZXQtc2Nyb2xsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmFtZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBET01cclxuICAgICAgICB0aGlzLmJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKTtcclxuICAgICAgICB0aGlzLmFua2VyQnV0dG9ucyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzZWN0aW9uJyk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLl9jaGVja0Fua2VycygpO1xyXG4gICAgICAgIHRoaXMuX2J0bkV2ZW50KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9jaGVja0Fua2VycygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYnRucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5idG5zW2ldLmRhdGFzZXQuYW5rZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYW5rZXJCdXR0b25zLnB1c2godGhpcy5idG5zW2ldKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBfYnRuRXZlbnQoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFua2VyQnV0dG9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgYnRuID0gdGhpcy5hbmtlckJ1dHRvbnNbaV07XHJcbiAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgICAgICBsZXQgYW5rZXIgPSBidG4uZGF0YXNldC5hbmtlcixcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYW5rZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbFRvKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgIF9zY3JvbGxUbyhkZXN0aW5hdGlvbiwgZHVyYXRpb24gPSA1MDApIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICAgIMKgwqDCoMKgY29uc3Qgc3RhcnRUaW1lID0gJ25vdycgaW4gd2luZG93LnBlcmZvcm1hbmNlID8gcGVyZm9ybWFuY2Uubm93KCkgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIMKgXHJcbiAgICDCoMKgwqDCoGNvbnN0IGRvY3VtZW50SGVpZ2h0ID0gTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KTtcclxuICAgIMKgwqDCoMKgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgY29uc3QgaGVhZGVySGVpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpLm9mZnNldEhlaWdodDtcclxuICAgICAgICBsZXQgZGVzdGluYXRpb25PZmZzZXQgPSB0eXBlb2YgZGVzdGluYXRpb24gPT09ICdudW1iZXInID8gZGVzdGluYXRpb24gOiAoZGVzdGluYXRpb24ub2Zmc2V0VG9wIC0gaGVhZGVySGVpZ2h0KTtcclxuXHJcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uT2Zmc2V0IDwgMCkge1xyXG4gICAgICAgICAgICBkZXN0aW5hdGlvbk9mZnNldCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIMKgwqDCoMKgY29uc3QgZGVzdGluYXRpb25PZmZzZXRUb1Njcm9sbCA9IE1hdGgucm91bmQoZG9jdW1lbnRIZWlnaHQgLSBkZXN0aW5hdGlvbk9mZnNldCA8IHdpbmRvd0hlaWdodCA/IGRvY3VtZW50SGVpZ2h0IC0gd2luZG93SGVpZ2h0IDogZGVzdGluYXRpb25PZmZzZXQpO1xyXG4gICAgwqBcclxuICAgIMKgwqDCoMKgaWYgKCdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnIGluIHdpbmRvdyA9PT0gZmFsc2UpIHtcclxuICAgIMKgwqDCoMKgwqDCoMKgwqB3aW5kb3cuc2Nyb2xsKDAsIGRlc3RpbmF0aW9uT2Zmc2V0VG9TY3JvbGwpO1xyXG4gICAgwqDCoMKgwqDCoMKgwqDCoHJldHVybjtcclxuICAgIMKgwqDCoMKgfVxyXG4gICAgwqBcclxuICAgIMKgwqDCoMKgZnVuY3Rpb24gc2Nyb2xsKCkge1xyXG4gICAgwqDCoMKgwqDCoMKgwqDCoGNvbnN0IG5vdyA9ICdub3cnIGluIHdpbmRvdy5wZXJmb3JtYW5jZSA/IHBlcmZvcm1hbmNlLm5vdygpIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICDCoMKgwqDCoMKgwqDCoMKgY29uc3QgdGltZSA9IE1hdGgubWluKDEsICgobm93IC0gc3RhcnRUaW1lKSAvIGR1cmF0aW9uKSk7XHJcbiAgICDCoMKgwqDCoMKgwqDCoMKgY29uc3QgdGltZUZ1bmN0aW9uID0gdGltZTtcclxuICAgIMKgwqDCoMKgwqDCoMKgwqB3aW5kb3cuc2Nyb2xsKDAsIE1hdGguY2VpbCgodGltZUZ1bmN0aW9uICogKGRlc3RpbmF0aW9uT2Zmc2V0VG9TY3JvbGwgLSBzdGFydCkpICsgc3RhcnQpKTtcclxuXHJcbiAgICDCoMKgwqDCoMKgwqDCoMKgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA9PT0gZGVzdGluYXRpb25PZmZzZXRUb1Njcm9sbCkge1xyXG4gICAgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgcmV0dXJuO1xyXG4gICAgwqDCoMKgwqDCoMKgwqDCoH1cclxuICAgIMKgXHJcbiAgICDCoMKgwqDCoMKgwqDCoMKgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNjcm9sbCk7XHJcbiAgICDCoMKgwqDCoH1cclxuICAgIMKgXHJcbiAgICDCoMKgwqDCoHNjcm9sbCgpO1xyXG4gICAgfTtcclxufTtcclxuXHJcbiJdfQ==
},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SiteInfo = function () {
   function SiteInfo() {
      _classCallCheck(this, SiteInfo);

      // DOM
      this.siteInfoWindow = document.querySelector('.site-info');
      this.siteInfoBtn = this.siteInfoWindow.querySelector('.site-info__label');

      this._btnEvent();
   }

   _createClass(SiteInfo, [{
      key: '_btnEvent',
      value: function _btnEvent() {
         var _this = this;

         var infoIcon = this.siteInfoBtn.children[0],
             closeIcon = this.siteInfoBtn.children[1];

         this.siteInfoBtn.addEventListener('click', function (e) {
            if (e.target === e.currentTarget || e.target.parentElement === e.currentTarget) {
               _this.siteInfoWindow.classList.toggle('site-info--active');
            }
         });
      }
   }]);

   return SiteInfo;
}();

exports.default = SiteInfo;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zaXRlLWluZm8uanMiXSwibmFtZXMiOlsiU2l0ZUluZm8iLCJzaXRlSW5mb1dpbmRvdyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNpdGVJbmZvQnRuIiwiX2J0bkV2ZW50IiwiaW5mb0ljb24iLCJjaGlsZHJlbiIsImNsb3NlSWNvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFE7QUFDbEIsdUJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLGNBQUwsR0FBc0JDLFNBQVNDLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBdEI7QUFDQSxXQUFLQyxXQUFMLEdBQW1CLEtBQUtILGNBQUwsQ0FBb0JFLGFBQXBCLENBQWtDLG1CQUFsQyxDQUFuQjs7QUFFQSxXQUFLRSxTQUFMO0FBQ0Y7Ozs7a0NBRVc7QUFBQTs7QUFDVCxhQUFJQyxXQUFXLEtBQUtGLFdBQUwsQ0FBaUJHLFFBQWpCLENBQTBCLENBQTFCLENBQWY7QUFBQSxhQUNJQyxZQUFZLEtBQUtKLFdBQUwsQ0FBaUJHLFFBQWpCLENBQTBCLENBQTFCLENBRGhCOztBQUdBLGNBQUtILFdBQUwsQ0FBaUJLLGdCQUFqQixDQUFrQyxPQUFsQyxFQUEyQyxhQUFLO0FBQzdDLGdCQUFJQyxFQUFFQyxNQUFGLEtBQWFELEVBQUVFLGFBQWYsSUFBZ0NGLEVBQUVDLE1BQUYsQ0FBU0UsYUFBVCxLQUEyQkgsRUFBRUUsYUFBakUsRUFBZ0Y7QUFDN0UscUJBQUtYLGNBQUwsQ0FBb0JhLFNBQXBCLENBQThCQyxNQUE5QixDQUFxQyxtQkFBckM7QUFDRjtBQUNILFVBSkQ7QUFLRjs7Ozs7O2tCQWxCaUJmLFE7QUFtQnBCIiwiZmlsZSI6Il9zaXRlLWluZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTaXRlSW5mbyB7XHJcbiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyBET01cclxuICAgICAgdGhpcy5zaXRlSW5mb1dpbmRvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaXRlLWluZm8nKTtcclxuICAgICAgdGhpcy5zaXRlSW5mb0J0biA9IHRoaXMuc2l0ZUluZm9XaW5kb3cucXVlcnlTZWxlY3RvcignLnNpdGUtaW5mb19fbGFiZWwnKTtcclxuXHJcbiAgICAgIHRoaXMuX2J0bkV2ZW50KCk7XHJcbiAgIH07XHJcblxyXG4gICBfYnRuRXZlbnQoKSB7XHJcbiAgICAgIGxldCBpbmZvSWNvbiA9IHRoaXMuc2l0ZUluZm9CdG4uY2hpbGRyZW5bMF0sXHJcbiAgICAgICAgICBjbG9zZUljb24gPSB0aGlzLnNpdGVJbmZvQnRuLmNoaWxkcmVuWzFdO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5zaXRlSW5mb0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldC5wYXJlbnRFbGVtZW50ID09PSBlLmN1cnJlbnRUYXJnZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5zaXRlSW5mb1dpbmRvdy5jbGFzc0xpc3QudG9nZ2xlKCdzaXRlLWluZm8tLWFjdGl2ZScpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG59OyJdfQ==
},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Slider = function () {
   function Slider() {
      _classCallCheck(this, Slider);

      // DOM
      this.topSection = document.querySelector('.top-section');

      // Vars
      this.currentImgNum = 0;
      this.automaticSwitchingTime = 8000;
      this.preloader = true;

      this.backgroundImages = [];

      this._checkWindowWidth();
      this._setBackground(this.backgroundImages[this.currentImgNum]);
      this._automaticSwitching();
   }

   _createClass(Slider, [{
      key: '_setBackground',
      value: function _setBackground(img) {
         this.topSection.style.backgroundImage = 'url(\'' + img + '\')';
      }
   }, {
      key: '_automaticSwitching',
      value: function _automaticSwitching() {
         var _this = this;

         var imgPreloader = document.createElement('img');
         imgPreloader.setAttribute('src', this.backgroundImages[this.currentImgNum + 1]);
         imgPreloader.style.display = "none";
         this.topSection.appendChild(imgPreloader);

         setInterval(function () {

            _this.currentImgNum++;

            if (_this.currentImgNum === _this.backgroundImages.length) {
               _this.currentImgNum = 0;
            } else if (_this.preloader && _this.currentImgNum === _this.backgroundImages.length - 1) {
               _this.preloader = false;
               _this.topSection.removeChild(imgPreloader);
            }

            if (_this.preloader) {
               imgPreloader.setAttribute('src', _this.backgroundImages[_this.currentImgNum + 1]);
            };

            var img = _this.backgroundImages[_this.currentImgNum];
            img.onload;
            _this._setBackground(img);
         }, this.automaticSwitchingTime);
      }
   }, {
      key: '_checkWindowWidth',
      value: function _checkWindowWidth() {
         if (window.innerWidth <= 960) {
            this.backgroundImages = ['img/top-section-slider/home-bg-1-small.jpg', 'img/top-section-slider/home-bg-2-small.jpg', 'img/top-section-slider/home-bg-3-small.jpg', 'img/top-section-slider/home-bg-4-small.jpg'];
         } else {
            this.backgroundImages = ['img/top-section-slider/home-bg-1.jpg', 'img/top-section-slider/home-bg-2.jpg', 'img/top-section-slider/home-bg-3.jpg', 'img/top-section-slider/home-bg-4.jpg'];
         }
      }
   }]);

   return Slider;
}();

exports.default = Slider;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zbGlkZXIuanMiXSwibmFtZXMiOlsiU2xpZGVyIiwidG9wU2VjdGlvbiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImN1cnJlbnRJbWdOdW0iLCJhdXRvbWF0aWNTd2l0Y2hpbmdUaW1lIiwicHJlbG9hZGVyIiwiYmFja2dyb3VuZEltYWdlcyIsIl9jaGVja1dpbmRvd1dpZHRoIiwiX3NldEJhY2tncm91bmQiLCJfYXV0b21hdGljU3dpdGNoaW5nIiwiaW1nIiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJpbWdQcmVsb2FkZXIiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic2V0SW50ZXJ2YWwiLCJsZW5ndGgiLCJyZW1vdmVDaGlsZCIsIm9ubG9hZCIsIndpbmRvdyIsImlubmVyV2lkdGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLE07QUFDbEIscUJBQWM7QUFBQTs7QUFDWDtBQUNBLFdBQUtDLFVBQUwsR0FBa0JDLFNBQVNDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBbEI7O0FBRUE7QUFDQSxXQUFLQyxhQUFMLEdBQXFCLENBQXJCO0FBQ0EsV0FBS0Msc0JBQUwsR0FBOEIsSUFBOUI7QUFDQSxXQUFLQyxTQUFMLEdBQWlCLElBQWpCOztBQUVBLFdBQUtDLGdCQUFMLEdBQXdCLEVBQXhCOztBQUVBLFdBQUtDLGlCQUFMO0FBQ0EsV0FBS0MsY0FBTCxDQUFvQixLQUFLRixnQkFBTCxDQUFzQixLQUFLSCxhQUEzQixDQUFwQjtBQUNBLFdBQUtNLG1CQUFMO0FBQ0Y7Ozs7cUNBRWNDLEcsRUFBSztBQUNqQixjQUFLVixVQUFMLENBQWdCVyxLQUFoQixDQUFzQkMsZUFBdEIsY0FBZ0RGLEdBQWhEO0FBQ0Y7Ozs0Q0FFcUI7QUFBQTs7QUFFbkIsYUFBSUcsZUFBZVosU0FBU2EsYUFBVCxDQUF1QixLQUF2QixDQUFuQjtBQUNBRCxzQkFBYUUsWUFBYixDQUEwQixLQUExQixFQUFpQyxLQUFLVCxnQkFBTCxDQUFzQixLQUFLSCxhQUFMLEdBQXFCLENBQTNDLENBQWpDO0FBQ0FVLHNCQUFhRixLQUFiLENBQW1CSyxPQUFuQixHQUE2QixNQUE3QjtBQUNBLGNBQUtoQixVQUFMLENBQWdCaUIsV0FBaEIsQ0FBNEJKLFlBQTVCOztBQUVBSyxxQkFBWSxZQUFNOztBQUVmLGtCQUFLZixhQUFMOztBQUVBLGdCQUFJLE1BQUtBLGFBQUwsS0FBdUIsTUFBS0csZ0JBQUwsQ0FBc0JhLE1BQWpELEVBQXlEO0FBQ3RELHFCQUFLaEIsYUFBTCxHQUFxQixDQUFyQjtBQUNGLGFBRkQsTUFFTyxJQUFJLE1BQUtFLFNBQUwsSUFBa0IsTUFBS0YsYUFBTCxLQUF3QixNQUFLRyxnQkFBTCxDQUFzQmEsTUFBdEIsR0FBOEIsQ0FBNUUsRUFBZ0Y7QUFDcEYscUJBQUtkLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxxQkFBS0wsVUFBTCxDQUFnQm9CLFdBQWhCLENBQTRCUCxZQUE1QjtBQUNGOztBQUVELGdCQUFJLE1BQUtSLFNBQVQsRUFBb0I7QUFDakJRLDRCQUFhRSxZQUFiLENBQTBCLEtBQTFCLEVBQWlDLE1BQUtULGdCQUFMLENBQXNCLE1BQUtILGFBQUwsR0FBcUIsQ0FBM0MsQ0FBakM7QUFDRjs7QUFFRCxnQkFBSU8sTUFBTSxNQUFLSixnQkFBTCxDQUFzQixNQUFLSCxhQUEzQixDQUFWO0FBQ0FPLGdCQUFJVyxNQUFKO0FBQ0Esa0JBQUtiLGNBQUwsQ0FBb0JFLEdBQXBCO0FBRUYsVUFuQkQsRUFtQkcsS0FBS04sc0JBbkJSO0FBb0JGOzs7MENBRW1CO0FBQ2pCLGFBQUlrQixPQUFPQyxVQUFQLElBQXFCLEdBQXpCLEVBQThCO0FBQzNCLGlCQUFLakIsZ0JBQUwsR0FBd0IsQ0FDckIsNENBRHFCLEVBRXJCLDRDQUZxQixFQUdyQiw0Q0FIcUIsRUFJckIsNENBSnFCLENBQXhCO0FBTUYsVUFQRCxNQU9PO0FBQ0osaUJBQUtBLGdCQUFMLEdBQXdCLENBQ3JCLHNDQURxQixFQUVyQixzQ0FGcUIsRUFHckIsc0NBSHFCLEVBSXJCLHNDQUpxQixDQUF4QjtBQU1GO0FBQ0g7Ozs7OztrQkFsRWlCUCxNO0FBbUVwQiIsImZpbGUiOiJfc2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyIHtcclxuICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIC8vIERPTVxyXG4gICAgICB0aGlzLnRvcFNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9wLXNlY3Rpb24nKTtcclxuXHJcbiAgICAgIC8vIFZhcnNcclxuICAgICAgdGhpcy5jdXJyZW50SW1nTnVtID0gMDtcclxuICAgICAgdGhpcy5hdXRvbWF0aWNTd2l0Y2hpbmdUaW1lID0gODAwMDtcclxuICAgICAgdGhpcy5wcmVsb2FkZXIgPSB0cnVlO1xyXG5cclxuICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzID0gW107XHJcblxyXG4gICAgICB0aGlzLl9jaGVja1dpbmRvd1dpZHRoKCk7XHJcbiAgICAgIHRoaXMuX3NldEJhY2tncm91bmQodGhpcy5iYWNrZ3JvdW5kSW1hZ2VzW3RoaXMuY3VycmVudEltZ051bV0pO1xyXG4gICAgICB0aGlzLl9hdXRvbWF0aWNTd2l0Y2hpbmcoKTtcclxuICAgfTtcclxuXHJcbiAgIF9zZXRCYWNrZ3JvdW5kKGltZykge1xyXG4gICAgICB0aGlzLnRvcFNlY3Rpb24uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgnJHtpbWd9JylgO1xyXG4gICB9O1xyXG5cclxuICAgX2F1dG9tYXRpY1N3aXRjaGluZygpIHtcclxuXHJcbiAgICAgIGxldCBpbWdQcmVsb2FkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgaW1nUHJlbG9hZGVyLnNldEF0dHJpYnV0ZSgnc3JjJywgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzW3RoaXMuY3VycmVudEltZ051bSArIDFdKTtcclxuICAgICAgaW1nUHJlbG9hZGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgdGhpcy50b3BTZWN0aW9uLmFwcGVuZENoaWxkKGltZ1ByZWxvYWRlcik7XHJcblxyXG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcblxyXG4gICAgICAgICB0aGlzLmN1cnJlbnRJbWdOdW0rKztcclxuXHJcbiAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRJbWdOdW0gPT09IHRoaXMuYmFja2dyb3VuZEltYWdlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SW1nTnVtID0gMDtcclxuICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZWxvYWRlciAmJiB0aGlzLmN1cnJlbnRJbWdOdW0gPT09ICh0aGlzLmJhY2tncm91bmRJbWFnZXMubGVuZ3RoIC0xKSkge1xyXG4gICAgICAgICAgICB0aGlzLnByZWxvYWRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnRvcFNlY3Rpb24ucmVtb3ZlQ2hpbGQoaW1nUHJlbG9hZGVyKTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgaWYgKHRoaXMucHJlbG9hZGVyKSB7XHJcbiAgICAgICAgICAgIGltZ1ByZWxvYWRlci5zZXRBdHRyaWJ1dGUoJ3NyYycsIHRoaXMuYmFja2dyb3VuZEltYWdlc1t0aGlzLmN1cnJlbnRJbWdOdW0gKyAxXSk7XHJcbiAgICAgICAgIH07XHJcbiAgICAgICAgIFxyXG4gICAgICAgICBsZXQgaW1nID0gdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzW3RoaXMuY3VycmVudEltZ051bV07XHJcbiAgICAgICAgIGltZy5vbmxvYWRcclxuICAgICAgICAgdGhpcy5fc2V0QmFja2dyb3VuZChpbWcpOyAgXHJcblxyXG4gICAgICB9LCB0aGlzLmF1dG9tYXRpY1N3aXRjaGluZ1RpbWUpO1xyXG4gICB9O1xyXG5cclxuICAgX2NoZWNrV2luZG93V2lkdGgoKSB7XHJcbiAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSA5NjApIHtcclxuICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VzID0gW1xyXG4gICAgICAgICAgICAnaW1nL3RvcC1zZWN0aW9uLXNsaWRlci9ob21lLWJnLTEtc21hbGwuanBnJyxcclxuICAgICAgICAgICAgJ2ltZy90b3Atc2VjdGlvbi1zbGlkZXIvaG9tZS1iZy0yLXNtYWxsLmpwZycsXHJcbiAgICAgICAgICAgICdpbWcvdG9wLXNlY3Rpb24tc2xpZGVyL2hvbWUtYmctMy1zbWFsbC5qcGcnLFxyXG4gICAgICAgICAgICAnaW1nL3RvcC1zZWN0aW9uLXNsaWRlci9ob21lLWJnLTQtc21hbGwuanBnJ1xyXG4gICAgICAgICBdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZXMgPSBbXHJcbiAgICAgICAgICAgICdpbWcvdG9wLXNlY3Rpb24tc2xpZGVyL2hvbWUtYmctMS5qcGcnLFxyXG4gICAgICAgICAgICAnaW1nL3RvcC1zZWN0aW9uLXNsaWRlci9ob21lLWJnLTIuanBnJyxcclxuICAgICAgICAgICAgJ2ltZy90b3Atc2VjdGlvbi1zbGlkZXIvaG9tZS1iZy0zLmpwZycsXHJcbiAgICAgICAgICAgICdpbWcvdG9wLXNlY3Rpb24tc2xpZGVyL2hvbWUtYmctNC5qcGcnXHJcbiAgICAgICAgIF07XHJcbiAgICAgIH1cclxuICAgfVxyXG59OyJdfQ==
},{}],9:[function(require,module,exports){
'use strict';

var _slider = require('./_slider');

var _slider2 = _interopRequireDefault(_slider);

var _fixedHeader = require('./_fixed-header');

var _fixedHeader2 = _interopRequireDefault(_fixedHeader);

var _burgerMenu = require('./_burger-menu');

var _burgerMenu2 = _interopRequireDefault(_burgerMenu);

var _offsetScroll = require('./_offset-scroll');

var _offsetScroll2 = _interopRequireDefault(_offsetScroll);

var _animateNumber = require('./_animate-number');

var _animateNumber2 = _interopRequireDefault(_animateNumber);

var _form = require('./_form');

var _form2 = _interopRequireDefault(_form);

var _caseStudySlider = require('./_case-study-slider');

var _caseStudySlider2 = _interopRequireDefault(_caseStudySlider);

var _siteInfo = require('./_site-info');

var _siteInfo2 = _interopRequireDefault(_siteInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('DOMContentLoaded', init);

function init() {
   var slider = new _slider2.default();
   var fixedHeader = new _fixedHeader2.default();
   var burgerMenu = new _burgerMenu2.default();
   var offsetScroll = new _offsetScroll2.default();
   var animateNumber = new _animateNumber2.default();
   var form = new _form2.default();
   var caseStudySlider = new _caseStudySlider2.default();
   var siteInfo = new _siteInfo2.default();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfYjRmY2U1MGYuanMiXSwibmFtZXMiOlsid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXQiLCJzbGlkZXIiLCJmaXhlZEhlYWRlciIsImJ1cmdlck1lbnUiLCJvZmZzZXRTY3JvbGwiLCJhbmltYXRlTnVtYmVyIiwiZm9ybSIsImNhc2VTdHVkeVNsaWRlciIsInNpdGVJbmZvIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQVRBQSxPQUFPQyxnQkFBUCxDQUF3QixrQkFBeEIsRUFBNENDLElBQTVDOztBQVdBLFNBQVNBLElBQVQsR0FBZ0I7QUFDYixPQUFNQyxTQUFTLHNCQUFmO0FBQ0EsT0FBTUMsY0FBYywyQkFBcEI7QUFDQSxPQUFNQyxhQUFhLDBCQUFuQjtBQUNBLE9BQU1DLGVBQWUsNEJBQXJCO0FBQ0EsT0FBTUMsZ0JBQWdCLDZCQUF0QjtBQUNBLE9BQU1DLE9BQU8sb0JBQWI7QUFDQSxPQUFNQyxrQkFBa0IsK0JBQXhCO0FBQ0EsT0FBTUMsV0FBVyx3QkFBakI7QUFDRiIsImZpbGUiOiJmYWtlX2I0ZmNlNTBmLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0KTtcclxuXHJcbmltcG9ydCBTbGlkZXIgZnJvbSAnLi9fc2xpZGVyJztcclxuaW1wb3J0IEZpeGVkSGVhZGVyIGZyb20gJy4vX2ZpeGVkLWhlYWRlcic7XHJcbmltcG9ydCBCdXJnZXJNZW51IGZyb20gJy4vX2J1cmdlci1tZW51JztcclxuaW1wb3J0IE9mZnNldFNjcm9sbCBmcm9tICcuL19vZmZzZXQtc2Nyb2xsJztcclxuaW1wb3J0IEFuaW1hdGVOdW1iZXIgZnJvbSAnLi9fYW5pbWF0ZS1udW1iZXInO1xyXG5pbXBvcnQgRm9ybSBmcm9tICcuL19mb3JtJztcclxuaW1wb3J0IENhc2VTdHVkeVNsaWRlciBmcm9tICcuL19jYXNlLXN0dWR5LXNsaWRlcidcclxuaW1wb3J0IFNpdGVJbmZvIGZyb20gJy4vX3NpdGUtaW5mbydcclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgIGNvbnN0IHNsaWRlciA9IG5ldyBTbGlkZXI7XHJcbiAgIGNvbnN0IGZpeGVkSGVhZGVyID0gbmV3IEZpeGVkSGVhZGVyO1xyXG4gICBjb25zdCBidXJnZXJNZW51ID0gbmV3IEJ1cmdlck1lbnU7XHJcbiAgIGNvbnN0IG9mZnNldFNjcm9sbCA9IG5ldyBPZmZzZXRTY3JvbGw7XHJcbiAgIGNvbnN0IGFuaW1hdGVOdW1iZXIgPSBuZXcgQW5pbWF0ZU51bWJlcjtcclxuICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtO1xyXG4gICBjb25zdCBjYXNlU3R1ZHlTbGlkZXIgPSBuZXcgQ2FzZVN0dWR5U2xpZGVyO1xyXG4gICBjb25zdCBzaXRlSW5mbyA9IG5ldyBTaXRlSW5mbztcclxufTsiXX0=
},{"./_animate-number":1,"./_burger-menu":2,"./_case-study-slider":3,"./_fixed-header":4,"./_form":5,"./_offset-scroll":6,"./_site-info":7,"./_slider":8}]},{},[9])
//# sourceMappingURL=data:application/json;base64,
