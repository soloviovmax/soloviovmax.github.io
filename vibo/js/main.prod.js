(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

window.addEventListener('DOMContentLoaded', init);

function init() {
   var counterIsComplite = false;

   ankers();
   hamburger();

   var section = document.querySelector('.about-us__statistic');

   window.addEventListener('scroll', function (e) {
      if (section.getBoundingClientRect().top <= window.innerHeight) {
         !counterIsComplite && animateNumber();
         counterIsComplite = true;
      };
   });

   window.addEventListener('click', function (e) {
      if (!e.target.classList.contains('nav') && !e.target.classList.contains('header__hamburger-btn') && !e.target.parentElement.classList.contains('header__hamburger-btn') && !e.target.parentElement.parentElement.classList.contains('header__hamburger-btn') && document.querySelector('.nav--active')) {
         document.querySelector('.nav--active').classList.remove('nav--active');
      };
   });
};

function animateNumber() {
   var numbers = document.querySelectorAll('.about-us__statistic-number > span');

   var _loop = function _loop(i) {
      var finiteNumber = parseInt(numbers[i].textContent),
          startNumber = Math.round(finiteNumber / 3 * 2),
          numbersDifference = finiteNumber - startNumber,
          time = 3000 / numbersDifference;

      var _loop2 = function _loop2(n) {
         setTimeout(function () {

            numbers[i].textContent = n + startNumber;
         }, time * n);
      };

      for (var n = 0; n <= numbersDifference; n++) {
         _loop2(n);
      };
   };

   for (var i = 0; i < numbers.length; i++) {
      _loop(i);
   };
};

function ankers() {
   var buttons = document.querySelectorAll('.nav__btn');

   buttons.forEach(function (btn) {
      btn.addEventListener('click', function (e) {
         var anker = this.dataset.anker;
         var element = document.getElementById(anker);
         scrollTo(element);
      });
   });
};

function scrollTo(destination) {
   var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;

   var start = window.pageYOffset;
   var startTime = 'now' in window.performance ? performance.now() : new Date().getTime();

   var documentHeight = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);
   var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;
   var headerHeight = document.querySelector('.header').offsetHeight;
   var destinationOffset = typeof destination === 'number' ? destination : destination.offsetTop - headerHeight;

   if (destinationOffset < 0) {
      destinationOffset = 0;
   }

   var destinationOffsetToScroll = Math.round(documentHeight - destinationOffset < windowHeight ? documentHeight - windowHeight : destinationOffset);

   if ('requestAnimationFrame' in window === false) {
      window.scroll(0, destinationOffsetToScroll);
      return;
   }

   function scroll() {
      var now = 'now' in window.performance ? performance.now() : new Date().getTime();
      var time = Math.min(1, (now - startTime) / duration);
      var timeFunction = time;
      window.scroll(0, Math.ceil(timeFunction * (destinationOffsetToScroll - start) + start));

      if (window.pageYOffset === destinationOffsetToScroll) {
         return;
      }

      requestAnimationFrame(scroll);
   }

   scroll();
};

function hamburger() {
   var btn = document.querySelector('.header__hamburger');
   var menu = document.querySelector('.nav');

   btn.addEventListener('click', function (e) {
      menu.classList.toggle('nav--active');
   });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
